// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dummy_proc_fe_1395 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        direction,
        in_r_dout,
        in_r_empty_n,
        in_r_read,
        xn1_din,
        xn1_full_n,
        xn1_write,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;
parameter    ap_const_lv16_0 = 16'd0;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] direction;
input  [63:0] in_r_dout;
input   in_r_empty_n;
output   in_r_read;
output  [63:0] xn1_din;
input   xn1_full_n;
output   xn1_write;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_r_read;
reg xn1_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_r_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_93_p2;
reg    xn1_blk_n;
wire   [15:0] p_Result_s_fu_81_p5;
reg   [15:0] p_Result_s_reg_105;
wire   [8:0] i_2_fu_99_p2;
reg    ap_block_state2;
reg   [8:0] i_reg_62;
wire   [8:0] tmp_s_fu_73_p3;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond_fu_93_p2 == 1'd0) & (xn1_full_n == 1'b0)) | ((exitcond_fu_93_p2 == 1'd0) & (in_r_empty_n == 1'b0))) & (exitcond_fu_93_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_62 <= i_2_fu_99_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_62 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Result_s_reg_105 <= p_Result_s_fu_81_p5;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~(((exitcond_fu_93_p2 == 1'd0) & (xn1_full_n == 1'b0)) | ((exitcond_fu_93_p2 == 1'd0) & (in_r_empty_n == 1'b0))) & (exitcond_fu_93_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_93_p2 == 1'd0) & (xn1_full_n == 1'b0)) | ((exitcond_fu_93_p2 == 1'd0) & (in_r_empty_n == 1'b0))) & (exitcond_fu_93_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_93_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_r_blk_n = in_r_empty_n;
    end else begin
        in_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_93_p2 == 1'd0) & (xn1_full_n == 1'b0)) | ((exitcond_fu_93_p2 == 1'd0) & (in_r_empty_n == 1'b0))) & (exitcond_fu_93_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_r_read = 1'b1;
    end else begin
        in_r_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_93_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        xn1_blk_n = xn1_full_n;
    end else begin
        xn1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_93_p2 == 1'd0) & (xn1_full_n == 1'b0)) | ((exitcond_fu_93_p2 == 1'd0) & (in_r_empty_n == 1'b0))) & (exitcond_fu_93_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        xn1_write = 1'b1;
    end else begin
        xn1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((exitcond_fu_93_p2 == 1'd0) & (xn1_full_n == 1'b0)) | ((exitcond_fu_93_p2 == 1'd0) & (in_r_empty_n == 1'b0))) & (exitcond_fu_93_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((exitcond_fu_93_p2 == 1'd0) & (xn1_full_n == 1'b0)) | ((exitcond_fu_93_p2 == 1'd0) & (in_r_empty_n == 1'b0))) & (exitcond_fu_93_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2 = (((exitcond_fu_93_p2 == 1'd0) & (xn1_full_n == 1'b0)) | ((exitcond_fu_93_p2 == 1'd0) & (in_r_empty_n == 1'b0)));
end

assign ap_return = p_Result_s_reg_105;

assign exitcond_fu_93_p2 = ((i_reg_62 == 9'd256) ? 1'b1 : 1'b0);

assign i_2_fu_99_p2 = (i_reg_62 + 9'd1);

assign p_Result_s_fu_81_p5 = {{ap_const_lv16_0[15:9]}, {tmp_s_fu_73_p3}};

assign tmp_s_fu_73_p3 = {{8'd171}, {direction}};

assign xn1_din = in_r_dout;

endmodule //dummy_proc_fe_1395
