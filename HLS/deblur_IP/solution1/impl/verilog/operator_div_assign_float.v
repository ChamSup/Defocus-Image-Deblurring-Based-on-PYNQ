// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module operator_div_assign_float (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        complex_float_M_real_read,
        complex_float_M_imag_read,
        p_z_M_real_dout,
        p_z_M_real_empty_n,
        p_z_M_real_read,
        p_z_M_imag_dout,
        p_z_M_imag_empty_n,
        p_z_M_imag_read,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_state9 = 26'd256;
parameter    ap_ST_fsm_state10 = 26'd512;
parameter    ap_ST_fsm_state11 = 26'd1024;
parameter    ap_ST_fsm_state12 = 26'd2048;
parameter    ap_ST_fsm_state13 = 26'd4096;
parameter    ap_ST_fsm_state14 = 26'd8192;
parameter    ap_ST_fsm_state15 = 26'd16384;
parameter    ap_ST_fsm_state16 = 26'd32768;
parameter    ap_ST_fsm_state17 = 26'd65536;
parameter    ap_ST_fsm_state18 = 26'd131072;
parameter    ap_ST_fsm_state19 = 26'd262144;
parameter    ap_ST_fsm_state20 = 26'd524288;
parameter    ap_ST_fsm_state21 = 26'd1048576;
parameter    ap_ST_fsm_state22 = 26'd2097152;
parameter    ap_ST_fsm_state23 = 26'd4194304;
parameter    ap_ST_fsm_state24 = 26'd8388608;
parameter    ap_ST_fsm_state25 = 26'd16777216;
parameter    ap_ST_fsm_state26 = 26'd33554432;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] complex_float_M_real_read;
input  [31:0] complex_float_M_imag_read;
input  [31:0] p_z_M_real_dout;
input   p_z_M_real_empty_n;
output   p_z_M_real_read;
input  [31:0] p_z_M_imag_dout;
input   p_z_M_imag_empty_n;
output   p_z_M_imag_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_z_M_real_read;
reg p_z_M_imag_read;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_z_M_real_blk_n;
reg    p_z_M_imag_blk_n;
reg   [31:0] p_t_real_reg_108;
reg    ap_block_state1;
reg   [31:0] p_t_imag_reg_116;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_fu_60_p2;
reg   [31:0] tmp_reg_136;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_65_p2;
reg   [31:0] tmp_1_reg_141;
wire   [31:0] grp_fu_70_p2;
reg   [31:0] tmp_3_reg_146;
wire   [31:0] grp_fu_74_p2;
reg   [31:0] tmp_4_reg_151;
wire   [31:0] grp_fu_78_p2;
reg   [31:0] tmp_6_reg_156;
wire   [31:0] grp_fu_83_p2;
reg   [31:0] tmp_7_reg_161;
wire   [31:0] grp_fu_48_p2;
reg   [31:0] tmp_2_reg_166;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_52_p2;
reg   [31:0] tmp_5_reg_171;
wire   [31:0] grp_fu_56_p2;
reg   [31:0] tmp_8_reg_177;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_88_p2;
wire    ap_CS_fsm_state26;
wire   [31:0] grp_fu_92_p2;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [25:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 26'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
end

WienerDeblur_faddibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
WienerDeblur_faddibs_U141(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_136),
    .din1(tmp_1_reg_141),
    .ce(1'b1),
    .dout(grp_fu_48_p2)
);

WienerDeblur_faddibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
WienerDeblur_faddibs_U142(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_3_reg_146),
    .din1(tmp_4_reg_151),
    .ce(1'b1),
    .dout(grp_fu_52_p2)
);

WienerDeblur_fsubbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
WienerDeblur_fsubbkb_U143(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_6_reg_156),
    .din1(tmp_7_reg_161),
    .ce(1'b1),
    .dout(grp_fu_56_p2)
);

WienerDeblur_fmuljbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
WienerDeblur_fmuljbC_U144(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_t_real_reg_108),
    .din1(complex_float_M_real_read),
    .ce(1'b1),
    .dout(grp_fu_60_p2)
);

WienerDeblur_fmuljbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
WienerDeblur_fmuljbC_U145(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_t_imag_reg_116),
    .din1(complex_float_M_imag_read),
    .ce(1'b1),
    .dout(grp_fu_65_p2)
);

WienerDeblur_fmuljbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
WienerDeblur_fmuljbC_U146(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_t_real_reg_108),
    .din1(p_t_real_reg_108),
    .ce(1'b1),
    .dout(grp_fu_70_p2)
);

WienerDeblur_fmuljbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
WienerDeblur_fmuljbC_U147(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_t_imag_reg_116),
    .din1(p_t_imag_reg_116),
    .ce(1'b1),
    .dout(grp_fu_74_p2)
);

WienerDeblur_fmuljbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
WienerDeblur_fmuljbC_U148(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_t_real_reg_108),
    .din1(complex_float_M_imag_read),
    .ce(1'b1),
    .dout(grp_fu_78_p2)
);

WienerDeblur_fmuljbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
WienerDeblur_fmuljbC_U149(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_t_imag_reg_116),
    .din1(complex_float_M_real_read),
    .ce(1'b1),
    .dout(grp_fu_83_p2)
);

WienerDeblur_fdivNgs #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
WienerDeblur_fdivNgs_U150(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_2_reg_166),
    .din1(tmp_5_reg_171),
    .ce(1'b1),
    .dout(grp_fu_88_p2)
);

WienerDeblur_fdivNgs #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
WienerDeblur_fdivNgs_U151(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_8_reg_177),
    .din1(tmp_5_reg_171),
    .ce(1'b1),
    .dout(grp_fu_92_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state26)) begin
            ap_return_0_preg <= grp_fu_88_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state26)) begin
            ap_return_1_preg <= grp_fu_92_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_z_M_imag_empty_n == 1'b0) | (p_z_M_real_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_t_imag_reg_116 <= p_z_M_imag_dout;
        p_t_real_reg_108 <= p_z_M_real_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_1_reg_141 <= grp_fu_65_p2;
        tmp_3_reg_146 <= grp_fu_70_p2;
        tmp_4_reg_151 <= grp_fu_74_p2;
        tmp_6_reg_156 <= grp_fu_78_p2;
        tmp_7_reg_161 <= grp_fu_83_p2;
        tmp_reg_136 <= grp_fu_60_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_2_reg_166 <= grp_fu_48_p2;
        tmp_5_reg_171 <= grp_fu_52_p2;
        tmp_8_reg_177 <= grp_fu_56_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ap_return_0 = grp_fu_88_p2;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ap_return_1 = grp_fu_92_p2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_z_M_imag_blk_n = p_z_M_imag_empty_n;
    end else begin
        p_z_M_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_z_M_imag_empty_n == 1'b0) | (p_z_M_real_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_z_M_imag_read = 1'b1;
    end else begin
        p_z_M_imag_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_z_M_real_blk_n = p_z_M_real_empty_n;
    end else begin
        p_z_M_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_z_M_imag_empty_n == 1'b0) | (p_z_M_real_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_z_M_real_read = 1'b1;
    end else begin
        p_z_M_real_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_z_M_imag_empty_n == 1'b0) | (p_z_M_real_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((p_z_M_imag_empty_n == 1'b0) | (p_z_M_real_empty_n == 1'b0) | (ap_start == 1'b0));
end

endmodule //operator_div_assign_float
