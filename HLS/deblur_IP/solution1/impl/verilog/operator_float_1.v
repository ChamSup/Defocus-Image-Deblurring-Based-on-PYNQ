// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module operator_float_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fft_kernel_modu_M_r_dout,
        fft_kernel_modu_M_r_empty_n,
        fft_kernel_modu_M_r_read,
        fft_kernel_modu_M_i_dout,
        fft_kernel_modu_M_i_empty_n,
        fft_kernel_modu_M_i_read,
        ap_return_0,
        ap_return_1,
        fft_kernel_modu_M_r_blk_n,
        fft_kernel_modu_M_i_blk_n,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] fft_kernel_modu_M_r_dout;
input   fft_kernel_modu_M_r_empty_n;
output   fft_kernel_modu_M_r_read;
input  [31:0] fft_kernel_modu_M_i_dout;
input   fft_kernel_modu_M_i_empty_n;
output   fft_kernel_modu_M_i_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output   fft_kernel_modu_M_r_blk_n;
output   fft_kernel_modu_M_i_blk_n;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fft_kernel_modu_M_r_read;
reg fft_kernel_modu_M_i_read;
reg fft_kernel_modu_M_r_blk_n;
reg fft_kernel_modu_M_i_blk_n;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_operator_mul_assign_float_fu_30_p_z_M_real_blk_n;
wire    ap_CS_fsm_state2;
wire    grp_operator_mul_assign_float_fu_30_p_z_M_imag_blk_n;
reg   [31:0] p_r_M_real_reg_40;
reg    ap_block_state1;
reg   [31:0] p_r_M_imag_reg_45;
wire    grp_operator_mul_assign_float_fu_30_ap_start;
wire    grp_operator_mul_assign_float_fu_30_ap_done;
wire    grp_operator_mul_assign_float_fu_30_ap_idle;
wire    grp_operator_mul_assign_float_fu_30_ap_ready;
wire    grp_operator_mul_assign_float_fu_30_p_z_M_real_read;
wire    grp_operator_mul_assign_float_fu_30_p_z_M_imag_read;
reg    grp_operator_mul_assign_float_fu_30_ap_ce;
wire   [31:0] grp_operator_mul_assign_float_fu_30_ap_return_0;
wire   [31:0] grp_operator_mul_assign_float_fu_30_ap_return_1;
reg    ap_block_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg    grp_operator_mul_assign_float_fu_30_ap_start_reg;
reg   [10:0] ap_NS_fsm;
wire    ap_NS_fsm_state2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_operator_mul_assign_float_fu_30_ap_start_reg = 1'b0;
end

operator_mul_assign_float grp_operator_mul_assign_float_fu_30(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_operator_mul_assign_float_fu_30_ap_start),
    .ap_done(grp_operator_mul_assign_float_fu_30_ap_done),
    .ap_idle(grp_operator_mul_assign_float_fu_30_ap_idle),
    .ap_ready(grp_operator_mul_assign_float_fu_30_ap_ready),
    .p_z_M_real_dout(fft_kernel_modu_M_r_dout),
    .p_z_M_real_empty_n(fft_kernel_modu_M_r_empty_n),
    .p_z_M_real_read(grp_operator_mul_assign_float_fu_30_p_z_M_real_read),
    .p_z_M_imag_dout(fft_kernel_modu_M_i_dout),
    .p_z_M_imag_empty_n(fft_kernel_modu_M_i_empty_n),
    .p_z_M_imag_read(grp_operator_mul_assign_float_fu_30_p_z_M_imag_read),
    .ap_ce(grp_operator_mul_assign_float_fu_30_ap_ce),
    .complex_float_M_real_read(p_r_M_real_reg_40),
    .complex_float_M_imag_read(p_r_M_imag_reg_45),
    .ap_return_0(grp_operator_mul_assign_float_fu_30_ap_return_0),
    .ap_return_1(grp_operator_mul_assign_float_fu_30_ap_return_1),
    .p_z_M_real_blk_n(grp_operator_mul_assign_float_fu_30_p_z_M_real_blk_n),
    .p_z_M_imag_blk_n(grp_operator_mul_assign_float_fu_30_p_z_M_imag_blk_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_operator_mul_assign_float_fu_30_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_NS_fsm_state2))) begin
            grp_operator_mul_assign_float_fu_30_ap_start_reg <= 1'b1;
        end else if ((grp_operator_mul_assign_float_fu_30_ap_ready == 1'b1)) begin
            grp_operator_mul_assign_float_fu_30_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((fft_kernel_modu_M_i_empty_n == 1'b0) | (fft_kernel_modu_M_r_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        p_r_M_imag_reg_45 <= fft_kernel_modu_M_i_dout;
        p_r_M_real_reg_40 <= fft_kernel_modu_M_r_dout;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        fft_kernel_modu_M_i_blk_n = grp_operator_mul_assign_float_fu_30_p_z_M_imag_blk_n;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        fft_kernel_modu_M_i_blk_n = fft_kernel_modu_M_i_empty_n;
    end else begin
        fft_kernel_modu_M_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((fft_kernel_modu_M_i_empty_n == 1'b0) | (fft_kernel_modu_M_r_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        fft_kernel_modu_M_i_read = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        fft_kernel_modu_M_i_read = grp_operator_mul_assign_float_fu_30_p_z_M_imag_read;
    end else begin
        fft_kernel_modu_M_i_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        fft_kernel_modu_M_r_blk_n = grp_operator_mul_assign_float_fu_30_p_z_M_real_blk_n;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        fft_kernel_modu_M_r_blk_n = fft_kernel_modu_M_r_empty_n;
    end else begin
        fft_kernel_modu_M_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((fft_kernel_modu_M_i_empty_n == 1'b0) | (fft_kernel_modu_M_r_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        fft_kernel_modu_M_r_read = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        fft_kernel_modu_M_r_read = grp_operator_mul_assign_float_fu_30_p_z_M_real_read;
    end else begin
        fft_kernel_modu_M_r_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_ce) | (1'b1 == ap_CS_fsm_state1))) begin
        grp_operator_mul_assign_float_fu_30_ap_ce = 1'b0;
    end else begin
        grp_operator_mul_assign_float_fu_30_ap_ce = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((fft_kernel_modu_M_i_empty_n == 1'b0) | (fft_kernel_modu_M_r_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((grp_operator_mul_assign_float_fu_30_p_z_M_imag_blk_n == 1'b0) | (grp_operator_mul_assign_float_fu_30_p_z_M_real_blk_n == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state2 = ap_NS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((fft_kernel_modu_M_i_empty_n == 1'b0) | (fft_kernel_modu_M_r_empty_n == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((grp_operator_mul_assign_float_fu_30_p_z_M_imag_blk_n == 1'b0) | (grp_operator_mul_assign_float_fu_30_p_z_M_real_blk_n == 1'b0));
end

assign ap_return_0 = grp_operator_mul_assign_float_fu_30_ap_return_0;

assign ap_return_1 = grp_operator_mul_assign_float_fu_30_ap_return_1;

assign grp_operator_mul_assign_float_fu_30_ap_start = grp_operator_mul_assign_float_fu_30_ap_start_reg;

endmodule //operator_float_1
