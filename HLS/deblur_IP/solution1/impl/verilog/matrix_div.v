// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module matrix_div (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        G1_M_real_dout,
        G1_M_real_empty_n,
        G1_M_real_read,
        G1_M_imag_dout,
        G1_M_imag_empty_n,
        G1_M_imag_read,
        fft_kernel_M_real_dout,
        fft_kernel_M_real_empty_n,
        fft_kernel_M_real_read,
        fft_kernel_M_imag_dout,
        fft_kernel_M_imag_empty_n,
        fft_kernel_M_imag_read,
        G_M_real_din,
        G_M_real_full_n,
        G_M_real_write,
        G_M_imag_din,
        G_M_imag_full_n,
        G_M_imag_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] G1_M_real_dout;
input   G1_M_real_empty_n;
output   G1_M_real_read;
input  [31:0] G1_M_imag_dout;
input   G1_M_imag_empty_n;
output   G1_M_imag_read;
input  [31:0] fft_kernel_M_real_dout;
input   fft_kernel_M_real_empty_n;
output   fft_kernel_M_real_read;
input  [31:0] fft_kernel_M_imag_dout;
input   fft_kernel_M_imag_empty_n;
output   fft_kernel_M_imag_read;
output  [31:0] G_M_real_din;
input   G_M_real_full_n;
output   G_M_real_write;
output  [31:0] G_M_imag_din;
input   G_M_imag_full_n;
output   G_M_imag_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg G1_M_real_read;
reg G1_M_imag_read;
reg fft_kernel_M_real_read;
reg fft_kernel_M_imag_read;
reg G_M_real_write;
reg G_M_imag_write;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    G_M_real_blk_n;
wire    ap_CS_fsm_state5;
reg    G_M_imag_blk_n;
wire   [8:0] r_3_fu_90_p2;
reg   [8:0] r_3_reg_119;
wire    ap_CS_fsm_state2;
wire   [8:0] c_3_fu_102_p2;
reg   [8:0] c_3_reg_127;
wire    ap_CS_fsm_state3;
reg   [31:0] p_0_reg_132;
wire    ap_CS_fsm_state4;
wire    grp_operator_div_float_fu_72_ap_ready;
wire    grp_operator_div_float_fu_72_ap_done;
reg   [31:0] p_1_reg_137;
wire    grp_operator_div_float_fu_72_ap_start;
wire    grp_operator_div_float_fu_72_ap_idle;
wire    grp_operator_div_float_fu_72_p_x_M_real_read;
wire    grp_operator_div_float_fu_72_p_x_M_imag_read;
wire    grp_operator_div_float_fu_72_p_y_M_real_read;
wire    grp_operator_div_float_fu_72_p_y_M_imag_read;
wire   [31:0] grp_operator_div_float_fu_72_ap_return_0;
wire   [31:0] grp_operator_div_float_fu_72_ap_return_1;
reg   [8:0] r_reg_50;
wire   [0:0] exitcond_fu_96_p2;
reg   [8:0] c_reg_61;
reg    ap_block_state5;
wire   [0:0] exitcond1_fu_84_p2;
reg    grp_operator_div_float_fu_72_ap_start_reg;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_operator_div_float_fu_72_ap_start_reg = 1'b0;
end

operator_div_float grp_operator_div_float_fu_72(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_operator_div_float_fu_72_ap_start),
    .ap_done(grp_operator_div_float_fu_72_ap_done),
    .ap_idle(grp_operator_div_float_fu_72_ap_idle),
    .ap_ready(grp_operator_div_float_fu_72_ap_ready),
    .p_x_M_real_dout(G1_M_real_dout),
    .p_x_M_real_empty_n(G1_M_real_empty_n),
    .p_x_M_real_read(grp_operator_div_float_fu_72_p_x_M_real_read),
    .p_x_M_imag_dout(G1_M_imag_dout),
    .p_x_M_imag_empty_n(G1_M_imag_empty_n),
    .p_x_M_imag_read(grp_operator_div_float_fu_72_p_x_M_imag_read),
    .p_y_M_real_dout(fft_kernel_M_real_dout),
    .p_y_M_real_empty_n(fft_kernel_M_real_empty_n),
    .p_y_M_real_read(grp_operator_div_float_fu_72_p_y_M_real_read),
    .p_y_M_imag_dout(fft_kernel_M_imag_dout),
    .p_y_M_imag_empty_n(fft_kernel_M_imag_empty_n),
    .p_y_M_imag_read(grp_operator_div_float_fu_72_p_y_M_imag_read),
    .ap_return_0(grp_operator_div_float_fu_72_ap_return_0),
    .ap_return_1(grp_operator_div_float_fu_72_ap_return_1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_operator_div_float_fu_72_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_96_p2 == 1'd0))) begin
            grp_operator_div_float_fu_72_ap_start_reg <= 1'b1;
        end else if ((grp_operator_div_float_fu_72_ap_ready == 1'b1)) begin
            grp_operator_div_float_fu_72_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_84_p2 == 1'd0))) begin
        c_reg_61 <= 9'd0;
    end else if ((~((1'b0 == G_M_imag_full_n) | (1'b0 == G_M_real_full_n)) & (1'b1 == ap_CS_fsm_state5))) begin
        c_reg_61 <= c_3_reg_127;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_96_p2 == 1'd1))) begin
        r_reg_50 <= r_3_reg_119;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_reg_50 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_3_reg_127 <= c_3_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_operator_div_float_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_0_reg_132 <= grp_operator_div_float_fu_72_ap_return_0;
        p_1_reg_137 <= grp_operator_div_float_fu_72_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_3_reg_119 <= r_3_fu_90_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        G1_M_imag_read = grp_operator_div_float_fu_72_p_x_M_imag_read;
    end else begin
        G1_M_imag_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        G1_M_real_read = grp_operator_div_float_fu_72_p_x_M_real_read;
    end else begin
        G1_M_real_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        G_M_imag_blk_n = G_M_imag_full_n;
    end else begin
        G_M_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == G_M_imag_full_n) | (1'b0 == G_M_real_full_n)) & (1'b1 == ap_CS_fsm_state5))) begin
        G_M_imag_write = 1'b1;
    end else begin
        G_M_imag_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        G_M_real_blk_n = G_M_real_full_n;
    end else begin
        G_M_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == G_M_imag_full_n) | (1'b0 == G_M_real_full_n)) & (1'b1 == ap_CS_fsm_state5))) begin
        G_M_real_write = 1'b1;
    end else begin
        G_M_real_write = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_84_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_84_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fft_kernel_M_imag_read = grp_operator_div_float_fu_72_p_y_M_imag_read;
    end else begin
        fft_kernel_M_imag_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fft_kernel_M_real_read = grp_operator_div_float_fu_72_p_y_M_real_read;
    end else begin
        fft_kernel_M_real_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_84_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_96_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((grp_operator_div_float_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((1'b0 == G_M_imag_full_n) | (1'b0 == G_M_real_full_n)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign G_M_imag_din = p_1_reg_137;

assign G_M_real_din = p_0_reg_132;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state5 = ((1'b0 == G_M_imag_full_n) | (1'b0 == G_M_real_full_n));
end

assign c_3_fu_102_p2 = (c_reg_61 + 9'd1);

assign exitcond1_fu_84_p2 = ((r_reg_50 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond_fu_96_p2 = ((c_reg_61 == 9'd256) ? 1'b1 : 1'b0);

assign grp_operator_div_float_fu_72_ap_start = grp_operator_div_float_fu_72_ap_start_reg;

assign r_3_fu_90_p2 = (r_reg_50 + 9'd1);

endmodule //matrix_div
