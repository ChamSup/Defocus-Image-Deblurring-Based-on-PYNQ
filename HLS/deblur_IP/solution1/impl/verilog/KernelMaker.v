// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module KernelMaker (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        kernel_M_real_din,
        kernel_M_real_full_n,
        kernel_M_real_write,
        kernel_M_imag_din,
        kernel_M_imag_full_n,
        kernel_M_imag_write
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_state9 = 29'd256;
parameter    ap_ST_fsm_state10 = 29'd512;
parameter    ap_ST_fsm_state11 = 29'd1024;
parameter    ap_ST_fsm_state12 = 29'd2048;
parameter    ap_ST_fsm_state13 = 29'd4096;
parameter    ap_ST_fsm_state14 = 29'd8192;
parameter    ap_ST_fsm_state15 = 29'd16384;
parameter    ap_ST_fsm_state16 = 29'd32768;
parameter    ap_ST_fsm_state17 = 29'd65536;
parameter    ap_ST_fsm_state18 = 29'd131072;
parameter    ap_ST_fsm_state19 = 29'd262144;
parameter    ap_ST_fsm_state20 = 29'd524288;
parameter    ap_ST_fsm_state21 = 29'd1048576;
parameter    ap_ST_fsm_state22 = 29'd2097152;
parameter    ap_ST_fsm_state23 = 29'd4194304;
parameter    ap_ST_fsm_state24 = 29'd8388608;
parameter    ap_ST_fsm_state25 = 29'd16777216;
parameter    ap_ST_fsm_state26 = 29'd33554432;
parameter    ap_ST_fsm_state27 = 29'd67108864;
parameter    ap_ST_fsm_state28 = 29'd134217728;
parameter    ap_ST_fsm_state29 = 29'd268435456;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] kernel_M_real_din;
input   kernel_M_real_full_n;
output   kernel_M_real_write;
output  [31:0] kernel_M_imag_din;
input   kernel_M_imag_full_n;
output   kernel_M_imag_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg kernel_M_real_write;
reg kernel_M_imag_write;

(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    StgValue_88_real379_fu_68_complex_float_M_real_blk_n;
reg    kernel_M_real_blk_n;
wire    ap_CS_fsm_state29;
wire    StgValue_89_imag380_fu_75_complex_float_M_imag_blk_n;
reg    kernel_M_imag_blk_n;
wire   [8:0] i_3_fu_101_p2;
reg   [8:0] i_3_reg_220;
wire    ap_CS_fsm_state2;
wire   [16:0] tmp_138_cast_fu_117_p2;
reg   [16:0] tmp_138_cast_reg_225;
wire   [0:0] exitcond_fu_95_p2;
wire   [8:0] j_1_fu_129_p2;
reg   [8:0] j_1_reg_233;
wire    ap_CS_fsm_state3;
wire  signed [16:0] grp_fu_208_p3;
reg  signed [16:0] tmp_93_reg_238;
wire   [0:0] exitcond1_fu_123_p2;
reg   [0:0] tmp_113_reg_243;
reg   [1:0] tmp_97_reg_248;
wire   [3:0] tmp_99_fu_197_p3;
reg   [3:0] tmp_99_reg_253;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [63:0] grp_fu_87_p1;
reg   [63:0] tmp_100_reg_263;
wire    ap_CS_fsm_state10;
wire   [63:0] grp_fu_90_p2;
reg   [63:0] tmp_101_reg_268;
wire    ap_CS_fsm_state28;
reg    StgValue_88_real379_fu_68_ap_start;
wire    StgValue_88_real379_fu_68_ap_done;
wire    StgValue_88_real379_fu_68_ap_idle;
wire    StgValue_88_real379_fu_68_ap_ready;
wire   [31:0] StgValue_88_real379_fu_68_complex_float_M_real_din;
wire    StgValue_88_real379_fu_68_complex_float_M_real_write;
reg    StgValue_89_imag380_fu_75_ap_start;
wire    StgValue_89_imag380_fu_75_ap_done;
wire    StgValue_89_imag380_fu_75_ap_idle;
wire    StgValue_89_imag380_fu_75_ap_ready;
wire   [31:0] StgValue_89_imag380_fu_75_complex_float_M_imag_din;
wire    StgValue_89_imag380_fu_75_complex_float_M_imag_write;
reg   [8:0] i_reg_46;
reg   [8:0] j_reg_57;
reg    ap_block_state29;
wire   [31:0] tmp_102_fu_83_p1;
wire  signed [31:0] grp_fu_87_p0;
wire    ap_CS_fsm_state11;
wire   [8:0] tmp_s_fu_107_p2;
wire  signed [8:0] tmp_138_cast_fu_117_p0;
wire  signed [16:0] tmp_fu_113_p1;
wire  signed [8:0] tmp_138_cast_fu_117_p1;
wire   [8:0] tmp_92_fu_135_p2;
(* use_dsp48 = "no" *) wire   [16:0] p_neg_fu_161_p2;
wire   [1:0] tmp_95_fu_166_p4;
wire  signed [2:0] tmp_96_fu_176_p1;
wire  signed [2:0] tmp_98_fu_184_p1;
wire   [3:0] p_lshr_f_cast_fu_187_p1;
wire   [3:0] p_lshr_cast_fu_180_p1;
wire   [3:0] p_neg_f_fu_191_p2;
wire  signed [8:0] grp_fu_208_p0;
wire  signed [16:0] tmp_91_fu_141_p1;
wire  signed [8:0] grp_fu_208_p1;
reg   [28:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'd1;
end

real379 StgValue_88_real379_fu_68(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(StgValue_88_real379_fu_68_ap_start),
    .ap_done(StgValue_88_real379_fu_68_ap_done),
    .ap_idle(StgValue_88_real379_fu_68_ap_idle),
    .ap_ready(StgValue_88_real379_fu_68_ap_ready),
    .complex_float_M_real_din(StgValue_88_real379_fu_68_complex_float_M_real_din),
    .complex_float_M_real_full_n(kernel_M_real_full_n),
    .complex_float_M_real_write(StgValue_88_real379_fu_68_complex_float_M_real_write),
    .p_val(tmp_102_fu_83_p1),
    .complex_float_M_real_blk_n(StgValue_88_real379_fu_68_complex_float_M_real_blk_n)
);

imag380 StgValue_89_imag380_fu_75(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(StgValue_89_imag380_fu_75_ap_start),
    .ap_done(StgValue_89_imag380_fu_75_ap_done),
    .ap_idle(StgValue_89_imag380_fu_75_ap_idle),
    .ap_ready(StgValue_89_imag380_fu_75_ap_ready),
    .complex_float_M_imag_din(StgValue_89_imag380_fu_75_complex_float_M_imag_din),
    .complex_float_M_imag_full_n(kernel_M_imag_full_n),
    .complex_float_M_imag_write(StgValue_89_imag380_fu_75_complex_float_M_imag_write),
    .p_val(32'd0),
    .complex_float_M_imag_blk_n(StgValue_89_imag380_fu_75_complex_float_M_imag_blk_n)
);

WienerDeblur_fptreOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
WienerDeblur_fptreOg_U32(
    .din0(tmp_101_reg_268),
    .dout(tmp_102_fu_83_p1)
);

WienerDeblur_sitofYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
WienerDeblur_sitofYi_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_87_p0),
    .ce(1'b1),
    .dout(grp_fu_87_p1)
);

WienerDeblur_dexpg8j #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
WienerDeblur_dexpg8j_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(tmp_100_reg_263),
    .ce(1'b1),
    .dout(grp_fu_90_p2)
);

WienerDeblur_mac_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
WienerDeblur_mac_hbi_U35(
    .din0(grp_fu_208_p0),
    .din1(grp_fu_208_p1),
    .din2(tmp_138_cast_reg_225),
    .dout(grp_fu_208_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_46 <= i_3_reg_220;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_46 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_95_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_57 <= 9'd0;
    end else if ((~((1'b0 == StgValue_89_imag380_fu_75_complex_float_M_imag_blk_n) | (1'b0 == StgValue_88_real379_fu_68_complex_float_M_real_blk_n)) & (1'b1 == ap_CS_fsm_state29))) begin
        j_reg_57 <= j_1_reg_233;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_220 <= i_3_fu_101_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_233 <= j_1_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_100_reg_263 <= grp_fu_87_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_101_reg_268 <= grp_fu_90_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_113_reg_243 <= grp_fu_208_p3[32'd16];
        tmp_93_reg_238 <= grp_fu_208_p3;
        tmp_97_reg_248 <= {{grp_fu_208_p3[16:15]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_95_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_138_cast_reg_225 <= tmp_138_cast_fu_117_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_99_reg_253 <= tmp_99_fu_197_p3;
    end
end

always @ (*) begin
    if (((1'b1 == StgValue_89_imag380_fu_75_complex_float_M_imag_blk_n) & (1'b1 == ap_CS_fsm_state29))) begin
        StgValue_88_real379_fu_68_ap_start = 1'b1;
    end else begin
        StgValue_88_real379_fu_68_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == StgValue_88_real379_fu_68_complex_float_M_real_blk_n) & (1'b1 == ap_CS_fsm_state29))) begin
        StgValue_89_imag380_fu_75_ap_start = 1'b1;
    end else begin
        StgValue_89_imag380_fu_75_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_fu_95_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_95_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        kernel_M_imag_blk_n = StgValue_89_imag380_fu_75_complex_float_M_imag_blk_n;
    end else begin
        kernel_M_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        kernel_M_imag_write = StgValue_89_imag380_fu_75_complex_float_M_imag_write;
    end else begin
        kernel_M_imag_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        kernel_M_real_blk_n = StgValue_88_real379_fu_68_complex_float_M_real_blk_n;
    end else begin
        kernel_M_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        kernel_M_real_write = StgValue_88_real379_fu_68_complex_float_M_real_write;
    end else begin
        kernel_M_real_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_95_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if ((~((1'b0 == StgValue_89_imag380_fu_75_complex_float_M_imag_blk_n) | (1'b0 == StgValue_88_real379_fu_68_complex_float_M_real_blk_n)) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state29 = ((1'b0 == StgValue_89_imag380_fu_75_complex_float_M_imag_blk_n) | (1'b0 == StgValue_88_real379_fu_68_complex_float_M_real_blk_n));
end

assign exitcond1_fu_123_p2 = ((j_reg_57 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond_fu_95_p2 = ((i_reg_46 == 9'd256) ? 1'b1 : 1'b0);

assign grp_fu_208_p0 = tmp_91_fu_141_p1;

assign grp_fu_208_p1 = tmp_91_fu_141_p1;

assign grp_fu_87_p0 = $signed(tmp_99_reg_253);

assign i_3_fu_101_p2 = (i_reg_46 + 9'd1);

assign j_1_fu_129_p2 = (j_reg_57 + 9'd1);

assign kernel_M_imag_din = StgValue_89_imag380_fu_75_complex_float_M_imag_din;

assign kernel_M_real_din = StgValue_88_real379_fu_68_complex_float_M_real_din;

assign p_lshr_cast_fu_180_p1 = $unsigned(tmp_96_fu_176_p1);

assign p_lshr_f_cast_fu_187_p1 = $unsigned(tmp_98_fu_184_p1);

assign p_neg_f_fu_191_p2 = (4'd0 - p_lshr_f_cast_fu_187_p1);

assign p_neg_fu_161_p2 = ($signed(17'd0) - $signed(tmp_93_reg_238));

assign tmp_138_cast_fu_117_p0 = tmp_fu_113_p1;

assign tmp_138_cast_fu_117_p1 = tmp_fu_113_p1;

assign tmp_138_cast_fu_117_p2 = ($signed(tmp_138_cast_fu_117_p0) * $signed(tmp_138_cast_fu_117_p1));

assign tmp_91_fu_141_p1 = $signed(tmp_92_fu_135_p2);

assign tmp_92_fu_135_p2 = ($signed(j_reg_57) + $signed(9'd384));

assign tmp_95_fu_166_p4 = {{p_neg_fu_161_p2[16:15]}};

assign tmp_96_fu_176_p1 = $signed(tmp_95_fu_166_p4);

assign tmp_98_fu_184_p1 = $signed(tmp_97_reg_248);

assign tmp_99_fu_197_p3 = ((tmp_113_reg_243[0:0] === 1'b1) ? p_lshr_cast_fu_180_p1 : p_neg_f_fu_191_p2);

assign tmp_fu_113_p1 = $signed(tmp_s_fu_107_p2);

assign tmp_s_fu_107_p2 = ($signed(i_reg_46) + $signed(9'd384));

endmodule //KernelMaker
