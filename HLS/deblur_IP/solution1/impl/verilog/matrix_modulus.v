// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module matrix_modulus (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fft_kernel_M_real_dout,
        fft_kernel_M_real_empty_n,
        fft_kernel_M_real_read,
        fft_kernel_M_imag_dout,
        fft_kernel_M_imag_empty_n,
        fft_kernel_M_imag_read,
        fft_kernel_modu_M_r_din,
        fft_kernel_modu_M_r_full_n,
        fft_kernel_modu_M_r_write,
        fft_kernel_modu_M_i_din,
        fft_kernel_modu_M_i_full_n,
        fft_kernel_modu_M_i_write
);

parameter    ap_ST_fsm_state1 = 108'd1;
parameter    ap_ST_fsm_state2 = 108'd2;
parameter    ap_ST_fsm_state3 = 108'd4;
parameter    ap_ST_fsm_state4 = 108'd8;
parameter    ap_ST_fsm_state5 = 108'd16;
parameter    ap_ST_fsm_state6 = 108'd32;
parameter    ap_ST_fsm_state7 = 108'd64;
parameter    ap_ST_fsm_state8 = 108'd128;
parameter    ap_ST_fsm_state9 = 108'd256;
parameter    ap_ST_fsm_state10 = 108'd512;
parameter    ap_ST_fsm_state11 = 108'd1024;
parameter    ap_ST_fsm_state12 = 108'd2048;
parameter    ap_ST_fsm_state13 = 108'd4096;
parameter    ap_ST_fsm_state14 = 108'd8192;
parameter    ap_ST_fsm_state15 = 108'd16384;
parameter    ap_ST_fsm_state16 = 108'd32768;
parameter    ap_ST_fsm_state17 = 108'd65536;
parameter    ap_ST_fsm_state18 = 108'd131072;
parameter    ap_ST_fsm_state19 = 108'd262144;
parameter    ap_ST_fsm_state20 = 108'd524288;
parameter    ap_ST_fsm_state21 = 108'd1048576;
parameter    ap_ST_fsm_state22 = 108'd2097152;
parameter    ap_ST_fsm_state23 = 108'd4194304;
parameter    ap_ST_fsm_state24 = 108'd8388608;
parameter    ap_ST_fsm_state25 = 108'd16777216;
parameter    ap_ST_fsm_state26 = 108'd33554432;
parameter    ap_ST_fsm_state27 = 108'd67108864;
parameter    ap_ST_fsm_state28 = 108'd134217728;
parameter    ap_ST_fsm_state29 = 108'd268435456;
parameter    ap_ST_fsm_state30 = 108'd536870912;
parameter    ap_ST_fsm_state31 = 108'd1073741824;
parameter    ap_ST_fsm_state32 = 108'd2147483648;
parameter    ap_ST_fsm_state33 = 108'd4294967296;
parameter    ap_ST_fsm_state34 = 108'd8589934592;
parameter    ap_ST_fsm_state35 = 108'd17179869184;
parameter    ap_ST_fsm_state36 = 108'd34359738368;
parameter    ap_ST_fsm_state37 = 108'd68719476736;
parameter    ap_ST_fsm_state38 = 108'd137438953472;
parameter    ap_ST_fsm_state39 = 108'd274877906944;
parameter    ap_ST_fsm_state40 = 108'd549755813888;
parameter    ap_ST_fsm_state41 = 108'd1099511627776;
parameter    ap_ST_fsm_state42 = 108'd2199023255552;
parameter    ap_ST_fsm_state43 = 108'd4398046511104;
parameter    ap_ST_fsm_state44 = 108'd8796093022208;
parameter    ap_ST_fsm_state45 = 108'd17592186044416;
parameter    ap_ST_fsm_state46 = 108'd35184372088832;
parameter    ap_ST_fsm_state47 = 108'd70368744177664;
parameter    ap_ST_fsm_state48 = 108'd140737488355328;
parameter    ap_ST_fsm_state49 = 108'd281474976710656;
parameter    ap_ST_fsm_state50 = 108'd562949953421312;
parameter    ap_ST_fsm_state51 = 108'd1125899906842624;
parameter    ap_ST_fsm_state52 = 108'd2251799813685248;
parameter    ap_ST_fsm_state53 = 108'd4503599627370496;
parameter    ap_ST_fsm_state54 = 108'd9007199254740992;
parameter    ap_ST_fsm_state55 = 108'd18014398509481984;
parameter    ap_ST_fsm_state56 = 108'd36028797018963968;
parameter    ap_ST_fsm_state57 = 108'd72057594037927936;
parameter    ap_ST_fsm_state58 = 108'd144115188075855872;
parameter    ap_ST_fsm_state59 = 108'd288230376151711744;
parameter    ap_ST_fsm_state60 = 108'd576460752303423488;
parameter    ap_ST_fsm_state61 = 108'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 108'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 108'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 108'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 108'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 108'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 108'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 108'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 108'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 108'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 108'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 108'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 108'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 108'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 108'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 108'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 108'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 108'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 108'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 108'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 108'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 108'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 108'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 108'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 108'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 108'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 108'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 108'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 108'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 108'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 108'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 108'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 108'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 108'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 108'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 108'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 108'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 108'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 108'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 108'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 108'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 108'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 108'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 108'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 108'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 108'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 108'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 108'd162259276829213363391578010288128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] fft_kernel_M_real_dout;
input   fft_kernel_M_real_empty_n;
output   fft_kernel_M_real_read;
input  [31:0] fft_kernel_M_imag_dout;
input   fft_kernel_M_imag_empty_n;
output   fft_kernel_M_imag_read;
output  [31:0] fft_kernel_modu_M_r_din;
input   fft_kernel_modu_M_r_full_n;
output   fft_kernel_modu_M_r_write;
output  [31:0] fft_kernel_modu_M_i_din;
input   fft_kernel_modu_M_i_full_n;
output   fft_kernel_modu_M_i_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fft_kernel_M_real_read;
reg fft_kernel_M_imag_read;
reg fft_kernel_modu_M_r_write;
reg fft_kernel_modu_M_i_write;

(* fsm_encoding = "none" *) reg   [107:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fft_kernel_M_real_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_198_p2;
reg    fft_kernel_M_imag_blk_n;
wire    StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_blk_n;
reg    fft_kernel_modu_M_r_blk_n;
wire    ap_CS_fsm_state108;
wire    StgValue_300_imag_fu_161_fft_kernel_modu_M_i_blk_n;
reg    fft_kernel_modu_M_i_blk_n;
wire   [8:0] r_2_fu_192_p2;
reg   [8:0] r_2_reg_213;
wire    ap_CS_fsm_state2;
wire   [8:0] c_2_fu_204_p2;
reg   [8:0] c_2_reg_221;
reg    ap_block_state3;
reg   [31:0] fft_kernel_M_real_r_reg_226;
reg   [31:0] fft_kernel_M_imag_r_reg_231;
wire   [63:0] x_assign_fu_171_p1;
reg   [63:0] x_assign_reg_236;
wire    ap_CS_fsm_state4;
wire   [63:0] x_assign_1_fu_174_p1;
reg   [63:0] x_assign_1_reg_241;
wire   [63:0] grp_pow_generic_double_s_fu_96_ap_return;
reg   [63:0] tmp_i_reg_246;
wire    ap_CS_fsm_state71;
wire   [63:0] grp_pow_generic_double_s_fu_125_ap_return;
reg   [63:0] tmp_i1_reg_251;
wire   [63:0] grp_fu_177_p2;
reg   [63:0] tmp_s_reg_256;
wire    ap_CS_fsm_state76;
wire   [63:0] grp_fu_181_p2;
reg   [63:0] tmp_39_reg_261;
wire    ap_CS_fsm_state107;
wire    grp_pow_generic_double_s_fu_96_ap_start;
wire    grp_pow_generic_double_s_fu_96_ap_done;
wire    grp_pow_generic_double_s_fu_96_ap_idle;
wire    grp_pow_generic_double_s_fu_96_ap_ready;
wire    grp_pow_generic_double_s_fu_125_ap_start;
wire    grp_pow_generic_double_s_fu_125_ap_done;
wire    grp_pow_generic_double_s_fu_125_ap_idle;
wire    grp_pow_generic_double_s_fu_125_ap_ready;
reg    StgValue_299_real_r_fu_154_ap_start;
wire    StgValue_299_real_r_fu_154_ap_done;
wire    StgValue_299_real_r_fu_154_ap_idle;
wire    StgValue_299_real_r_fu_154_ap_ready;
wire   [31:0] StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_din;
wire    StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_write;
reg    StgValue_300_imag_fu_161_ap_start;
wire    StgValue_300_imag_fu_161_ap_done;
wire    StgValue_300_imag_fu_161_ap_idle;
wire    StgValue_300_imag_fu_161_ap_ready;
wire   [31:0] StgValue_300_imag_fu_161_fft_kernel_modu_M_i_din;
wire    StgValue_300_imag_fu_161_fft_kernel_modu_M_i_write;
reg   [8:0] r_reg_74;
reg   [8:0] c_reg_85;
reg    ap_block_state108;
wire   [0:0] exitcond1_fu_186_p2;
reg    grp_pow_generic_double_s_fu_96_ap_start_reg;
reg   [107:0] ap_NS_fsm;
wire    ap_NS_fsm_state5;
wire    ap_CS_fsm_state5;
reg    grp_pow_generic_double_s_fu_125_ap_start_reg;
wire   [31:0] tmp_40_fu_167_p1;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state77;

// power-on initialization
initial begin
#0 ap_CS_fsm = 108'd1;
#0 grp_pow_generic_double_s_fu_96_ap_start_reg = 1'b0;
#0 grp_pow_generic_double_s_fu_125_ap_start_reg = 1'b0;
end

pow_generic_double_s grp_pow_generic_double_s_fu_96(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pow_generic_double_s_fu_96_ap_start),
    .ap_done(grp_pow_generic_double_s_fu_96_ap_done),
    .ap_idle(grp_pow_generic_double_s_fu_96_ap_idle),
    .ap_ready(grp_pow_generic_double_s_fu_96_ap_ready),
    .base_r(x_assign_reg_236),
    .ap_return(grp_pow_generic_double_s_fu_96_ap_return)
);

pow_generic_double_s grp_pow_generic_double_s_fu_125(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pow_generic_double_s_fu_125_ap_start),
    .ap_done(grp_pow_generic_double_s_fu_125_ap_done),
    .ap_idle(grp_pow_generic_double_s_fu_125_ap_idle),
    .ap_ready(grp_pow_generic_double_s_fu_125_ap_ready),
    .base_r(x_assign_1_reg_241),
    .ap_return(grp_pow_generic_double_s_fu_125_ap_return)
);

real_r StgValue_299_real_r_fu_154(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(StgValue_299_real_r_fu_154_ap_start),
    .ap_done(StgValue_299_real_r_fu_154_ap_done),
    .ap_idle(StgValue_299_real_r_fu_154_ap_idle),
    .ap_ready(StgValue_299_real_r_fu_154_ap_ready),
    .p_val(tmp_40_fu_167_p1),
    .fft_kernel_modu_M_r_din(StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_din),
    .fft_kernel_modu_M_r_full_n(fft_kernel_modu_M_r_full_n),
    .fft_kernel_modu_M_r_write(StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_write),
    .fft_kernel_modu_M_r_blk_n(StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_blk_n)
);

imag StgValue_300_imag_fu_161(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(StgValue_300_imag_fu_161_ap_start),
    .ap_done(StgValue_300_imag_fu_161_ap_done),
    .ap_idle(StgValue_300_imag_fu_161_ap_idle),
    .ap_ready(StgValue_300_imag_fu_161_ap_ready),
    .fft_kernel_modu_M_i_din(StgValue_300_imag_fu_161_fft_kernel_modu_M_i_din),
    .fft_kernel_modu_M_i_full_n(fft_kernel_modu_M_i_full_n),
    .fft_kernel_modu_M_i_write(StgValue_300_imag_fu_161_fft_kernel_modu_M_i_write),
    .fft_kernel_modu_M_i_blk_n(StgValue_300_imag_fu_161_fft_kernel_modu_M_i_blk_n)
);

WienerDeblur_fptreOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
WienerDeblur_fptreOg_U108(
    .din0(tmp_39_reg_261),
    .dout(tmp_40_fu_167_p1)
);

WienerDeblur_fpexKfY #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
WienerDeblur_fpexKfY_U109(
    .din0(fft_kernel_M_real_r_reg_226),
    .dout(x_assign_fu_171_p1)
);

WienerDeblur_fpexKfY #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
WienerDeblur_fpexKfY_U110(
    .din0(fft_kernel_M_imag_r_reg_231),
    .dout(x_assign_1_fu_174_p1)
);

WienerDeblur_daddLf8 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
WienerDeblur_daddLf8_U111(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_reg_246),
    .din1(tmp_i1_reg_251),
    .ce(1'b1),
    .dout(grp_fu_177_p2)
);

WienerDeblur_dsqrMgi #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
WienerDeblur_dsqrMgi_U112(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(tmp_s_reg_256),
    .ce(1'b1),
    .dout(grp_fu_181_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pow_generic_double_s_fu_125_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state5) & (1'b1 == ap_CS_fsm_state4))) begin
            grp_pow_generic_double_s_fu_125_ap_start_reg <= 1'b1;
        end else if ((grp_pow_generic_double_s_fu_125_ap_ready == 1'b1)) begin
            grp_pow_generic_double_s_fu_125_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pow_generic_double_s_fu_96_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state5) & (1'b1 == ap_CS_fsm_state4))) begin
            grp_pow_generic_double_s_fu_96_ap_start_reg <= 1'b1;
        end else if ((grp_pow_generic_double_s_fu_96_ap_ready == 1'b1)) begin
            grp_pow_generic_double_s_fu_96_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_186_p2 == 1'd0))) begin
        c_reg_85 <= 9'd0;
    end else if ((~((1'b0 == StgValue_300_imag_fu_161_fft_kernel_modu_M_i_blk_n) | (1'b0 == StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_blk_n)) & (1'b1 == ap_CS_fsm_state108))) begin
        c_reg_85 <= c_2_reg_221;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((fft_kernel_M_imag_empty_n == 1'b0) & (exitcond_fu_198_p2 == 1'd0)) | ((fft_kernel_M_real_empty_n == 1'b0) & (exitcond_fu_198_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state3) & (exitcond_fu_198_p2 == 1'd1))) begin
        r_reg_74 <= r_2_reg_213;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_reg_74 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((fft_kernel_M_imag_empty_n == 1'b0) & (exitcond_fu_198_p2 == 1'd0)) | ((fft_kernel_M_real_empty_n == 1'b0) & (exitcond_fu_198_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state3))) begin
        c_2_reg_221 <= c_2_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((fft_kernel_M_imag_empty_n == 1'b0) & (exitcond_fu_198_p2 == 1'd0)) | ((fft_kernel_M_real_empty_n == 1'b0) & (exitcond_fu_198_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state3) & (exitcond_fu_198_p2 == 1'd0))) begin
        fft_kernel_M_imag_r_reg_231 <= fft_kernel_M_imag_dout;
        fft_kernel_M_real_r_reg_226 <= fft_kernel_M_real_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_2_reg_213 <= r_2_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        tmp_39_reg_261 <= grp_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        tmp_i1_reg_251 <= grp_pow_generic_double_s_fu_125_ap_return;
        tmp_i_reg_246 <= grp_pow_generic_double_s_fu_96_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        tmp_s_reg_256 <= grp_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_assign_1_reg_241 <= x_assign_1_fu_174_p1;
        x_assign_reg_236 <= x_assign_fu_171_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state108) & (1'b1 == StgValue_300_imag_fu_161_fft_kernel_modu_M_i_blk_n))) begin
        StgValue_299_real_r_fu_154_ap_start = 1'b1;
    end else begin
        StgValue_299_real_r_fu_154_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state108) & (1'b1 == StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_blk_n))) begin
        StgValue_300_imag_fu_161_ap_start = 1'b1;
    end else begin
        StgValue_300_imag_fu_161_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond1_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_198_p2 == 1'd0))) begin
        fft_kernel_M_imag_blk_n = fft_kernel_M_imag_empty_n;
    end else begin
        fft_kernel_M_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((fft_kernel_M_imag_empty_n == 1'b0) & (exitcond_fu_198_p2 == 1'd0)) | ((fft_kernel_M_real_empty_n == 1'b0) & (exitcond_fu_198_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state3) & (exitcond_fu_198_p2 == 1'd0))) begin
        fft_kernel_M_imag_read = 1'b1;
    end else begin
        fft_kernel_M_imag_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_198_p2 == 1'd0))) begin
        fft_kernel_M_real_blk_n = fft_kernel_M_real_empty_n;
    end else begin
        fft_kernel_M_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((fft_kernel_M_imag_empty_n == 1'b0) & (exitcond_fu_198_p2 == 1'd0)) | ((fft_kernel_M_real_empty_n == 1'b0) & (exitcond_fu_198_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state3) & (exitcond_fu_198_p2 == 1'd0))) begin
        fft_kernel_M_real_read = 1'b1;
    end else begin
        fft_kernel_M_real_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        fft_kernel_modu_M_i_blk_n = StgValue_300_imag_fu_161_fft_kernel_modu_M_i_blk_n;
    end else begin
        fft_kernel_modu_M_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        fft_kernel_modu_M_i_write = StgValue_300_imag_fu_161_fft_kernel_modu_M_i_write;
    end else begin
        fft_kernel_modu_M_i_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        fft_kernel_modu_M_r_blk_n = StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_blk_n;
    end else begin
        fft_kernel_modu_M_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        fft_kernel_modu_M_r_write = StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_write;
    end else begin
        fft_kernel_modu_M_r_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~(((fft_kernel_M_imag_empty_n == 1'b0) & (exitcond_fu_198_p2 == 1'd0)) | ((fft_kernel_M_real_empty_n == 1'b0) & (exitcond_fu_198_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state3) & (exitcond_fu_198_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(((fft_kernel_M_imag_empty_n == 1'b0) & (exitcond_fu_198_p2 == 1'd0)) | ((fft_kernel_M_real_empty_n == 1'b0) & (exitcond_fu_198_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state3) & (exitcond_fu_198_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            if ((~((1'b0 == StgValue_300_imag_fu_161_fft_kernel_modu_M_i_blk_n) | (1'b0 == StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_blk_n)) & (1'b1 == ap_CS_fsm_state108))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state108;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_NS_fsm_state5 = ap_NS_fsm[32'd4];

always @ (*) begin
    ap_block_state108 = ((1'b0 == StgValue_300_imag_fu_161_fft_kernel_modu_M_i_blk_n) | (1'b0 == StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_blk_n));
end

always @ (*) begin
    ap_block_state3 = (((fft_kernel_M_imag_empty_n == 1'b0) & (exitcond_fu_198_p2 == 1'd0)) | ((fft_kernel_M_real_empty_n == 1'b0) & (exitcond_fu_198_p2 == 1'd0)));
end

assign c_2_fu_204_p2 = (c_reg_85 + 9'd1);

assign exitcond1_fu_186_p2 = ((r_reg_74 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond_fu_198_p2 = ((c_reg_85 == 9'd256) ? 1'b1 : 1'b0);

assign fft_kernel_modu_M_i_din = StgValue_300_imag_fu_161_fft_kernel_modu_M_i_din;

assign fft_kernel_modu_M_r_din = StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_din;

assign grp_pow_generic_double_s_fu_125_ap_start = grp_pow_generic_double_s_fu_125_ap_start_reg;

assign grp_pow_generic_double_s_fu_96_ap_start = grp_pow_generic_double_s_fu_96_ap_start_reg;

assign r_2_fu_192_p2 = (r_reg_74 + 9'd1);

endmodule //matrix_modulus
