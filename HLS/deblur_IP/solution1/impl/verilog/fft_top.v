// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fft_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        direction,
        direction_ap_vld,
        direction_ap_ack,
        in_r_dout,
        in_r_empty_n,
        in_r_read,
        out_r_din,
        out_r_full_n,
        out_r_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   direction;
input   direction_ap_vld;
output   direction_ap_ack;
input  [63:0] in_r_dout;
input   in_r_empty_n;
output   in_r_read;
output  [63:0] out_r_din;
input   out_r_full_n;
output   out_r_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg direction_ap_ack;
reg in_r_read;
reg out_r_write;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    direction_blk_n;
reg   [0:0] direction_read_reg_106;
reg    ap_block_state1;
reg   [7:0] fft_status1_data_V_r_reg_123;
wire    ap_CS_fsm_state5;
wire   [7:0] fft_status1_data_V_dout;
wire    fft_status1_data_V_empty_n;
wire    grp_dummy_proc_middle_1394_fu_75_ap_start;
wire    grp_dummy_proc_middle_1394_fu_75_ap_done;
wire    grp_dummy_proc_middle_1394_fu_75_ap_idle;
wire    grp_dummy_proc_middle_1394_fu_75_ap_ready;
wire   [63:0] grp_dummy_proc_middle_1394_fu_75_out_r_din;
wire    grp_dummy_proc_middle_1394_fu_75_out_r_write;
wire    grp_dummy_proc_middle_1394_fu_75_xk1_read;
wire    grp_dummy_proc_fe_1395_fu_85_ap_start;
wire    grp_dummy_proc_fe_1395_fu_85_ap_done;
wire    grp_dummy_proc_fe_1395_fu_85_ap_idle;
wire    grp_dummy_proc_fe_1395_fu_85_ap_ready;
wire    grp_dummy_proc_fe_1395_fu_85_in_r_read;
wire   [63:0] grp_dummy_proc_fe_1395_fu_85_xn1_din;
wire    grp_dummy_proc_fe_1395_fu_85_xn1_write;
wire   [15:0] grp_dummy_proc_fe_1395_fu_85_ap_return;
wire    grp_fft_config1_s_fu_96_ap_start;
reg    grp_fft_config1_s_fu_96_ap_ce;
wire    grp_fft_config1_s_fu_96_ap_done;
wire    grp_fft_config1_s_fu_96_ap_idle;
wire    grp_fft_config1_s_fu_96_ap_ready;
wire    grp_fft_config1_s_fu_96_xn_read;
wire   [63:0] grp_fft_config1_s_fu_96_xk_din;
wire    grp_fft_config1_s_fu_96_xk_write;
wire   [7:0] grp_fft_config1_s_fu_96_status_data_V_din;
wire    grp_fft_config1_s_fu_96_status_data_V_write;
wire    grp_fft_config1_s_fu_96_config_ch_data_V_read;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    grp_dummy_proc_middle_1394_fu_75_ap_start_reg;
wire    ap_CS_fsm_state6;
wire   [63:0] xk1_dout;
wire    xk1_empty_n;
reg    xk1_read;
reg    grp_dummy_proc_fe_1395_fu_85_ap_start_reg;
reg    ap_block_state1_ignore_call10;
wire    ap_CS_fsm_state2;
wire    xn1_full_n;
reg    xn1_write;
reg    grp_fft_config1_s_fu_96_ap_start_reg;
wire   [63:0] xn1_dout;
wire    xn1_empty_n;
reg    xn1_read;
wire    xk1_full_n;
reg    xk1_write;
wire    fft_config1_data_V_full_n;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_dummy_proc_middle_1394_fu_75_ap_start_reg = 1'b0;
#0 grp_dummy_proc_fe_1395_fu_85_ap_start_reg = 1'b0;
#0 grp_fft_config1_s_fu_96_ap_start_reg = 1'b0;
end

dummy_proc_middle_1394 grp_dummy_proc_middle_1394_fu_75(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dummy_proc_middle_1394_fu_75_ap_start),
    .ap_done(grp_dummy_proc_middle_1394_fu_75_ap_done),
    .ap_idle(grp_dummy_proc_middle_1394_fu_75_ap_idle),
    .ap_ready(grp_dummy_proc_middle_1394_fu_75_ap_ready),
    .st_in_data_V_read(fft_status1_data_V_r_reg_123),
    .out_r_din(grp_dummy_proc_middle_1394_fu_75_out_r_din),
    .out_r_full_n(out_r_full_n),
    .out_r_write(grp_dummy_proc_middle_1394_fu_75_out_r_write),
    .xk1_dout(xk1_dout),
    .xk1_empty_n(xk1_empty_n),
    .xk1_read(grp_dummy_proc_middle_1394_fu_75_xk1_read)
);

dummy_proc_fe_1395 grp_dummy_proc_fe_1395_fu_85(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dummy_proc_fe_1395_fu_85_ap_start),
    .ap_done(grp_dummy_proc_fe_1395_fu_85_ap_done),
    .ap_idle(grp_dummy_proc_fe_1395_fu_85_ap_idle),
    .ap_ready(grp_dummy_proc_fe_1395_fu_85_ap_ready),
    .direction(direction_read_reg_106),
    .in_r_dout(in_r_dout),
    .in_r_empty_n(in_r_empty_n),
    .in_r_read(grp_dummy_proc_fe_1395_fu_85_in_r_read),
    .xn1_din(grp_dummy_proc_fe_1395_fu_85_xn1_din),
    .xn1_full_n(xn1_full_n),
    .xn1_write(grp_dummy_proc_fe_1395_fu_85_xn1_write),
    .ap_return(grp_dummy_proc_fe_1395_fu_85_ap_return)
);

fft_config1_s grp_fft_config1_s_fu_96(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_fft_config1_s_fu_96_ap_start),
    .ap_ce(grp_fft_config1_s_fu_96_ap_ce),
    .ap_done(grp_fft_config1_s_fu_96_ap_done),
    .ap_idle(grp_fft_config1_s_fu_96_ap_idle),
    .ap_ready(grp_fft_config1_s_fu_96_ap_ready),
    .xn_dout(xn1_dout),
    .xn_empty_n(xn1_empty_n),
    .xn_read(grp_fft_config1_s_fu_96_xn_read),
    .xk_din(grp_fft_config1_s_fu_96_xk_din),
    .xk_full_n(xk1_full_n),
    .xk_write(grp_fft_config1_s_fu_96_xk_write),
    .status_data_V_din(grp_fft_config1_s_fu_96_status_data_V_din),
    .status_data_V_full_n(1'b1),
    .status_data_V_write(grp_fft_config1_s_fu_96_status_data_V_write),
    .config_ch_data_V_dout(16'd0),
    .config_ch_data_V_empty_n(1'b1),
    .config_ch_data_V_read(grp_fft_config1_s_fu_96_config_ch_data_V_read)
);

fifo_w64_d256_A xk1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_fft_config1_s_fu_96_xk_din),
    .if_full_n(xk1_full_n),
    .if_write(xk1_write),
    .if_dout(xk1_dout),
    .if_empty_n(xk1_empty_n),
    .if_read(xk1_read)
);

fifo_w64_d256_A xn1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_dummy_proc_fe_1395_fu_85_xn1_din),
    .if_full_n(xn1_full_n),
    .if_write(xn1_write),
    .if_dout(xn1_dout),
    .if_empty_n(xn1_empty_n),
    .if_read(xn1_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dummy_proc_fe_1395_fu_85_ap_start_reg <= 1'b0;
    end else begin
        if ((~((direction_ap_vld == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_dummy_proc_fe_1395_fu_85_ap_start_reg <= 1'b1;
        end else if ((grp_dummy_proc_fe_1395_fu_85_ap_ready == 1'b1)) begin
            grp_dummy_proc_fe_1395_fu_85_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dummy_proc_middle_1394_fu_75_ap_start_reg <= 1'b0;
    end else begin
        if (((fft_status1_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            grp_dummy_proc_middle_1394_fu_75_ap_start_reg <= 1'b1;
        end else if ((grp_dummy_proc_middle_1394_fu_75_ap_ready == 1'b1)) begin
            grp_dummy_proc_middle_1394_fu_75_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_fft_config1_s_fu_96_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_fft_config1_s_fu_96_ap_start_reg <= 1'b1;
        end else if ((grp_fft_config1_s_fu_96_ap_ready == 1'b1)) begin
            grp_fft_config1_s_fu_96_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((direction_ap_vld == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        direction_read_reg_106 <= direction;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((grp_dummy_proc_middle_1394_fu_75_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_dummy_proc_middle_1394_fu_75_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((direction_ap_vld == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        direction_ap_ack = 1'b1;
    end else begin
        direction_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        direction_blk_n = direction_ap_vld;
    end else begin
        direction_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        grp_fft_config1_s_fu_96_ap_ce = 1'b1;
    end else begin
        grp_fft_config1_s_fu_96_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_r_read = grp_dummy_proc_fe_1395_fu_85_in_r_read;
    end else begin
        in_r_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_r_write = grp_dummy_proc_middle_1394_fu_75_out_r_write;
    end else begin
        out_r_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        xk1_read = grp_dummy_proc_middle_1394_fu_75_xk1_read;
    end else begin
        xk1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        xk1_write = grp_fft_config1_s_fu_96_xk_write;
    end else begin
        xk1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        xn1_read = grp_fft_config1_s_fu_96_xn_read;
    end else begin
        xn1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        xn1_write = grp_dummy_proc_fe_1395_fu_85_xn1_write;
    end else begin
        xn1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((direction_ap_vld == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((grp_dummy_proc_fe_1395_fu_85_ap_done == 1'b0) | (fft_config1_data_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_fft_config1_s_fu_96_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((fft_status1_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((grp_dummy_proc_middle_1394_fu_75_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((direction_ap_vld == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call10 = ((direction_ap_vld == 1'b0) | (ap_start == 1'b0));
end

assign fft_config1_data_V_full_n = 1'b1;

assign fft_status1_data_V_dout = 8'd0;

assign fft_status1_data_V_empty_n = 1'b1;

assign grp_dummy_proc_fe_1395_fu_85_ap_start = grp_dummy_proc_fe_1395_fu_85_ap_start_reg;

assign grp_dummy_proc_middle_1394_fu_75_ap_start = grp_dummy_proc_middle_1394_fu_75_ap_start_reg;

assign grp_fft_config1_s_fu_96_ap_start = grp_fft_config1_s_fu_96_ap_start_reg;

assign out_r_din = grp_dummy_proc_middle_1394_fu_75_out_r_din;

always @ (posedge ap_clk) begin
    fft_status1_data_V_r_reg_123[7:0] <= 8'b00000000;
end

endmodule //fft_top
