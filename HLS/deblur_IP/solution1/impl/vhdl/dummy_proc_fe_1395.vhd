-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dummy_proc_fe_1395 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    direction : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    in_r_empty_n : IN STD_LOGIC;
    in_r_read : OUT STD_LOGIC;
    xn1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    xn1_full_n : IN STD_LOGIC;
    xn1_write : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dummy_proc_fe_1395 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_AB : STD_LOGIC_VECTOR (7 downto 0) := "10101011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_r_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_93_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xn1_blk_n : STD_LOGIC;
    signal p_Result_s_fu_81_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_reg_105 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_2_fu_99_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal i_reg_62 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_73_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((exitcond_fu_93_p2 = ap_const_lv1_0) and (xn1_full_n = ap_const_logic_0)) or ((exitcond_fu_93_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (exitcond_fu_93_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_62 <= i_2_fu_99_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_62 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_Result_s_reg_105 <= p_Result_s_fu_81_p5;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, in_r_empty_n, xn1_full_n, ap_CS_fsm_state2, exitcond_fu_93_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((((exitcond_fu_93_p2 = ap_const_lv1_0) and (xn1_full_n = ap_const_logic_0)) or ((exitcond_fu_93_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (exitcond_fu_93_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not((((exitcond_fu_93_p2 = ap_const_lv1_0) and (xn1_full_n = ap_const_logic_0)) or ((exitcond_fu_93_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (exitcond_fu_93_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state2_assign_proc : process(in_r_empty_n, xn1_full_n, exitcond_fu_93_p2)
    begin
                ap_block_state2 <= (((exitcond_fu_93_p2 = ap_const_lv1_0) and (xn1_full_n = ap_const_logic_0)) or ((exitcond_fu_93_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, in_r_empty_n, xn1_full_n, ap_CS_fsm_state2, exitcond_fu_93_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not((((exitcond_fu_93_p2 = ap_const_lv1_0) and (xn1_full_n = ap_const_logic_0)) or ((exitcond_fu_93_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (exitcond_fu_93_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(in_r_empty_n, xn1_full_n, ap_CS_fsm_state2, exitcond_fu_93_p2)
    begin
        if ((not((((exitcond_fu_93_p2 = ap_const_lv1_0) and (xn1_full_n = ap_const_logic_0)) or ((exitcond_fu_93_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (exitcond_fu_93_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_s_reg_105;
    exitcond_fu_93_p2 <= "1" when (i_reg_62 = ap_const_lv9_100) else "0";
    i_2_fu_99_p2 <= std_logic_vector(unsigned(i_reg_62) + unsigned(ap_const_lv9_1));

    in_r_blk_n_assign_proc : process(in_r_empty_n, ap_CS_fsm_state2, exitcond_fu_93_p2)
    begin
        if (((exitcond_fu_93_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_r_blk_n <= in_r_empty_n;
        else 
            in_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_read_assign_proc : process(in_r_empty_n, xn1_full_n, ap_CS_fsm_state2, exitcond_fu_93_p2)
    begin
        if ((not((((exitcond_fu_93_p2 = ap_const_lv1_0) and (xn1_full_n = ap_const_logic_0)) or ((exitcond_fu_93_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (exitcond_fu_93_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_r_read <= ap_const_logic_1;
        else 
            in_r_read <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_81_p5 <= (ap_const_lv16_0(15 downto 9) & tmp_s_fu_73_p3);
    tmp_s_fu_73_p3 <= (ap_const_lv8_AB & direction);

    xn1_blk_n_assign_proc : process(xn1_full_n, ap_CS_fsm_state2, exitcond_fu_93_p2)
    begin
        if (((exitcond_fu_93_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            xn1_blk_n <= xn1_full_n;
        else 
            xn1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    xn1_din <= in_r_dout;

    xn1_write_assign_proc : process(in_r_empty_n, xn1_full_n, ap_CS_fsm_state2, exitcond_fu_93_p2)
    begin
        if ((not((((exitcond_fu_93_p2 = ap_const_lv1_0) and (xn1_full_n = ap_const_logic_0)) or ((exitcond_fu_93_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (exitcond_fu_93_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            xn1_write <= ap_const_logic_1;
        else 
            xn1_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
