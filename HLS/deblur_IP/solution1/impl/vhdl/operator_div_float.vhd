-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity operator_div_float is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_x_M_real_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_x_M_real_empty_n : IN STD_LOGIC;
    p_x_M_real_read : OUT STD_LOGIC;
    p_x_M_imag_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_x_M_imag_empty_n : IN STD_LOGIC;
    p_x_M_imag_read : OUT STD_LOGIC;
    p_y_M_real_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_y_M_real_empty_n : IN STD_LOGIC;
    p_y_M_real_read : OUT STD_LOGIC;
    p_y_M_imag_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_y_M_imag_empty_n : IN STD_LOGIC;
    p_y_M_imag_read : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of operator_div_float is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_x_M_real_blk_n : STD_LOGIC;
    signal p_x_M_imag_blk_n : STD_LOGIC;
    signal p_r_M_real_reg_44 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_r_M_imag_reg_49 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_div_assign_float_fu_34_ap_start : STD_LOGIC;
    signal grp_operator_div_assign_float_fu_34_ap_done : STD_LOGIC;
    signal grp_operator_div_assign_float_fu_34_ap_idle : STD_LOGIC;
    signal grp_operator_div_assign_float_fu_34_ap_ready : STD_LOGIC;
    signal grp_operator_div_assign_float_fu_34_p_z_M_real_read : STD_LOGIC;
    signal grp_operator_div_assign_float_fu_34_p_z_M_imag_read : STD_LOGIC;
    signal grp_operator_div_assign_float_fu_34_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_div_assign_float_fu_34_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_div_assign_float_fu_34_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component operator_div_assign_float IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        complex_float_M_real_read : IN STD_LOGIC_VECTOR (31 downto 0);
        complex_float_M_imag_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_z_M_real_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_z_M_real_empty_n : IN STD_LOGIC;
        p_z_M_real_read : OUT STD_LOGIC;
        p_z_M_imag_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_z_M_imag_empty_n : IN STD_LOGIC;
        p_z_M_imag_read : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_operator_div_assign_float_fu_34 : component operator_div_assign_float
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_operator_div_assign_float_fu_34_ap_start,
        ap_done => grp_operator_div_assign_float_fu_34_ap_done,
        ap_idle => grp_operator_div_assign_float_fu_34_ap_idle,
        ap_ready => grp_operator_div_assign_float_fu_34_ap_ready,
        complex_float_M_real_read => p_r_M_real_reg_44,
        complex_float_M_imag_read => p_r_M_imag_reg_49,
        p_z_M_real_dout => p_y_M_real_dout,
        p_z_M_real_empty_n => p_y_M_real_empty_n,
        p_z_M_real_read => grp_operator_div_assign_float_fu_34_p_z_M_real_read,
        p_z_M_imag_dout => p_y_M_imag_dout,
        p_z_M_imag_empty_n => p_y_M_imag_empty_n,
        p_z_M_imag_read => grp_operator_div_assign_float_fu_34_p_z_M_imag_read,
        ap_return_0 => grp_operator_div_assign_float_fu_34_ap_return_0,
        ap_return_1 => grp_operator_div_assign_float_fu_34_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if (((grp_operator_div_assign_float_fu_34_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_0_preg <= grp_operator_div_assign_float_fu_34_ap_return_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if (((grp_operator_div_assign_float_fu_34_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_1_preg <= grp_operator_div_assign_float_fu_34_ap_return_1;
                end if; 
            end if;
        end if;
    end process;


    grp_operator_div_assign_float_fu_34_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_operator_div_assign_float_fu_34_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_operator_div_assign_float_fu_34_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_operator_div_assign_float_fu_34_ap_ready = ap_const_logic_1)) then 
                    grp_operator_div_assign_float_fu_34_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (p_x_M_imag_empty_n = ap_const_logic_0) or (p_x_M_real_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_r_M_imag_reg_49 <= p_x_M_imag_dout;
                p_r_M_real_reg_44 <= p_x_M_real_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, p_x_M_real_empty_n, p_x_M_imag_empty_n, grp_operator_div_assign_float_fu_34_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (p_x_M_imag_empty_n = ap_const_logic_0) or (p_x_M_real_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_operator_div_assign_float_fu_34_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(ap_start, p_x_M_real_empty_n, p_x_M_imag_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (p_x_M_imag_empty_n = ap_const_logic_0) or (p_x_M_real_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_operator_div_assign_float_fu_34_ap_done, ap_CS_fsm_state3)
    begin
        if ((((grp_operator_div_assign_float_fu_34_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_operator_div_assign_float_fu_34_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_operator_div_assign_float_fu_34_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(grp_operator_div_assign_float_fu_34_ap_done, grp_operator_div_assign_float_fu_34_ap_return_0, ap_CS_fsm_state3, ap_return_0_preg)
    begin
        if (((grp_operator_div_assign_float_fu_34_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_return_0 <= grp_operator_div_assign_float_fu_34_ap_return_0;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(grp_operator_div_assign_float_fu_34_ap_done, grp_operator_div_assign_float_fu_34_ap_return_1, ap_CS_fsm_state3, ap_return_1_preg)
    begin
        if (((grp_operator_div_assign_float_fu_34_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_return_1 <= grp_operator_div_assign_float_fu_34_ap_return_1;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    grp_operator_div_assign_float_fu_34_ap_start <= grp_operator_div_assign_float_fu_34_ap_start_reg;

    p_x_M_imag_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, p_x_M_imag_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_x_M_imag_blk_n <= p_x_M_imag_empty_n;
        else 
            p_x_M_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_x_M_imag_read_assign_proc : process(ap_start, ap_CS_fsm_state1, p_x_M_real_empty_n, p_x_M_imag_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_x_M_imag_empty_n = ap_const_logic_0) or (p_x_M_real_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_x_M_imag_read <= ap_const_logic_1;
        else 
            p_x_M_imag_read <= ap_const_logic_0;
        end if; 
    end process;


    p_x_M_real_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, p_x_M_real_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_x_M_real_blk_n <= p_x_M_real_empty_n;
        else 
            p_x_M_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_x_M_real_read_assign_proc : process(ap_start, ap_CS_fsm_state1, p_x_M_real_empty_n, p_x_M_imag_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_x_M_imag_empty_n = ap_const_logic_0) or (p_x_M_real_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_x_M_real_read <= ap_const_logic_1;
        else 
            p_x_M_real_read <= ap_const_logic_0;
        end if; 
    end process;


    p_y_M_imag_read_assign_proc : process(grp_operator_div_assign_float_fu_34_p_z_M_imag_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_y_M_imag_read <= grp_operator_div_assign_float_fu_34_p_z_M_imag_read;
        else 
            p_y_M_imag_read <= ap_const_logic_0;
        end if; 
    end process;


    p_y_M_real_read_assign_proc : process(grp_operator_div_assign_float_fu_34_p_z_M_real_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_y_M_real_read <= grp_operator_div_assign_float_fu_34_p_z_M_real_read;
        else 
            p_y_M_real_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
