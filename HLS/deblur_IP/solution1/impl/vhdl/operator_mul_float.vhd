-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity operator_mul_float is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    gauss_blur_M_real_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_blur_M_real_empty_n : IN STD_LOGIC;
    gauss_blur_M_real_read : OUT STD_LOGIC;
    gauss_blur_M_imag_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_blur_M_imag_empty_n : IN STD_LOGIC;
    gauss_blur_M_imag_read : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    G_M_real_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    G_M_real_empty_n : IN STD_LOGIC;
    G_M_real_read : OUT STD_LOGIC;
    G_M_imag_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    G_M_imag_empty_n : IN STD_LOGIC;
    G_M_imag_read : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    gauss_blur_M_real_blk_n : OUT STD_LOGIC;
    gauss_blur_M_imag_blk_n : OUT STD_LOGIC;
    G_M_real_blk_n : OUT STD_LOGIC;
    G_M_imag_blk_n : OUT STD_LOGIC );
end;


architecture behav of operator_mul_float is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal grp_operator_mul_assign_float_fu_34_p_z_M_real_blk_n : STD_LOGIC;
    signal grp_operator_mul_assign_float_fu_34_p_z_M_imag_blk_n : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal grp_operator_mul_assign_float_fu_34_ap_start : STD_LOGIC;
    signal grp_operator_mul_assign_float_fu_34_ap_done : STD_LOGIC;
    signal grp_operator_mul_assign_float_fu_34_ap_idle : STD_LOGIC;
    signal grp_operator_mul_assign_float_fu_34_ap_ready : STD_LOGIC;
    signal grp_operator_mul_assign_float_fu_34_p_z_M_real_read : STD_LOGIC;
    signal grp_operator_mul_assign_float_fu_34_p_z_M_imag_read : STD_LOGIC;
    signal grp_operator_mul_assign_float_fu_34_ap_ce : STD_LOGIC;
    signal grp_operator_mul_assign_float_fu_34_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_assign_float_fu_34_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0_ignore_call4 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call4 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call4 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call4 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call4 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call4 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp13 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to8 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component operator_mul_assign_float IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_z_M_real_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_z_M_real_empty_n : IN STD_LOGIC;
        p_z_M_real_read : OUT STD_LOGIC;
        p_z_M_imag_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_z_M_imag_empty_n : IN STD_LOGIC;
        p_z_M_imag_read : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        complex_float_M_real_read : IN STD_LOGIC_VECTOR (31 downto 0);
        complex_float_M_imag_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_z_M_real_blk_n : OUT STD_LOGIC;
        p_z_M_imag_blk_n : OUT STD_LOGIC );
    end component;



begin
    grp_operator_mul_assign_float_fu_34 : component operator_mul_assign_float
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_operator_mul_assign_float_fu_34_ap_start,
        ap_done => grp_operator_mul_assign_float_fu_34_ap_done,
        ap_idle => grp_operator_mul_assign_float_fu_34_ap_idle,
        ap_ready => grp_operator_mul_assign_float_fu_34_ap_ready,
        p_z_M_real_dout => G_M_real_dout,
        p_z_M_real_empty_n => G_M_real_empty_n,
        p_z_M_real_read => grp_operator_mul_assign_float_fu_34_p_z_M_real_read,
        p_z_M_imag_dout => G_M_imag_dout,
        p_z_M_imag_empty_n => G_M_imag_empty_n,
        p_z_M_imag_read => grp_operator_mul_assign_float_fu_34_p_z_M_imag_read,
        ap_ce => grp_operator_mul_assign_float_fu_34_ap_ce,
        complex_float_M_real_read => gauss_blur_M_real_dout,
        complex_float_M_imag_read => gauss_blur_M_imag_dout,
        ap_return_0 => grp_operator_mul_assign_float_fu_34_ap_return_0,
        ap_return_1 => grp_operator_mul_assign_float_fu_34_ap_return_1,
        p_z_M_real_blk_n => grp_operator_mul_assign_float_fu_34_p_z_M_real_blk_n,
        p_z_M_imag_blk_n => grp_operator_mul_assign_float_fu_34_p_z_M_imag_blk_n);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    G_M_imag_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, grp_operator_mul_assign_float_fu_34_p_z_M_imag_blk_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            G_M_imag_blk_n <= grp_operator_mul_assign_float_fu_34_p_z_M_imag_blk_n;
        else 
            G_M_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    G_M_imag_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, grp_operator_mul_assign_float_fu_34_p_z_M_imag_read)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            G_M_imag_read <= grp_operator_mul_assign_float_fu_34_p_z_M_imag_read;
        else 
            G_M_imag_read <= ap_const_logic_0;
        end if; 
    end process;


    G_M_real_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, grp_operator_mul_assign_float_fu_34_p_z_M_real_blk_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            G_M_real_blk_n <= grp_operator_mul_assign_float_fu_34_p_z_M_real_blk_n;
        else 
            G_M_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    G_M_real_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, grp_operator_mul_assign_float_fu_34_p_z_M_real_read)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            G_M_real_read <= grp_operator_mul_assign_float_fu_34_p_z_M_real_read;
        else 
            G_M_real_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, gauss_blur_M_real_empty_n, gauss_blur_M_imag_empty_n, grp_operator_mul_assign_float_fu_34_p_z_M_real_blk_n, grp_operator_mul_assign_float_fu_34_p_z_M_imag_blk_n)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((grp_operator_mul_assign_float_fu_34_p_z_M_imag_blk_n = ap_const_logic_0) or (grp_operator_mul_assign_float_fu_34_p_z_M_real_blk_n = ap_const_logic_0) or (gauss_blur_M_imag_empty_n = ap_const_logic_0) or (gauss_blur_M_real_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp13_assign_proc : process(ap_start, gauss_blur_M_real_empty_n, gauss_blur_M_imag_empty_n)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp13 <= ((ap_start = ap_const_logic_1) and ((gauss_blur_M_imag_empty_n = ap_const_logic_0) or (gauss_blur_M_real_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, gauss_blur_M_real_empty_n, gauss_blur_M_imag_empty_n, grp_operator_mul_assign_float_fu_34_p_z_M_real_blk_n, grp_operator_mul_assign_float_fu_34_p_z_M_imag_blk_n, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_1) and ((grp_operator_mul_assign_float_fu_34_p_z_M_imag_blk_n = ap_const_logic_0) or (grp_operator_mul_assign_float_fu_34_p_z_M_real_blk_n = ap_const_logic_0) or (gauss_blur_M_imag_empty_n = ap_const_logic_0) or (gauss_blur_M_real_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, gauss_blur_M_real_empty_n, gauss_blur_M_imag_empty_n, grp_operator_mul_assign_float_fu_34_p_z_M_real_blk_n, grp_operator_mul_assign_float_fu_34_p_z_M_imag_blk_n)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((grp_operator_mul_assign_float_fu_34_p_z_M_imag_blk_n = ap_const_logic_0) or (grp_operator_mul_assign_float_fu_34_p_z_M_real_blk_n = ap_const_logic_0) or (gauss_blur_M_imag_empty_n = ap_const_logic_0) or (gauss_blur_M_real_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call4_assign_proc : process(ap_start, gauss_blur_M_real_empty_n, gauss_blur_M_imag_empty_n)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call4 <= ((gauss_blur_M_imag_empty_n = ap_const_logic_0) or (gauss_blur_M_real_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to8_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to8 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to8)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to8 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= grp_operator_mul_assign_float_fu_34_ap_return_0;
    ap_return_1 <= grp_operator_mul_assign_float_fu_34_ap_return_1;

    gauss_blur_M_imag_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, gauss_blur_M_imag_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gauss_blur_M_imag_blk_n <= gauss_blur_M_imag_empty_n;
        else 
            gauss_blur_M_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gauss_blur_M_imag_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gauss_blur_M_imag_read <= ap_const_logic_1;
        else 
            gauss_blur_M_imag_read <= ap_const_logic_0;
        end if; 
    end process;


    gauss_blur_M_real_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, gauss_blur_M_real_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gauss_blur_M_real_blk_n <= gauss_blur_M_real_empty_n;
        else 
            gauss_blur_M_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gauss_blur_M_real_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gauss_blur_M_real_read <= ap_const_logic_1;
        else 
            gauss_blur_M_real_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_operator_mul_assign_float_fu_34_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001_ignoreCallOp13)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp13))) then 
            grp_operator_mul_assign_float_fu_34_ap_ce <= ap_const_logic_1;
        else 
            grp_operator_mul_assign_float_fu_34_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_operator_mul_assign_float_fu_34_ap_start_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_operator_mul_assign_float_fu_34_ap_start <= ap_const_logic_1;
        else 
            grp_operator_mul_assign_float_fu_34_ap_start <= ap_const_logic_0;
        end if; 
    end process;

end behav;
