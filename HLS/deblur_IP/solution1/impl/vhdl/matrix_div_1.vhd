-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_div_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fft_kernel_modu2_M_s_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    fft_kernel_modu2_M_s_empty_n : IN STD_LOGIC;
    fft_kernel_modu2_M_s_read : OUT STD_LOGIC;
    fft_kernel_modu2_M_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    fft_kernel_modu2_M_1_empty_n : IN STD_LOGIC;
    fft_kernel_modu2_M_1_read : OUT STD_LOGIC;
    G1_M_real_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    G1_M_real_empty_n : IN STD_LOGIC;
    G1_M_real_read : OUT STD_LOGIC;
    G1_M_real_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    G1_M_real_full_n : IN STD_LOGIC;
    G1_M_real_write : OUT STD_LOGIC;
    G1_M_imag_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    G1_M_imag_empty_n : IN STD_LOGIC;
    G1_M_imag_read : OUT STD_LOGIC;
    G1_M_imag_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    G1_M_imag_full_n : IN STD_LOGIC;
    G1_M_imag_write : OUT STD_LOGIC );
end;


architecture behav of matrix_div_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal G1_M_real_o_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal G1_M_imag_o_blk_n : STD_LOGIC;
    signal r_3_fu_86_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_3_reg_115 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal c_3_fu_98_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_3_reg_123 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_0_reg_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_operator_div_float_fu_68_ap_ready : STD_LOGIC;
    signal grp_operator_div_float_fu_68_ap_done : STD_LOGIC;
    signal p_1_reg_133 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_div_float_fu_68_ap_start : STD_LOGIC;
    signal grp_operator_div_float_fu_68_ap_idle : STD_LOGIC;
    signal grp_operator_div_float_fu_68_p_x_M_real_read : STD_LOGIC;
    signal grp_operator_div_float_fu_68_p_x_M_imag_read : STD_LOGIC;
    signal grp_operator_div_float_fu_68_p_y_M_real_read : STD_LOGIC;
    signal grp_operator_div_float_fu_68_p_y_M_imag_read : STD_LOGIC;
    signal grp_operator_div_float_fu_68_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_div_float_fu_68_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_reg_46 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_92_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_reg_57 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal exitcond1_fu_80_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_operator_div_float_fu_68_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component operator_div_float IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_x_M_real_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_x_M_real_empty_n : IN STD_LOGIC;
        p_x_M_real_read : OUT STD_LOGIC;
        p_x_M_imag_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_x_M_imag_empty_n : IN STD_LOGIC;
        p_x_M_imag_read : OUT STD_LOGIC;
        p_y_M_real_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_y_M_real_empty_n : IN STD_LOGIC;
        p_y_M_real_read : OUT STD_LOGIC;
        p_y_M_imag_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_y_M_imag_empty_n : IN STD_LOGIC;
        p_y_M_imag_read : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_operator_div_float_fu_68 : component operator_div_float
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_operator_div_float_fu_68_ap_start,
        ap_done => grp_operator_div_float_fu_68_ap_done,
        ap_idle => grp_operator_div_float_fu_68_ap_idle,
        ap_ready => grp_operator_div_float_fu_68_ap_ready,
        p_x_M_real_dout => fft_kernel_modu2_M_s_dout,
        p_x_M_real_empty_n => fft_kernel_modu2_M_s_empty_n,
        p_x_M_real_read => grp_operator_div_float_fu_68_p_x_M_real_read,
        p_x_M_imag_dout => fft_kernel_modu2_M_1_dout,
        p_x_M_imag_empty_n => fft_kernel_modu2_M_1_empty_n,
        p_x_M_imag_read => grp_operator_div_float_fu_68_p_x_M_imag_read,
        p_y_M_real_dout => G1_M_real_dout,
        p_y_M_real_empty_n => G1_M_real_empty_n,
        p_y_M_real_read => grp_operator_div_float_fu_68_p_y_M_real_read,
        p_y_M_imag_dout => G1_M_imag_dout,
        p_y_M_imag_empty_n => G1_M_imag_empty_n,
        p_y_M_imag_read => grp_operator_div_float_fu_68_p_y_M_imag_read,
        ap_return_0 => grp_operator_div_float_fu_68_ap_return_0,
        ap_return_1 => grp_operator_div_float_fu_68_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_operator_div_float_fu_68_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_operator_div_float_fu_68_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_92_p2 = ap_const_lv1_0))) then 
                    grp_operator_div_float_fu_68_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_operator_div_float_fu_68_ap_ready = ap_const_logic_1)) then 
                    grp_operator_div_float_fu_68_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_reg_57_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_80_p2 = ap_const_lv1_0))) then 
                c_reg_57 <= ap_const_lv9_0;
            elsif ((not(((ap_const_logic_0 = G1_M_imag_full_n) or (ap_const_logic_0 = G1_M_real_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                c_reg_57 <= c_3_reg_123;
            end if; 
        end if;
    end process;

    r_reg_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_92_p2 = ap_const_lv1_1))) then 
                r_reg_46 <= r_3_reg_115;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_reg_46 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_3_reg_123 <= c_3_fu_98_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_operator_div_float_fu_68_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                p_0_reg_128 <= grp_operator_div_float_fu_68_ap_return_0;
                p_1_reg_133 <= grp_operator_div_float_fu_68_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_3_reg_115 <= r_3_fu_86_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, G1_M_real_full_n, G1_M_imag_full_n, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, grp_operator_div_float_fu_68_ap_done, exitcond_fu_92_p2, exitcond1_fu_80_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_80_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_92_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_operator_div_float_fu_68_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((ap_const_logic_0 = G1_M_imag_full_n) or (ap_const_logic_0 = G1_M_real_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    G1_M_imag_din <= p_1_reg_133;

    G1_M_imag_o_blk_n_assign_proc : process(G1_M_imag_full_n, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            G1_M_imag_o_blk_n <= G1_M_imag_full_n;
        else 
            G1_M_imag_o_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    G1_M_imag_read_assign_proc : process(ap_CS_fsm_state4, grp_operator_div_float_fu_68_p_y_M_imag_read)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            G1_M_imag_read <= grp_operator_div_float_fu_68_p_y_M_imag_read;
        else 
            G1_M_imag_read <= ap_const_logic_0;
        end if; 
    end process;


    G1_M_imag_write_assign_proc : process(G1_M_real_full_n, G1_M_imag_full_n, ap_CS_fsm_state5)
    begin
        if ((not(((ap_const_logic_0 = G1_M_imag_full_n) or (ap_const_logic_0 = G1_M_real_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            G1_M_imag_write <= ap_const_logic_1;
        else 
            G1_M_imag_write <= ap_const_logic_0;
        end if; 
    end process;

    G1_M_real_din <= p_0_reg_128;

    G1_M_real_o_blk_n_assign_proc : process(G1_M_real_full_n, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            G1_M_real_o_blk_n <= G1_M_real_full_n;
        else 
            G1_M_real_o_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    G1_M_real_read_assign_proc : process(ap_CS_fsm_state4, grp_operator_div_float_fu_68_p_y_M_real_read)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            G1_M_real_read <= grp_operator_div_float_fu_68_p_y_M_real_read;
        else 
            G1_M_real_read <= ap_const_logic_0;
        end if; 
    end process;


    G1_M_real_write_assign_proc : process(G1_M_real_full_n, G1_M_imag_full_n, ap_CS_fsm_state5)
    begin
        if ((not(((ap_const_logic_0 = G1_M_imag_full_n) or (ap_const_logic_0 = G1_M_real_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            G1_M_real_write <= ap_const_logic_1;
        else 
            G1_M_real_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state5_assign_proc : process(G1_M_real_full_n, G1_M_imag_full_n)
    begin
                ap_block_state5 <= ((ap_const_logic_0 = G1_M_imag_full_n) or (ap_const_logic_0 = G1_M_real_full_n));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_80_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_80_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_80_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_80_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_3_fu_98_p2 <= std_logic_vector(unsigned(c_reg_57) + unsigned(ap_const_lv9_1));
    exitcond1_fu_80_p2 <= "1" when (r_reg_46 = ap_const_lv9_100) else "0";
    exitcond_fu_92_p2 <= "1" when (c_reg_57 = ap_const_lv9_100) else "0";

    fft_kernel_modu2_M_1_read_assign_proc : process(ap_CS_fsm_state4, grp_operator_div_float_fu_68_p_x_M_imag_read)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fft_kernel_modu2_M_1_read <= grp_operator_div_float_fu_68_p_x_M_imag_read;
        else 
            fft_kernel_modu2_M_1_read <= ap_const_logic_0;
        end if; 
    end process;


    fft_kernel_modu2_M_s_read_assign_proc : process(ap_CS_fsm_state4, grp_operator_div_float_fu_68_p_x_M_real_read)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fft_kernel_modu2_M_s_read <= grp_operator_div_float_fu_68_p_x_M_real_read;
        else 
            fft_kernel_modu2_M_s_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_operator_div_float_fu_68_ap_start <= grp_operator_div_float_fu_68_ap_start_reg;
    r_3_fu_86_p2 <= std_logic_vector(unsigned(r_reg_46) + unsigned(ap_const_lv9_1));
end behav;
