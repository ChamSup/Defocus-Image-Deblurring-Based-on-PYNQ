-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity KernelMaker is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    kernel_M_real_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    kernel_M_real_full_n : IN STD_LOGIC;
    kernel_M_real_write : OUT STD_LOGIC;
    kernel_M_imag_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    kernel_M_imag_full_n : IN STD_LOGIC;
    kernel_M_imag_write : OUT STD_LOGIC );
end;


architecture behav of KernelMaker is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_180 : STD_LOGIC_VECTOR (8 downto 0) := "110000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal StgValue_88_real379_fu_68_complex_float_M_real_blk_n : STD_LOGIC;
    signal kernel_M_real_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal StgValue_89_imag380_fu_75_complex_float_M_imag_blk_n : STD_LOGIC;
    signal kernel_M_imag_blk_n : STD_LOGIC;
    signal i_3_fu_101_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_3_reg_220 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_138_cast_fu_117_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_138_cast_reg_225 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond_fu_95_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_129_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_reg_233 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_208_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_93_reg_238 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond1_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_reg_243 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_97_reg_248 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_99_fu_197_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_99_reg_253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_87_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_100_reg_263 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_90_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_101_reg_268 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal StgValue_88_real379_fu_68_ap_start : STD_LOGIC;
    signal StgValue_88_real379_fu_68_ap_done : STD_LOGIC;
    signal StgValue_88_real379_fu_68_ap_idle : STD_LOGIC;
    signal StgValue_88_real379_fu_68_ap_ready : STD_LOGIC;
    signal StgValue_88_real379_fu_68_complex_float_M_real_din : STD_LOGIC_VECTOR (31 downto 0);
    signal StgValue_88_real379_fu_68_complex_float_M_real_write : STD_LOGIC;
    signal StgValue_89_imag380_fu_75_ap_start : STD_LOGIC;
    signal StgValue_89_imag380_fu_75_ap_done : STD_LOGIC;
    signal StgValue_89_imag380_fu_75_ap_idle : STD_LOGIC;
    signal StgValue_89_imag380_fu_75_ap_ready : STD_LOGIC;
    signal StgValue_89_imag380_fu_75_complex_float_M_imag_din : STD_LOGIC_VECTOR (31 downto 0);
    signal StgValue_89_imag380_fu_75_complex_float_M_imag_write : STD_LOGIC;
    signal i_reg_46 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_57 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state29 : BOOLEAN;
    signal tmp_102_fu_83_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_87_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_s_fu_107_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_138_cast_fu_117_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_113_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_138_cast_fu_117_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_92_fu_135_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_neg_fu_161_p2 : STD_LOGIC_VECTOR (16 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of p_neg_fu_161_p2 : signal is "no";
    signal tmp_95_fu_166_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_96_fu_176_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_98_fu_184_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_lshr_f_cast_fu_187_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_lshr_cast_fu_180_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_neg_f_fu_191_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_208_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_91_fu_141_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_208_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);

    component real379 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        complex_float_M_real_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        complex_float_M_real_full_n : IN STD_LOGIC;
        complex_float_M_real_write : OUT STD_LOGIC;
        p_val : IN STD_LOGIC_VECTOR (31 downto 0);
        complex_float_M_real_blk_n : OUT STD_LOGIC );
    end component;


    component imag380 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        complex_float_M_imag_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        complex_float_M_imag_full_n : IN STD_LOGIC;
        complex_float_M_imag_write : OUT STD_LOGIC;
        p_val : IN STD_LOGIC_VECTOR (31 downto 0);
        complex_float_M_imag_blk_n : OUT STD_LOGIC );
    end component;


    component WienerDeblur_fptreOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WienerDeblur_sitofYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component WienerDeblur_dexpg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component WienerDeblur_mac_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;



begin
    StgValue_88_real379_fu_68 : component real379
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => StgValue_88_real379_fu_68_ap_start,
        ap_done => StgValue_88_real379_fu_68_ap_done,
        ap_idle => StgValue_88_real379_fu_68_ap_idle,
        ap_ready => StgValue_88_real379_fu_68_ap_ready,
        complex_float_M_real_din => StgValue_88_real379_fu_68_complex_float_M_real_din,
        complex_float_M_real_full_n => kernel_M_real_full_n,
        complex_float_M_real_write => StgValue_88_real379_fu_68_complex_float_M_real_write,
        p_val => tmp_102_fu_83_p1,
        complex_float_M_real_blk_n => StgValue_88_real379_fu_68_complex_float_M_real_blk_n);

    StgValue_89_imag380_fu_75 : component imag380
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => StgValue_89_imag380_fu_75_ap_start,
        ap_done => StgValue_89_imag380_fu_75_ap_done,
        ap_idle => StgValue_89_imag380_fu_75_ap_idle,
        ap_ready => StgValue_89_imag380_fu_75_ap_ready,
        complex_float_M_imag_din => StgValue_89_imag380_fu_75_complex_float_M_imag_din,
        complex_float_M_imag_full_n => kernel_M_imag_full_n,
        complex_float_M_imag_write => StgValue_89_imag380_fu_75_complex_float_M_imag_write,
        p_val => ap_const_lv32_0,
        complex_float_M_imag_blk_n => StgValue_89_imag380_fu_75_complex_float_M_imag_blk_n);

    WienerDeblur_fptreOg_U32 : component WienerDeblur_fptreOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_101_reg_268,
        dout => tmp_102_fu_83_p1);

    WienerDeblur_sitofYi_U33 : component WienerDeblur_sitofYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_87_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_87_p1);

    WienerDeblur_dexpg8j_U34 : component WienerDeblur_dexpg8j
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => tmp_100_reg_263,
        ce => ap_const_logic_1,
        dout => grp_fu_90_p2);

    WienerDeblur_mac_hbi_U35 : component WienerDeblur_mac_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_208_p0,
        din1 => grp_fu_208_p1,
        din2 => tmp_138_cast_reg_225,
        dout => grp_fu_208_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_123_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_46 <= i_3_reg_220;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_46 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_reg_57_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_95_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_57 <= ap_const_lv9_0;
            elsif ((not(((ap_const_logic_0 = StgValue_89_imag380_fu_75_complex_float_M_imag_blk_n) or (ap_const_logic_0 = StgValue_88_real379_fu_68_complex_float_M_real_blk_n))) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                j_reg_57 <= j_1_reg_233;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_3_reg_220 <= i_3_fu_101_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_233 <= j_1_fu_129_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_100_reg_263 <= grp_fu_87_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_101_reg_268 <= grp_fu_90_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_123_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_113_reg_243 <= grp_fu_208_p3(16 downto 16);
                tmp_93_reg_238 <= grp_fu_208_p3;
                tmp_97_reg_248 <= grp_fu_208_p3(16 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_95_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_138_cast_reg_225 <= tmp_138_cast_fu_117_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_99_reg_253 <= tmp_99_fu_197_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, StgValue_88_real379_fu_68_complex_float_M_real_blk_n, ap_CS_fsm_state29, StgValue_89_imag380_fu_75_complex_float_M_imag_blk_n, ap_CS_fsm_state2, exitcond_fu_95_p2, ap_CS_fsm_state3, exitcond1_fu_123_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_95_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond1_fu_123_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if ((not(((ap_const_logic_0 = StgValue_89_imag380_fu_75_complex_float_M_imag_blk_n) or (ap_const_logic_0 = StgValue_88_real379_fu_68_complex_float_M_real_blk_n))) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    StgValue_88_real379_fu_68_ap_start_assign_proc : process(ap_CS_fsm_state29, StgValue_89_imag380_fu_75_complex_float_M_imag_blk_n)
    begin
        if (((ap_const_logic_1 = StgValue_89_imag380_fu_75_complex_float_M_imag_blk_n) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            StgValue_88_real379_fu_68_ap_start <= ap_const_logic_1;
        else 
            StgValue_88_real379_fu_68_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    StgValue_89_imag380_fu_75_ap_start_assign_proc : process(StgValue_88_real379_fu_68_complex_float_M_real_blk_n, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = StgValue_88_real379_fu_68_complex_float_M_real_blk_n) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            StgValue_89_imag380_fu_75_ap_start <= ap_const_logic_1;
        else 
            StgValue_89_imag380_fu_75_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state29_assign_proc : process(StgValue_88_real379_fu_68_complex_float_M_real_blk_n, StgValue_89_imag380_fu_75_complex_float_M_imag_blk_n)
    begin
                ap_block_state29 <= ((ap_const_logic_0 = StgValue_89_imag380_fu_75_complex_float_M_imag_blk_n) or (ap_const_logic_0 = StgValue_88_real379_fu_68_complex_float_M_real_blk_n));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_95_p2)
    begin
        if ((((exitcond_fu_95_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_95_p2)
    begin
        if (((exitcond_fu_95_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_123_p2 <= "1" when (j_reg_57 = ap_const_lv9_100) else "0";
    exitcond_fu_95_p2 <= "1" when (i_reg_46 = ap_const_lv9_100) else "0";
    grp_fu_208_p0 <= tmp_91_fu_141_p1(9 - 1 downto 0);
    grp_fu_208_p1 <= tmp_91_fu_141_p1(9 - 1 downto 0);
        grp_fu_87_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_99_reg_253),32));

    i_3_fu_101_p2 <= std_logic_vector(unsigned(i_reg_46) + unsigned(ap_const_lv9_1));
    j_1_fu_129_p2 <= std_logic_vector(unsigned(j_reg_57) + unsigned(ap_const_lv9_1));

    kernel_M_imag_blk_n_assign_proc : process(ap_CS_fsm_state29, StgValue_89_imag380_fu_75_complex_float_M_imag_blk_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            kernel_M_imag_blk_n <= StgValue_89_imag380_fu_75_complex_float_M_imag_blk_n;
        else 
            kernel_M_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    kernel_M_imag_din <= StgValue_89_imag380_fu_75_complex_float_M_imag_din;

    kernel_M_imag_write_assign_proc : process(ap_CS_fsm_state29, StgValue_89_imag380_fu_75_complex_float_M_imag_write)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            kernel_M_imag_write <= StgValue_89_imag380_fu_75_complex_float_M_imag_write;
        else 
            kernel_M_imag_write <= ap_const_logic_0;
        end if; 
    end process;


    kernel_M_real_blk_n_assign_proc : process(StgValue_88_real379_fu_68_complex_float_M_real_blk_n, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            kernel_M_real_blk_n <= StgValue_88_real379_fu_68_complex_float_M_real_blk_n;
        else 
            kernel_M_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    kernel_M_real_din <= StgValue_88_real379_fu_68_complex_float_M_real_din;

    kernel_M_real_write_assign_proc : process(ap_CS_fsm_state29, StgValue_88_real379_fu_68_complex_float_M_real_write)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            kernel_M_real_write <= StgValue_88_real379_fu_68_complex_float_M_real_write;
        else 
            kernel_M_real_write <= ap_const_logic_0;
        end if; 
    end process;

    p_lshr_cast_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_96_fu_176_p1),4));
    p_lshr_f_cast_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_98_fu_184_p1),4));
    p_neg_f_fu_191_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(p_lshr_f_cast_fu_187_p1));
    p_neg_fu_161_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(tmp_93_reg_238));
    tmp_138_cast_fu_117_p0 <= tmp_fu_113_p1(9 - 1 downto 0);
    tmp_138_cast_fu_117_p1 <= tmp_fu_113_p1(9 - 1 downto 0);
    tmp_138_cast_fu_117_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_138_cast_fu_117_p0) * signed(tmp_138_cast_fu_117_p1))), 17));
        tmp_91_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_92_fu_135_p2),17));

    tmp_92_fu_135_p2 <= std_logic_vector(unsigned(j_reg_57) + unsigned(ap_const_lv9_180));
    tmp_95_fu_166_p4 <= p_neg_fu_161_p2(16 downto 15);
        tmp_96_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_95_fu_166_p4),3));

        tmp_98_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_97_reg_248),3));

    tmp_99_fu_197_p3 <= 
        p_lshr_cast_fu_180_p1 when (tmp_113_reg_243(0) = '1') else 
        p_neg_f_fu_191_p2;
        tmp_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_107_p2),17));

    tmp_s_fu_107_p2 <= std_logic_vector(unsigned(i_reg_46) + unsigned(ap_const_lv9_180));
end behav;
