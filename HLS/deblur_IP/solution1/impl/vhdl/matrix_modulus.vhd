-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_modulus is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fft_kernel_M_real_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    fft_kernel_M_real_empty_n : IN STD_LOGIC;
    fft_kernel_M_real_read : OUT STD_LOGIC;
    fft_kernel_M_imag_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    fft_kernel_M_imag_empty_n : IN STD_LOGIC;
    fft_kernel_M_imag_read : OUT STD_LOGIC;
    fft_kernel_modu_M_r_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    fft_kernel_modu_M_r_full_n : IN STD_LOGIC;
    fft_kernel_modu_M_r_write : OUT STD_LOGIC;
    fft_kernel_modu_M_i_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    fft_kernel_modu_M_i_full_n : IN STD_LOGIC;
    fft_kernel_modu_M_i_write : OUT STD_LOGIC );
end;


architecture behav of matrix_modulus is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (107 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (107 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (107 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (107 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (107 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (107 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (107 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (107 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (107 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (107 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (107 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (107 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fft_kernel_M_real_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fft_kernel_M_imag_blk_n : STD_LOGIC;
    signal StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_blk_n : STD_LOGIC;
    signal fft_kernel_modu_M_r_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal StgValue_300_imag_fu_161_fft_kernel_modu_M_i_blk_n : STD_LOGIC;
    signal fft_kernel_modu_M_i_blk_n : STD_LOGIC;
    signal r_2_fu_192_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_2_reg_213 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal c_2_fu_204_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_2_reg_221 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal fft_kernel_M_real_r_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_kernel_M_imag_r_reg_231 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_fu_171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_236 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal x_assign_1_fu_174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_1_reg_241 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pow_generic_double_s_fu_96_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_246 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal grp_pow_generic_double_s_fu_125_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_reg_251 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_177_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_256 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal grp_fu_181_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_reg_261 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal grp_pow_generic_double_s_fu_96_ap_start : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_96_ap_done : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_96_ap_idle : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_96_ap_ready : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_125_ap_start : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_125_ap_done : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_125_ap_idle : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_125_ap_ready : STD_LOGIC;
    signal StgValue_299_real_r_fu_154_ap_start : STD_LOGIC;
    signal StgValue_299_real_r_fu_154_ap_done : STD_LOGIC;
    signal StgValue_299_real_r_fu_154_ap_idle : STD_LOGIC;
    signal StgValue_299_real_r_fu_154_ap_ready : STD_LOGIC;
    signal StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_din : STD_LOGIC_VECTOR (31 downto 0);
    signal StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_write : STD_LOGIC;
    signal StgValue_300_imag_fu_161_ap_start : STD_LOGIC;
    signal StgValue_300_imag_fu_161_ap_done : STD_LOGIC;
    signal StgValue_300_imag_fu_161_ap_idle : STD_LOGIC;
    signal StgValue_300_imag_fu_161_ap_ready : STD_LOGIC;
    signal StgValue_300_imag_fu_161_fft_kernel_modu_M_i_din : STD_LOGIC_VECTOR (31 downto 0);
    signal StgValue_300_imag_fu_161_fft_kernel_modu_M_i_write : STD_LOGIC;
    signal r_reg_74 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_reg_85 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state108 : BOOLEAN;
    signal exitcond1_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pow_generic_double_s_fu_96_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (107 downto 0);
    signal ap_NS_fsm_state5 : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_pow_generic_double_s_fu_125_ap_start_reg : STD_LOGIC := '0';
    signal tmp_40_fu_167_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";

    component pow_generic_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        base_r : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component real_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_val : IN STD_LOGIC_VECTOR (31 downto 0);
        fft_kernel_modu_M_r_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fft_kernel_modu_M_r_full_n : IN STD_LOGIC;
        fft_kernel_modu_M_r_write : OUT STD_LOGIC;
        fft_kernel_modu_M_r_blk_n : OUT STD_LOGIC );
    end component;


    component imag IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fft_kernel_modu_M_i_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fft_kernel_modu_M_i_full_n : IN STD_LOGIC;
        fft_kernel_modu_M_i_write : OUT STD_LOGIC;
        fft_kernel_modu_M_i_blk_n : OUT STD_LOGIC );
    end component;


    component WienerDeblur_fptreOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WienerDeblur_fpexKfY IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component WienerDeblur_daddLf8 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component WienerDeblur_dsqrMgi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_pow_generic_double_s_fu_96 : component pow_generic_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_double_s_fu_96_ap_start,
        ap_done => grp_pow_generic_double_s_fu_96_ap_done,
        ap_idle => grp_pow_generic_double_s_fu_96_ap_idle,
        ap_ready => grp_pow_generic_double_s_fu_96_ap_ready,
        base_r => x_assign_reg_236,
        ap_return => grp_pow_generic_double_s_fu_96_ap_return);

    grp_pow_generic_double_s_fu_125 : component pow_generic_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_double_s_fu_125_ap_start,
        ap_done => grp_pow_generic_double_s_fu_125_ap_done,
        ap_idle => grp_pow_generic_double_s_fu_125_ap_idle,
        ap_ready => grp_pow_generic_double_s_fu_125_ap_ready,
        base_r => x_assign_1_reg_241,
        ap_return => grp_pow_generic_double_s_fu_125_ap_return);

    StgValue_299_real_r_fu_154 : component real_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => StgValue_299_real_r_fu_154_ap_start,
        ap_done => StgValue_299_real_r_fu_154_ap_done,
        ap_idle => StgValue_299_real_r_fu_154_ap_idle,
        ap_ready => StgValue_299_real_r_fu_154_ap_ready,
        p_val => tmp_40_fu_167_p1,
        fft_kernel_modu_M_r_din => StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_din,
        fft_kernel_modu_M_r_full_n => fft_kernel_modu_M_r_full_n,
        fft_kernel_modu_M_r_write => StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_write,
        fft_kernel_modu_M_r_blk_n => StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_blk_n);

    StgValue_300_imag_fu_161 : component imag
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => StgValue_300_imag_fu_161_ap_start,
        ap_done => StgValue_300_imag_fu_161_ap_done,
        ap_idle => StgValue_300_imag_fu_161_ap_idle,
        ap_ready => StgValue_300_imag_fu_161_ap_ready,
        fft_kernel_modu_M_i_din => StgValue_300_imag_fu_161_fft_kernel_modu_M_i_din,
        fft_kernel_modu_M_i_full_n => fft_kernel_modu_M_i_full_n,
        fft_kernel_modu_M_i_write => StgValue_300_imag_fu_161_fft_kernel_modu_M_i_write,
        fft_kernel_modu_M_i_blk_n => StgValue_300_imag_fu_161_fft_kernel_modu_M_i_blk_n);

    WienerDeblur_fptreOg_U108 : component WienerDeblur_fptreOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_39_reg_261,
        dout => tmp_40_fu_167_p1);

    WienerDeblur_fpexKfY_U109 : component WienerDeblur_fpexKfY
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => fft_kernel_M_real_r_reg_226,
        dout => x_assign_fu_171_p1);

    WienerDeblur_fpexKfY_U110 : component WienerDeblur_fpexKfY
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => fft_kernel_M_imag_r_reg_231,
        dout => x_assign_1_fu_174_p1);

    WienerDeblur_daddLf8_U111 : component WienerDeblur_daddLf8
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_reg_246,
        din1 => tmp_i1_reg_251,
        ce => ap_const_logic_1,
        dout => grp_fu_177_p2);

    WienerDeblur_dsqrMgi_U112 : component WienerDeblur_dsqrMgi
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => tmp_s_reg_256,
        ce => ap_const_logic_1,
        dout => grp_fu_181_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_pow_generic_double_s_fu_125_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_double_s_fu_125_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state5) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_pow_generic_double_s_fu_125_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_double_s_fu_125_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_double_s_fu_125_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pow_generic_double_s_fu_96_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_double_s_fu_96_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state5) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_pow_generic_double_s_fu_96_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_double_s_fu_96_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_double_s_fu_96_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_186_p2 = ap_const_lv1_0))) then 
                c_reg_85 <= ap_const_lv9_0;
            elsif ((not(((ap_const_logic_0 = StgValue_300_imag_fu_161_fft_kernel_modu_M_i_blk_n) or (ap_const_logic_0 = StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_blk_n))) and (ap_const_logic_1 = ap_CS_fsm_state108))) then 
                c_reg_85 <= c_2_reg_221;
            end if; 
        end if;
    end process;

    r_reg_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((fft_kernel_M_imag_empty_n = ap_const_logic_0) and (exitcond_fu_198_p2 = ap_const_lv1_0)) or ((fft_kernel_M_real_empty_n = ap_const_logic_0) and (exitcond_fu_198_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_198_p2 = ap_const_lv1_1))) then 
                r_reg_74 <= r_2_reg_213;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_reg_74 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((fft_kernel_M_imag_empty_n = ap_const_logic_0) and (exitcond_fu_198_p2 = ap_const_lv1_0)) or ((fft_kernel_M_real_empty_n = ap_const_logic_0) and (exitcond_fu_198_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                c_2_reg_221 <= c_2_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((fft_kernel_M_imag_empty_n = ap_const_logic_0) and (exitcond_fu_198_p2 = ap_const_lv1_0)) or ((fft_kernel_M_real_empty_n = ap_const_logic_0) and (exitcond_fu_198_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_198_p2 = ap_const_lv1_0))) then
                fft_kernel_M_imag_r_reg_231 <= fft_kernel_M_imag_dout;
                fft_kernel_M_real_r_reg_226 <= fft_kernel_M_real_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_2_reg_213 <= r_2_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state107)) then
                tmp_39_reg_261 <= grp_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                tmp_i1_reg_251 <= grp_pow_generic_double_s_fu_125_ap_return;
                tmp_i_reg_246 <= grp_pow_generic_double_s_fu_96_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                tmp_s_reg_256 <= grp_fu_177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                x_assign_1_reg_241 <= x_assign_1_fu_174_p1;
                x_assign_reg_236 <= x_assign_fu_171_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, fft_kernel_M_real_empty_n, fft_kernel_M_imag_empty_n, ap_CS_fsm_state3, exitcond_fu_198_p2, StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_blk_n, ap_CS_fsm_state108, StgValue_300_imag_fu_161_fft_kernel_modu_M_i_blk_n, ap_CS_fsm_state2, exitcond1_fu_186_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not((((fft_kernel_M_imag_empty_n = ap_const_logic_0) and (exitcond_fu_198_p2 = ap_const_lv1_0)) or ((fft_kernel_M_real_empty_n = ap_const_logic_0) and (exitcond_fu_198_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_198_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((((fft_kernel_M_imag_empty_n = ap_const_logic_0) and (exitcond_fu_198_p2 = ap_const_lv1_0)) or ((fft_kernel_M_real_empty_n = ap_const_logic_0) and (exitcond_fu_198_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_198_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                if ((not(((ap_const_logic_0 = StgValue_300_imag_fu_161_fft_kernel_modu_M_i_blk_n) or (ap_const_logic_0 = StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_blk_n))) and (ap_const_logic_1 = ap_CS_fsm_state108))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state108;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    StgValue_299_real_r_fu_154_ap_start_assign_proc : process(ap_CS_fsm_state108, StgValue_300_imag_fu_161_fft_kernel_modu_M_i_blk_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state108) and (ap_const_logic_1 = StgValue_300_imag_fu_161_fft_kernel_modu_M_i_blk_n))) then 
            StgValue_299_real_r_fu_154_ap_start <= ap_const_logic_1;
        else 
            StgValue_299_real_r_fu_154_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    StgValue_300_imag_fu_161_ap_start_assign_proc : process(StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_blk_n, ap_CS_fsm_state108)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state108) and (ap_const_logic_1 = StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_blk_n))) then 
            StgValue_300_imag_fu_161_ap_start <= ap_const_logic_1;
        else 
            StgValue_300_imag_fu_161_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_NS_fsm_state5 <= ap_NS_fsm(4);

    ap_block_state108_assign_proc : process(StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_blk_n, StgValue_300_imag_fu_161_fft_kernel_modu_M_i_blk_n)
    begin
                ap_block_state108 <= ((ap_const_logic_0 = StgValue_300_imag_fu_161_fft_kernel_modu_M_i_blk_n) or (ap_const_logic_0 = StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_blk_n));
    end process;


    ap_block_state3_assign_proc : process(fft_kernel_M_real_empty_n, fft_kernel_M_imag_empty_n, exitcond_fu_198_p2)
    begin
                ap_block_state3 <= (((fft_kernel_M_imag_empty_n = ap_const_logic_0) and (exitcond_fu_198_p2 = ap_const_lv1_0)) or ((fft_kernel_M_real_empty_n = ap_const_logic_0) and (exitcond_fu_198_p2 = ap_const_lv1_0)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_186_p2)
    begin
        if ((((exitcond1_fu_186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_186_p2)
    begin
        if (((exitcond1_fu_186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_2_fu_204_p2 <= std_logic_vector(unsigned(c_reg_85) + unsigned(ap_const_lv9_1));
    exitcond1_fu_186_p2 <= "1" when (r_reg_74 = ap_const_lv9_100) else "0";
    exitcond_fu_198_p2 <= "1" when (c_reg_85 = ap_const_lv9_100) else "0";

    fft_kernel_M_imag_blk_n_assign_proc : process(fft_kernel_M_imag_empty_n, ap_CS_fsm_state3, exitcond_fu_198_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_198_p2 = ap_const_lv1_0))) then 
            fft_kernel_M_imag_blk_n <= fft_kernel_M_imag_empty_n;
        else 
            fft_kernel_M_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fft_kernel_M_imag_read_assign_proc : process(fft_kernel_M_real_empty_n, fft_kernel_M_imag_empty_n, ap_CS_fsm_state3, exitcond_fu_198_p2)
    begin
        if ((not((((fft_kernel_M_imag_empty_n = ap_const_logic_0) and (exitcond_fu_198_p2 = ap_const_lv1_0)) or ((fft_kernel_M_real_empty_n = ap_const_logic_0) and (exitcond_fu_198_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_198_p2 = ap_const_lv1_0))) then 
            fft_kernel_M_imag_read <= ap_const_logic_1;
        else 
            fft_kernel_M_imag_read <= ap_const_logic_0;
        end if; 
    end process;


    fft_kernel_M_real_blk_n_assign_proc : process(fft_kernel_M_real_empty_n, ap_CS_fsm_state3, exitcond_fu_198_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_198_p2 = ap_const_lv1_0))) then 
            fft_kernel_M_real_blk_n <= fft_kernel_M_real_empty_n;
        else 
            fft_kernel_M_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fft_kernel_M_real_read_assign_proc : process(fft_kernel_M_real_empty_n, fft_kernel_M_imag_empty_n, ap_CS_fsm_state3, exitcond_fu_198_p2)
    begin
        if ((not((((fft_kernel_M_imag_empty_n = ap_const_logic_0) and (exitcond_fu_198_p2 = ap_const_lv1_0)) or ((fft_kernel_M_real_empty_n = ap_const_logic_0) and (exitcond_fu_198_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_198_p2 = ap_const_lv1_0))) then 
            fft_kernel_M_real_read <= ap_const_logic_1;
        else 
            fft_kernel_M_real_read <= ap_const_logic_0;
        end if; 
    end process;


    fft_kernel_modu_M_i_blk_n_assign_proc : process(ap_CS_fsm_state108, StgValue_300_imag_fu_161_fft_kernel_modu_M_i_blk_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            fft_kernel_modu_M_i_blk_n <= StgValue_300_imag_fu_161_fft_kernel_modu_M_i_blk_n;
        else 
            fft_kernel_modu_M_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fft_kernel_modu_M_i_din <= StgValue_300_imag_fu_161_fft_kernel_modu_M_i_din;

    fft_kernel_modu_M_i_write_assign_proc : process(ap_CS_fsm_state108, StgValue_300_imag_fu_161_fft_kernel_modu_M_i_write)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            fft_kernel_modu_M_i_write <= StgValue_300_imag_fu_161_fft_kernel_modu_M_i_write;
        else 
            fft_kernel_modu_M_i_write <= ap_const_logic_0;
        end if; 
    end process;


    fft_kernel_modu_M_r_blk_n_assign_proc : process(StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_blk_n, ap_CS_fsm_state108)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            fft_kernel_modu_M_r_blk_n <= StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_blk_n;
        else 
            fft_kernel_modu_M_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fft_kernel_modu_M_r_din <= StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_din;

    fft_kernel_modu_M_r_write_assign_proc : process(ap_CS_fsm_state108, StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_write)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            fft_kernel_modu_M_r_write <= StgValue_299_real_r_fu_154_fft_kernel_modu_M_r_write;
        else 
            fft_kernel_modu_M_r_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_pow_generic_double_s_fu_125_ap_start <= grp_pow_generic_double_s_fu_125_ap_start_reg;
    grp_pow_generic_double_s_fu_96_ap_start <= grp_pow_generic_double_s_fu_96_ap_start_reg;
    r_2_fu_192_p2 <= std_logic_vector(unsigned(r_reg_74) + unsigned(ap_const_lv9_1));
end behav;
