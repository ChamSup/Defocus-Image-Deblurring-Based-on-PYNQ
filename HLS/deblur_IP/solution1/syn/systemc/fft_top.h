// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fft_top_HH_
#define _fft_top_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "dummy_proc_middle_1394.h"
#include "dummy_proc_fe_1395.h"
#include "fft_config1_s.h"
#include "fifo_w64_d256_A.h"

namespace ap_rtl {

struct fft_top : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > direction;
    sc_in< sc_logic > direction_ap_vld;
    sc_out< sc_logic > direction_ap_ack;
    sc_in< sc_lv<64> > in_r_dout;
    sc_in< sc_logic > in_r_empty_n;
    sc_out< sc_logic > in_r_read;
    sc_out< sc_lv<64> > out_r_din;
    sc_in< sc_logic > out_r_full_n;
    sc_out< sc_logic > out_r_write;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<16> > ap_var_for_const1;


    // Module declarations
    fft_top(sc_module_name name);
    SC_HAS_PROCESS(fft_top);

    ~fft_top();

    sc_trace_file* mVcdFile;

    dummy_proc_middle_1394* grp_dummy_proc_middle_1394_fu_75;
    dummy_proc_fe_1395* grp_dummy_proc_fe_1395_fu_85;
    fft_config1_s* grp_fft_config1_s_fu_96;
    fifo_w64_d256_A* xk1_fifo_U;
    fifo_w64_d256_A* xn1_fifo_U;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > direction_blk_n;
    sc_signal< sc_lv<1> > direction_read_reg_106;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<8> > fft_status1_data_V_r_reg_123;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<8> > fft_status1_data_V_dout;
    sc_signal< sc_logic > fft_status1_data_V_empty_n;
    sc_signal< sc_logic > grp_dummy_proc_middle_1394_fu_75_ap_start;
    sc_signal< sc_logic > grp_dummy_proc_middle_1394_fu_75_ap_done;
    sc_signal< sc_logic > grp_dummy_proc_middle_1394_fu_75_ap_idle;
    sc_signal< sc_logic > grp_dummy_proc_middle_1394_fu_75_ap_ready;
    sc_signal< sc_lv<64> > grp_dummy_proc_middle_1394_fu_75_out_r_din;
    sc_signal< sc_logic > grp_dummy_proc_middle_1394_fu_75_out_r_write;
    sc_signal< sc_logic > grp_dummy_proc_middle_1394_fu_75_xk1_read;
    sc_signal< sc_logic > grp_dummy_proc_fe_1395_fu_85_ap_start;
    sc_signal< sc_logic > grp_dummy_proc_fe_1395_fu_85_ap_done;
    sc_signal< sc_logic > grp_dummy_proc_fe_1395_fu_85_ap_idle;
    sc_signal< sc_logic > grp_dummy_proc_fe_1395_fu_85_ap_ready;
    sc_signal< sc_logic > grp_dummy_proc_fe_1395_fu_85_in_r_read;
    sc_signal< sc_lv<64> > grp_dummy_proc_fe_1395_fu_85_xn1_din;
    sc_signal< sc_logic > grp_dummy_proc_fe_1395_fu_85_xn1_write;
    sc_signal< sc_lv<16> > grp_dummy_proc_fe_1395_fu_85_ap_return;
    sc_signal< sc_logic > grp_fft_config1_s_fu_96_ap_start;
    sc_signal< sc_logic > grp_fft_config1_s_fu_96_ap_ce;
    sc_signal< sc_logic > grp_fft_config1_s_fu_96_ap_done;
    sc_signal< sc_logic > grp_fft_config1_s_fu_96_ap_idle;
    sc_signal< sc_logic > grp_fft_config1_s_fu_96_ap_ready;
    sc_signal< sc_logic > grp_fft_config1_s_fu_96_xn_read;
    sc_signal< sc_lv<64> > grp_fft_config1_s_fu_96_xk_din;
    sc_signal< sc_logic > grp_fft_config1_s_fu_96_xk_write;
    sc_signal< sc_lv<8> > grp_fft_config1_s_fu_96_status_data_V_din;
    sc_signal< sc_logic > grp_fft_config1_s_fu_96_status_data_V_write;
    sc_signal< sc_logic > grp_fft_config1_s_fu_96_config_ch_data_V_read;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > grp_dummy_proc_middle_1394_fu_75_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<64> > xk1_dout;
    sc_signal< sc_logic > xk1_empty_n;
    sc_signal< sc_logic > xk1_read;
    sc_signal< sc_logic > grp_dummy_proc_fe_1395_fu_85_ap_start_reg;
    sc_signal< bool > ap_block_state1_ignore_call10;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > xn1_full_n;
    sc_signal< sc_logic > xn1_write;
    sc_signal< sc_logic > grp_fft_config1_s_fu_96_ap_start_reg;
    sc_signal< sc_lv<64> > xn1_dout;
    sc_signal< sc_logic > xn1_empty_n;
    sc_signal< sc_logic > xn1_read;
    sc_signal< sc_logic > xk1_full_n;
    sc_signal< sc_logic > xk1_write;
    sc_signal< sc_logic > fft_config1_data_V_full_n;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_state1();
    void thread_ap_block_state1_ignore_call10();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_direction_ap_ack();
    void thread_direction_blk_n();
    void thread_fft_config1_data_V_full_n();
    void thread_fft_status1_data_V_dout();
    void thread_fft_status1_data_V_empty_n();
    void thread_grp_dummy_proc_fe_1395_fu_85_ap_start();
    void thread_grp_dummy_proc_middle_1394_fu_75_ap_start();
    void thread_grp_fft_config1_s_fu_96_ap_ce();
    void thread_grp_fft_config1_s_fu_96_ap_start();
    void thread_in_r_read();
    void thread_out_r_din();
    void thread_out_r_write();
    void thread_xk1_read();
    void thread_xk1_write();
    void thread_xn1_read();
    void thread_xn1_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
