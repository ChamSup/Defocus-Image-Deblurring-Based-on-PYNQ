// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "matrix_plus_SNR.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic matrix_plus_SNR::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic matrix_plus_SNR::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> matrix_plus_SNR::ap_ST_fsm_state1 = "1";
const sc_lv<8> matrix_plus_SNR::ap_ST_fsm_state2 = "10";
const sc_lv<8> matrix_plus_SNR::ap_ST_fsm_state3 = "100";
const sc_lv<8> matrix_plus_SNR::ap_ST_fsm_state4 = "1000";
const sc_lv<8> matrix_plus_SNR::ap_ST_fsm_state5 = "10000";
const sc_lv<8> matrix_plus_SNR::ap_ST_fsm_state6 = "100000";
const sc_lv<8> matrix_plus_SNR::ap_ST_fsm_state7 = "1000000";
const sc_lv<8> matrix_plus_SNR::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> matrix_plus_SNR::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> matrix_plus_SNR::ap_const_lv32_2 = "10";
const sc_lv<1> matrix_plus_SNR::ap_const_lv1_0 = "0";
const sc_lv<32> matrix_plus_SNR::ap_const_lv32_7 = "111";
const sc_lv<32> matrix_plus_SNR::ap_const_lv32_3 = "11";
const sc_lv<32> matrix_plus_SNR::ap_const_lv32_1 = "1";
const sc_lv<9> matrix_plus_SNR::ap_const_lv9_0 = "000000000";
const sc_lv<1> matrix_plus_SNR::ap_const_lv1_1 = "1";
const sc_lv<9> matrix_plus_SNR::ap_const_lv9_100 = "100000000";
const sc_lv<9> matrix_plus_SNR::ap_const_lv9_1 = "1";
const sc_lv<32> matrix_plus_SNR::ap_const_lv32_4 = "100";
const sc_lv<32> matrix_plus_SNR::ap_const_lv32_5 = "101";
const sc_lv<32> matrix_plus_SNR::ap_const_lv32_6 = "110";
const bool matrix_plus_SNR::ap_const_boolean_1 = true;

matrix_plus_SNR::matrix_plus_SNR(sc_module_name name) : sc_module(name), mVcdFile(0) {
    StgValue_28_imag380_fu_70 = new imag380("StgValue_28_imag380_fu_70");
    StgValue_28_imag380_fu_70->ap_clk(ap_clk);
    StgValue_28_imag380_fu_70->ap_rst(ap_rst);
    StgValue_28_imag380_fu_70->ap_start(StgValue_28_imag380_fu_70_ap_start);
    StgValue_28_imag380_fu_70->ap_done(StgValue_28_imag380_fu_70_ap_done);
    StgValue_28_imag380_fu_70->ap_idle(StgValue_28_imag380_fu_70_ap_idle);
    StgValue_28_imag380_fu_70->ap_ready(StgValue_28_imag380_fu_70_ap_ready);
    StgValue_28_imag380_fu_70->complex_float_M_imag_din(StgValue_28_imag380_fu_70_complex_float_M_imag_din);
    StgValue_28_imag380_fu_70->complex_float_M_imag_full_n(G1_M_imag_full_n);
    StgValue_28_imag380_fu_70->complex_float_M_imag_write(StgValue_28_imag380_fu_70_complex_float_M_imag_write);
    StgValue_28_imag380_fu_70->p_val(fft_kernel_modu2_M_3_reg_135);
    StgValue_28_imag380_fu_70->complex_float_M_imag_blk_n(StgValue_28_imag380_fu_70_complex_float_M_imag_blk_n);
    StgValue_33_real379_fu_77 = new real379("StgValue_33_real379_fu_77");
    StgValue_33_real379_fu_77->ap_clk(ap_clk);
    StgValue_33_real379_fu_77->ap_rst(ap_rst);
    StgValue_33_real379_fu_77->ap_start(StgValue_33_real379_fu_77_ap_start);
    StgValue_33_real379_fu_77->ap_done(StgValue_33_real379_fu_77_ap_done);
    StgValue_33_real379_fu_77->ap_idle(StgValue_33_real379_fu_77_ap_idle);
    StgValue_33_real379_fu_77->ap_ready(StgValue_33_real379_fu_77_ap_ready);
    StgValue_33_real379_fu_77->complex_float_M_real_din(StgValue_33_real379_fu_77_complex_float_M_real_din);
    StgValue_33_real379_fu_77->complex_float_M_real_full_n(G1_M_real_full_n);
    StgValue_33_real379_fu_77->complex_float_M_real_write(StgValue_33_real379_fu_77_complex_float_M_real_write);
    StgValue_33_real379_fu_77->p_val(grp_fu_84_p2);
    StgValue_33_real379_fu_77->complex_float_M_real_blk_n(StgValue_33_real379_fu_77_complex_float_M_real_blk_n);
    WienerDeblur_faddibs_U136 = new WienerDeblur_faddibs<1,5,32,32,32>("WienerDeblur_faddibs_U136");
    WienerDeblur_faddibs_U136->clk(ap_clk);
    WienerDeblur_faddibs_U136->reset(ap_rst);
    WienerDeblur_faddibs_U136->din0(fft_kernel_modu2_M_2_reg_130);
    WienerDeblur_faddibs_U136->din1(ap_var_for_const0);
    WienerDeblur_faddibs_U136->ce(grp_fu_84_ce);
    WienerDeblur_faddibs_U136->dout(grp_fu_84_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_G1_M_imag_blk_n);
    sensitive << ( StgValue_28_imag380_fu_70_complex_float_M_imag_blk_n );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_G1_M_imag_din);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( StgValue_28_imag380_fu_70_complex_float_M_imag_din );

    SC_METHOD(thread_G1_M_imag_write);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( StgValue_28_imag380_fu_70_complex_float_M_imag_write );

    SC_METHOD(thread_G1_M_real_blk_n);
    sensitive << ( StgValue_33_real379_fu_77_complex_float_M_real_blk_n );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_G1_M_real_din);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( StgValue_33_real379_fu_77_complex_float_M_real_din );

    SC_METHOD(thread_G1_M_real_write);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( StgValue_33_real379_fu_77_complex_float_M_real_write );

    SC_METHOD(thread_StgValue_28_imag380_fu_70_ap_start);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_StgValue_33_real379_fu_77_ap_start);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( fft_kernel_modu2_M_s_empty_n );
    sensitive << ( fft_kernel_modu2_M_1_empty_n );
    sensitive << ( exitcond_fu_102_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_90_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_90_p2 );

    SC_METHOD(thread_c_1_fu_108_p2);
    sensitive << ( c_reg_59 );

    SC_METHOD(thread_exitcond1_fu_90_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( r_reg_48 );

    SC_METHOD(thread_exitcond_fu_102_p2);
    sensitive << ( fft_kernel_modu2_M_s_empty_n );
    sensitive << ( fft_kernel_modu2_M_1_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_102_p2 );
    sensitive << ( c_reg_59 );

    SC_METHOD(thread_fft_kernel_modu2_M_1_blk_n);
    sensitive << ( fft_kernel_modu2_M_1_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_102_p2 );

    SC_METHOD(thread_fft_kernel_modu2_M_1_read);
    sensitive << ( fft_kernel_modu2_M_s_empty_n );
    sensitive << ( fft_kernel_modu2_M_1_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_102_p2 );

    SC_METHOD(thread_fft_kernel_modu2_M_s_blk_n);
    sensitive << ( fft_kernel_modu2_M_s_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_102_p2 );

    SC_METHOD(thread_fft_kernel_modu2_M_s_read);
    sensitive << ( fft_kernel_modu2_M_s_empty_n );
    sensitive << ( fft_kernel_modu2_M_1_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_102_p2 );

    SC_METHOD(thread_grp_fu_84_ce);
    sensitive << ( StgValue_33_real379_fu_77_complex_float_M_real_blk_n );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( StgValue_28_imag380_fu_70_complex_float_M_imag_blk_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_r_1_fu_96_p2);
    sensitive << ( r_reg_48 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( fft_kernel_modu2_M_s_empty_n );
    sensitive << ( fft_kernel_modu2_M_1_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_102_p2 );
    sensitive << ( StgValue_33_real379_fu_77_complex_float_M_real_blk_n );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( StgValue_28_imag380_fu_70_complex_float_M_imag_blk_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_90_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "matrix_plus_SNR_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, fft_kernel_modu2_M_s_dout, "(port)fft_kernel_modu2_M_s_dout");
    sc_trace(mVcdFile, fft_kernel_modu2_M_s_empty_n, "(port)fft_kernel_modu2_M_s_empty_n");
    sc_trace(mVcdFile, fft_kernel_modu2_M_s_read, "(port)fft_kernel_modu2_M_s_read");
    sc_trace(mVcdFile, G1_M_real_din, "(port)G1_M_real_din");
    sc_trace(mVcdFile, G1_M_real_full_n, "(port)G1_M_real_full_n");
    sc_trace(mVcdFile, G1_M_real_write, "(port)G1_M_real_write");
    sc_trace(mVcdFile, fft_kernel_modu2_M_1_dout, "(port)fft_kernel_modu2_M_1_dout");
    sc_trace(mVcdFile, fft_kernel_modu2_M_1_empty_n, "(port)fft_kernel_modu2_M_1_empty_n");
    sc_trace(mVcdFile, fft_kernel_modu2_M_1_read, "(port)fft_kernel_modu2_M_1_read");
    sc_trace(mVcdFile, G1_M_imag_din, "(port)G1_M_imag_din");
    sc_trace(mVcdFile, G1_M_imag_full_n, "(port)G1_M_imag_full_n");
    sc_trace(mVcdFile, G1_M_imag_write, "(port)G1_M_imag_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, fft_kernel_modu2_M_s_blk_n, "fft_kernel_modu2_M_s_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond_fu_102_p2, "exitcond_fu_102_p2");
    sc_trace(mVcdFile, StgValue_33_real379_fu_77_complex_float_M_real_blk_n, "StgValue_33_real379_fu_77_complex_float_M_real_blk_n");
    sc_trace(mVcdFile, G1_M_real_blk_n, "G1_M_real_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, fft_kernel_modu2_M_1_blk_n, "fft_kernel_modu2_M_1_blk_n");
    sc_trace(mVcdFile, StgValue_28_imag380_fu_70_complex_float_M_imag_blk_n, "StgValue_28_imag380_fu_70_complex_float_M_imag_blk_n");
    sc_trace(mVcdFile, G1_M_imag_blk_n, "G1_M_imag_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, r_1_fu_96_p2, "r_1_fu_96_p2");
    sc_trace(mVcdFile, r_1_reg_117, "r_1_reg_117");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, c_1_fu_108_p2, "c_1_fu_108_p2");
    sc_trace(mVcdFile, c_1_reg_125, "c_1_reg_125");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, fft_kernel_modu2_M_2_reg_130, "fft_kernel_modu2_M_2_reg_130");
    sc_trace(mVcdFile, fft_kernel_modu2_M_3_reg_135, "fft_kernel_modu2_M_3_reg_135");
    sc_trace(mVcdFile, StgValue_28_imag380_fu_70_ap_start, "StgValue_28_imag380_fu_70_ap_start");
    sc_trace(mVcdFile, StgValue_28_imag380_fu_70_ap_done, "StgValue_28_imag380_fu_70_ap_done");
    sc_trace(mVcdFile, StgValue_28_imag380_fu_70_ap_idle, "StgValue_28_imag380_fu_70_ap_idle");
    sc_trace(mVcdFile, StgValue_28_imag380_fu_70_ap_ready, "StgValue_28_imag380_fu_70_ap_ready");
    sc_trace(mVcdFile, StgValue_28_imag380_fu_70_complex_float_M_imag_din, "StgValue_28_imag380_fu_70_complex_float_M_imag_din");
    sc_trace(mVcdFile, StgValue_28_imag380_fu_70_complex_float_M_imag_write, "StgValue_28_imag380_fu_70_complex_float_M_imag_write");
    sc_trace(mVcdFile, StgValue_33_real379_fu_77_ap_start, "StgValue_33_real379_fu_77_ap_start");
    sc_trace(mVcdFile, StgValue_33_real379_fu_77_ap_done, "StgValue_33_real379_fu_77_ap_done");
    sc_trace(mVcdFile, StgValue_33_real379_fu_77_ap_idle, "StgValue_33_real379_fu_77_ap_idle");
    sc_trace(mVcdFile, StgValue_33_real379_fu_77_ap_ready, "StgValue_33_real379_fu_77_ap_ready");
    sc_trace(mVcdFile, StgValue_33_real379_fu_77_complex_float_M_real_din, "StgValue_33_real379_fu_77_complex_float_M_real_din");
    sc_trace(mVcdFile, StgValue_33_real379_fu_77_complex_float_M_real_write, "StgValue_33_real379_fu_77_complex_float_M_real_write");
    sc_trace(mVcdFile, r_reg_48, "r_reg_48");
    sc_trace(mVcdFile, c_reg_59, "c_reg_59");
    sc_trace(mVcdFile, exitcond1_fu_90_p2, "exitcond1_fu_90_p2");
    sc_trace(mVcdFile, grp_fu_84_p2, "grp_fu_84_p2");
    sc_trace(mVcdFile, grp_fu_84_ce, "grp_fu_84_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

matrix_plus_SNR::~matrix_plus_SNR() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete StgValue_28_imag380_fu_70;
    delete StgValue_33_real379_fu_77;
    delete WienerDeblur_faddibs_U136;
}

void matrix_plus_SNR::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_0;
}

void matrix_plus_SNR::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_90_p2.read()))) {
        c_reg_59 = ap_const_lv9_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                esl_seteq<1,1,1>(StgValue_33_real379_fu_77_complex_float_M_real_blk_n.read(), ap_const_logic_1))) {
        c_reg_59 = c_1_reg_125.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !((esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, fft_kernel_modu2_M_s_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, fft_kernel_modu2_M_1_empty_n.read()))) && 
         esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_1))) {
        r_reg_48 = r_1_reg_117.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        r_reg_48 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !((esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, fft_kernel_modu2_M_s_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, fft_kernel_modu2_M_1_empty_n.read()))))) {
        c_1_reg_125 = c_1_fu_108_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0) && !((esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, fft_kernel_modu2_M_s_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, fft_kernel_modu2_M_1_empty_n.read()))))) {
        fft_kernel_modu2_M_2_reg_130 = fft_kernel_modu2_M_s_dout.read();
        fft_kernel_modu2_M_3_reg_135 = fft_kernel_modu2_M_1_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        r_1_reg_117 = r_1_fu_96_p2.read();
    }
}

void matrix_plus_SNR::thread_G1_M_imag_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        G1_M_imag_blk_n = StgValue_28_imag380_fu_70_complex_float_M_imag_blk_n.read();
    } else {
        G1_M_imag_blk_n = ap_const_logic_1;
    }
}

void matrix_plus_SNR::thread_G1_M_imag_din() {
    G1_M_imag_din = StgValue_28_imag380_fu_70_complex_float_M_imag_din.read();
}

void matrix_plus_SNR::thread_G1_M_imag_write() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        G1_M_imag_write = StgValue_28_imag380_fu_70_complex_float_M_imag_write.read();
    } else {
        G1_M_imag_write = ap_const_logic_0;
    }
}

void matrix_plus_SNR::thread_G1_M_real_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        G1_M_real_blk_n = StgValue_33_real379_fu_77_complex_float_M_real_blk_n.read();
    } else {
        G1_M_real_blk_n = ap_const_logic_1;
    }
}

void matrix_plus_SNR::thread_G1_M_real_din() {
    G1_M_real_din = StgValue_33_real379_fu_77_complex_float_M_real_din.read();
}

void matrix_plus_SNR::thread_G1_M_real_write() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        G1_M_real_write = StgValue_33_real379_fu_77_complex_float_M_real_write.read();
    } else {
        G1_M_real_write = ap_const_logic_0;
    }
}

void matrix_plus_SNR::thread_StgValue_28_imag380_fu_70_ap_start() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        StgValue_28_imag380_fu_70_ap_start = ap_const_logic_1;
    } else {
        StgValue_28_imag380_fu_70_ap_start = ap_const_logic_0;
    }
}

void matrix_plus_SNR::thread_StgValue_33_real379_fu_77_ap_start() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        StgValue_33_real379_fu_77_ap_start = ap_const_logic_1;
    } else {
        StgValue_33_real379_fu_77_ap_start = ap_const_logic_0;
    }
}

void matrix_plus_SNR::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void matrix_plus_SNR::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void matrix_plus_SNR::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void matrix_plus_SNR::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void matrix_plus_SNR::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void matrix_plus_SNR::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void matrix_plus_SNR::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void matrix_plus_SNR::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void matrix_plus_SNR::thread_ap_block_state3() {
    ap_block_state3 = ((esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, fft_kernel_modu2_M_s_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, fft_kernel_modu2_M_1_empty_n.read())));
}

void matrix_plus_SNR::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_90_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void matrix_plus_SNR::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void matrix_plus_SNR::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_90_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void matrix_plus_SNR::thread_c_1_fu_108_p2() {
    c_1_fu_108_p2 = (!c_reg_59.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(c_reg_59.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void matrix_plus_SNR::thread_exitcond1_fu_90_p2() {
    exitcond1_fu_90_p2 = (!r_reg_48.read().is_01() || !ap_const_lv9_100.is_01())? sc_lv<1>(): sc_lv<1>(r_reg_48.read() == ap_const_lv9_100);
}

void matrix_plus_SNR::thread_exitcond_fu_102_p2() {
    exitcond_fu_102_p2 = (!c_reg_59.read().is_01() || !ap_const_lv9_100.is_01())? sc_lv<1>(): sc_lv<1>(c_reg_59.read() == ap_const_lv9_100);
}

void matrix_plus_SNR::thread_fft_kernel_modu2_M_1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0))) {
        fft_kernel_modu2_M_1_blk_n = fft_kernel_modu2_M_1_empty_n.read();
    } else {
        fft_kernel_modu2_M_1_blk_n = ap_const_logic_1;
    }
}

void matrix_plus_SNR::thread_fft_kernel_modu2_M_1_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, fft_kernel_modu2_M_s_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, fft_kernel_modu2_M_1_empty_n.read()))))) {
        fft_kernel_modu2_M_1_read = ap_const_logic_1;
    } else {
        fft_kernel_modu2_M_1_read = ap_const_logic_0;
    }
}

void matrix_plus_SNR::thread_fft_kernel_modu2_M_s_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0))) {
        fft_kernel_modu2_M_s_blk_n = fft_kernel_modu2_M_s_empty_n.read();
    } else {
        fft_kernel_modu2_M_s_blk_n = ap_const_logic_1;
    }
}

void matrix_plus_SNR::thread_fft_kernel_modu2_M_s_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, fft_kernel_modu2_M_s_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, fft_kernel_modu2_M_1_empty_n.read()))))) {
        fft_kernel_modu2_M_s_read = ap_const_logic_1;
    } else {
        fft_kernel_modu2_M_s_read = ap_const_logic_0;
    }
}

void matrix_plus_SNR::thread_grp_fu_84_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(StgValue_33_real379_fu_77_complex_float_M_real_blk_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(StgValue_28_imag380_fu_70_complex_float_M_imag_blk_n.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        grp_fu_84_ce = ap_const_logic_1;
    } else {
        grp_fu_84_ce = ap_const_logic_0;
    }
}

void matrix_plus_SNR::thread_r_1_fu_96_p2() {
    r_1_fu_96_p2 = (!r_reg_48.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(r_reg_48.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void matrix_plus_SNR::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_90_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !((esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, fft_kernel_modu2_M_s_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, fft_kernel_modu2_M_1_empty_n.read()))) && esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0) && !((esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, fft_kernel_modu2_M_s_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_102_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, fft_kernel_modu2_M_1_empty_n.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(StgValue_28_imag380_fu_70_complex_float_M_imag_blk_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(StgValue_33_real379_fu_77_complex_float_M_real_blk_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXX";
            break;
    }
}

}

