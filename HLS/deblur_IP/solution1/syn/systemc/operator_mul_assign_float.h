// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _operator_mul_assign_float_HH_
#define _operator_mul_assign_float_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "WienerDeblur_fsubbkb.h"
#include "WienerDeblur_faddibs.h"
#include "WienerDeblur_fmuljbC.h"

namespace ap_rtl {

struct operator_mul_assign_float : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > p_z_M_real_dout;
    sc_in< sc_logic > p_z_M_real_empty_n;
    sc_out< sc_logic > p_z_M_real_read;
    sc_in< sc_lv<32> > p_z_M_imag_dout;
    sc_in< sc_logic > p_z_M_imag_empty_n;
    sc_out< sc_logic > p_z_M_imag_read;
    sc_in< sc_logic > ap_ce;
    sc_in< sc_lv<32> > complex_float_M_real_read;
    sc_in< sc_lv<32> > complex_float_M_imag_read;
    sc_out< sc_lv<32> > ap_return_0;
    sc_out< sc_lv<32> > ap_return_1;
    sc_out< sc_logic > p_z_M_real_blk_n;
    sc_out< sc_logic > p_z_M_imag_blk_n;


    // Module declarations
    operator_mul_assign_float(sc_module_name name);
    SC_HAS_PROCESS(operator_mul_assign_float);

    ~operator_mul_assign_float();

    sc_trace_file* mVcdFile;

    WienerDeblur_fsubbkb<1,5,32,32,32>* WienerDeblur_fsubbkb_U120;
    WienerDeblur_faddibs<1,5,32,32,32>* WienerDeblur_faddibs_U121;
    WienerDeblur_fmuljbC<1,4,32,32,32>* WienerDeblur_fmuljbC_U122;
    WienerDeblur_fmuljbC<1,4,32,32,32>* WienerDeblur_fmuljbC_U123;
    WienerDeblur_fmuljbC<1,4,32,32,32>* WienerDeblur_fmuljbC_U124;
    WienerDeblur_fmuljbC<1,4,32,32,32>* WienerDeblur_fmuljbC_U125;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter8;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter9;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter8;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter9;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > complex_M_imag_read_reg_84;
    sc_signal< sc_lv<32> > complex_M_real_read_reg_90;
    sc_signal< sc_lv<32> > p_t_real_reg_96;
    sc_signal< sc_lv<32> > p_t_imag_reg_102;
    sc_signal< sc_lv<32> > grp_fu_56_p2;
    sc_signal< sc_lv<32> > tmp_reg_108;
    sc_signal< sc_lv<32> > grp_fu_60_p2;
    sc_signal< sc_lv<32> > tmp_s_reg_113;
    sc_signal< sc_lv<32> > grp_fu_64_p2;
    sc_signal< sc_lv<32> > tmp_2_reg_118;
    sc_signal< sc_lv<32> > grp_fu_68_p2;
    sc_signal< sc_lv<32> > tmp_3_reg_123;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<32> > grp_fu_48_p2;
    sc_signal< sc_lv<32> > grp_fu_52_p2;
    sc_signal< sc_logic > grp_fu_48_ce;
    sc_signal< sc_logic > grp_fu_52_ce;
    sc_signal< sc_logic > grp_fu_56_ce;
    sc_signal< sc_logic > grp_fu_60_ce;
    sc_signal< sc_logic > grp_fu_64_ce;
    sc_signal< sc_logic > grp_fu_68_ce;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to8;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state10_pp0_stage0_iter9();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_block_state5_pp0_stage0_iter4();
    void thread_ap_block_state6_pp0_stage0_iter5();
    void thread_ap_block_state7_pp0_stage0_iter6();
    void thread_ap_block_state8_pp0_stage0_iter7();
    void thread_ap_block_state9_pp0_stage0_iter8();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to8();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_grp_fu_48_ce();
    void thread_grp_fu_52_ce();
    void thread_grp_fu_56_ce();
    void thread_grp_fu_60_ce();
    void thread_grp_fu_64_ce();
    void thread_grp_fu_68_ce();
    void thread_p_z_M_imag_blk_n();
    void thread_p_z_M_imag_read();
    void thread_p_z_M_real_blk_n();
    void thread_p_z_M_real_read();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
