// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "operator_div_float.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic operator_div_float::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic operator_div_float::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> operator_div_float::ap_ST_fsm_state1 = "1";
const sc_lv<3> operator_div_float::ap_ST_fsm_state2 = "10";
const sc_lv<3> operator_div_float::ap_ST_fsm_state3 = "100";
const sc_lv<32> operator_div_float::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> operator_div_float::ap_const_lv32_1 = "1";
const sc_lv<32> operator_div_float::ap_const_lv32_2 = "10";
const bool operator_div_float::ap_const_boolean_1 = true;

operator_div_float::operator_div_float(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_operator_div_assign_float_fu_34 = new operator_div_assign_float("grp_operator_div_assign_float_fu_34");
    grp_operator_div_assign_float_fu_34->ap_clk(ap_clk);
    grp_operator_div_assign_float_fu_34->ap_rst(ap_rst);
    grp_operator_div_assign_float_fu_34->ap_start(grp_operator_div_assign_float_fu_34_ap_start);
    grp_operator_div_assign_float_fu_34->ap_done(grp_operator_div_assign_float_fu_34_ap_done);
    grp_operator_div_assign_float_fu_34->ap_idle(grp_operator_div_assign_float_fu_34_ap_idle);
    grp_operator_div_assign_float_fu_34->ap_ready(grp_operator_div_assign_float_fu_34_ap_ready);
    grp_operator_div_assign_float_fu_34->complex_float_M_real_read(p_r_M_real_reg_44);
    grp_operator_div_assign_float_fu_34->complex_float_M_imag_read(p_r_M_imag_reg_49);
    grp_operator_div_assign_float_fu_34->p_z_M_real_dout(p_y_M_real_dout);
    grp_operator_div_assign_float_fu_34->p_z_M_real_empty_n(p_y_M_real_empty_n);
    grp_operator_div_assign_float_fu_34->p_z_M_real_read(grp_operator_div_assign_float_fu_34_p_z_M_real_read);
    grp_operator_div_assign_float_fu_34->p_z_M_imag_dout(p_y_M_imag_dout);
    grp_operator_div_assign_float_fu_34->p_z_M_imag_empty_n(p_y_M_imag_empty_n);
    grp_operator_div_assign_float_fu_34->p_z_M_imag_read(grp_operator_div_assign_float_fu_34_p_z_M_imag_read);
    grp_operator_div_assign_float_fu_34->ap_return_0(grp_operator_div_assign_float_fu_34_ap_return_0);
    grp_operator_div_assign_float_fu_34->ap_return_1(grp_operator_div_assign_float_fu_34_ap_return_1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( p_x_M_real_empty_n );
    sensitive << ( p_x_M_imag_empty_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_operator_div_assign_float_fu_34_ap_done );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_operator_div_assign_float_fu_34_ap_done );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( grp_operator_div_assign_float_fu_34_ap_done );
    sensitive << ( grp_operator_div_assign_float_fu_34_ap_return_0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( grp_operator_div_assign_float_fu_34_ap_done );
    sensitive << ( grp_operator_div_assign_float_fu_34_ap_return_1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_grp_operator_div_assign_float_fu_34_ap_start);
    sensitive << ( grp_operator_div_assign_float_fu_34_ap_start_reg );

    SC_METHOD(thread_p_x_M_imag_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_x_M_imag_empty_n );

    SC_METHOD(thread_p_x_M_imag_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_x_M_real_empty_n );
    sensitive << ( p_x_M_imag_empty_n );

    SC_METHOD(thread_p_x_M_real_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_x_M_real_empty_n );

    SC_METHOD(thread_p_x_M_real_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_x_M_real_empty_n );
    sensitive << ( p_x_M_imag_empty_n );

    SC_METHOD(thread_p_y_M_imag_read);
    sensitive << ( grp_operator_div_assign_float_fu_34_p_z_M_imag_read );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_p_y_M_real_read);
    sensitive << ( grp_operator_div_assign_float_fu_34_p_z_M_real_read );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_x_M_real_empty_n );
    sensitive << ( p_x_M_imag_empty_n );
    sensitive << ( grp_operator_div_assign_float_fu_34_ap_done );
    sensitive << ( ap_CS_fsm_state3 );

    ap_CS_fsm = "001";
    grp_operator_div_assign_float_fu_34_ap_start_reg = SC_LOGIC_0;
    ap_return_0_preg = "00000000000000000000000000000000";
    ap_return_1_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "operator_div_float_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, p_x_M_real_dout, "(port)p_x_M_real_dout");
    sc_trace(mVcdFile, p_x_M_real_empty_n, "(port)p_x_M_real_empty_n");
    sc_trace(mVcdFile, p_x_M_real_read, "(port)p_x_M_real_read");
    sc_trace(mVcdFile, p_x_M_imag_dout, "(port)p_x_M_imag_dout");
    sc_trace(mVcdFile, p_x_M_imag_empty_n, "(port)p_x_M_imag_empty_n");
    sc_trace(mVcdFile, p_x_M_imag_read, "(port)p_x_M_imag_read");
    sc_trace(mVcdFile, p_y_M_real_dout, "(port)p_y_M_real_dout");
    sc_trace(mVcdFile, p_y_M_real_empty_n, "(port)p_y_M_real_empty_n");
    sc_trace(mVcdFile, p_y_M_real_read, "(port)p_y_M_real_read");
    sc_trace(mVcdFile, p_y_M_imag_dout, "(port)p_y_M_imag_dout");
    sc_trace(mVcdFile, p_y_M_imag_empty_n, "(port)p_y_M_imag_empty_n");
    sc_trace(mVcdFile, p_y_M_imag_read, "(port)p_y_M_imag_read");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, p_x_M_real_blk_n, "p_x_M_real_blk_n");
    sc_trace(mVcdFile, p_x_M_imag_blk_n, "p_x_M_imag_blk_n");
    sc_trace(mVcdFile, p_r_M_real_reg_44, "p_r_M_real_reg_44");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, p_r_M_imag_reg_49, "p_r_M_imag_reg_49");
    sc_trace(mVcdFile, grp_operator_div_assign_float_fu_34_ap_start, "grp_operator_div_assign_float_fu_34_ap_start");
    sc_trace(mVcdFile, grp_operator_div_assign_float_fu_34_ap_done, "grp_operator_div_assign_float_fu_34_ap_done");
    sc_trace(mVcdFile, grp_operator_div_assign_float_fu_34_ap_idle, "grp_operator_div_assign_float_fu_34_ap_idle");
    sc_trace(mVcdFile, grp_operator_div_assign_float_fu_34_ap_ready, "grp_operator_div_assign_float_fu_34_ap_ready");
    sc_trace(mVcdFile, grp_operator_div_assign_float_fu_34_p_z_M_real_read, "grp_operator_div_assign_float_fu_34_p_z_M_real_read");
    sc_trace(mVcdFile, grp_operator_div_assign_float_fu_34_p_z_M_imag_read, "grp_operator_div_assign_float_fu_34_p_z_M_imag_read");
    sc_trace(mVcdFile, grp_operator_div_assign_float_fu_34_ap_return_0, "grp_operator_div_assign_float_fu_34_ap_return_0");
    sc_trace(mVcdFile, grp_operator_div_assign_float_fu_34_ap_return_1, "grp_operator_div_assign_float_fu_34_ap_return_1");
    sc_trace(mVcdFile, grp_operator_div_assign_float_fu_34_ap_start_reg, "grp_operator_div_assign_float_fu_34_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

operator_div_float::~operator_div_float() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_operator_div_assign_float_fu_34;
}

void operator_div_float::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
             esl_seteq<1,1,1>(grp_operator_div_assign_float_fu_34_ap_done.read(), ap_const_logic_1))) {
            ap_return_0_preg = grp_operator_div_assign_float_fu_34_ap_return_0.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
             esl_seteq<1,1,1>(grp_operator_div_assign_float_fu_34_ap_done.read(), ap_const_logic_1))) {
            ap_return_1_preg = grp_operator_div_assign_float_fu_34_ap_return_1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_operator_div_assign_float_fu_34_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            grp_operator_div_assign_float_fu_34_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_operator_div_assign_float_fu_34_ap_ready.read())) {
            grp_operator_div_assign_float_fu_34_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_x_M_real_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_x_M_imag_empty_n.read())))) {
        p_r_M_imag_reg_49 = p_x_M_imag_dout.read();
        p_r_M_real_reg_44 = p_x_M_real_dout.read();
    }
}

void operator_div_float::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void operator_div_float::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void operator_div_float::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void operator_div_float::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_x_M_real_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_x_M_imag_empty_n.read()));
}

void operator_div_float::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(grp_operator_div_assign_float_fu_34_ap_done.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void operator_div_float::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void operator_div_float::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(grp_operator_div_assign_float_fu_34_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void operator_div_float::thread_ap_return_0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(grp_operator_div_assign_float_fu_34_ap_done.read(), ap_const_logic_1))) {
        ap_return_0 = grp_operator_div_assign_float_fu_34_ap_return_0.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void operator_div_float::thread_ap_return_1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(grp_operator_div_assign_float_fu_34_ap_done.read(), ap_const_logic_1))) {
        ap_return_1 = grp_operator_div_assign_float_fu_34_ap_return_1.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void operator_div_float::thread_grp_operator_div_assign_float_fu_34_ap_start() {
    grp_operator_div_assign_float_fu_34_ap_start = grp_operator_div_assign_float_fu_34_ap_start_reg.read();
}

void operator_div_float::thread_p_x_M_imag_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_x_M_imag_blk_n = p_x_M_imag_empty_n.read();
    } else {
        p_x_M_imag_blk_n = ap_const_logic_1;
    }
}

void operator_div_float::thread_p_x_M_imag_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_x_M_real_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_x_M_imag_empty_n.read())))) {
        p_x_M_imag_read = ap_const_logic_1;
    } else {
        p_x_M_imag_read = ap_const_logic_0;
    }
}

void operator_div_float::thread_p_x_M_real_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_x_M_real_blk_n = p_x_M_real_empty_n.read();
    } else {
        p_x_M_real_blk_n = ap_const_logic_1;
    }
}

void operator_div_float::thread_p_x_M_real_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_x_M_real_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_x_M_imag_empty_n.read())))) {
        p_x_M_real_read = ap_const_logic_1;
    } else {
        p_x_M_real_read = ap_const_logic_0;
    }
}

void operator_div_float::thread_p_y_M_imag_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        p_y_M_imag_read = grp_operator_div_assign_float_fu_34_p_z_M_imag_read.read();
    } else {
        p_y_M_imag_read = ap_const_logic_0;
    }
}

void operator_div_float::thread_p_y_M_real_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        p_y_M_real_read = grp_operator_div_assign_float_fu_34_p_z_M_real_read.read();
    } else {
        p_y_M_real_read = ap_const_logic_0;
    }
}

void operator_div_float::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_x_M_real_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_x_M_imag_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(grp_operator_div_assign_float_fu_34_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

