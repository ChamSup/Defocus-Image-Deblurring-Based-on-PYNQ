// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "matrix_div.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic matrix_div::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic matrix_div::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> matrix_div::ap_ST_fsm_state1 = "1";
const sc_lv<5> matrix_div::ap_ST_fsm_state2 = "10";
const sc_lv<5> matrix_div::ap_ST_fsm_state3 = "100";
const sc_lv<5> matrix_div::ap_ST_fsm_state4 = "1000";
const sc_lv<5> matrix_div::ap_ST_fsm_state5 = "10000";
const sc_lv<32> matrix_div::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> matrix_div::ap_const_lv32_4 = "100";
const sc_lv<32> matrix_div::ap_const_lv32_1 = "1";
const sc_lv<32> matrix_div::ap_const_lv32_2 = "10";
const sc_lv<32> matrix_div::ap_const_lv32_3 = "11";
const sc_lv<9> matrix_div::ap_const_lv9_0 = "000000000";
const sc_lv<1> matrix_div::ap_const_lv1_1 = "1";
const sc_lv<1> matrix_div::ap_const_lv1_0 = "0";
const sc_lv<9> matrix_div::ap_const_lv9_100 = "100000000";
const sc_lv<9> matrix_div::ap_const_lv9_1 = "1";
const bool matrix_div::ap_const_boolean_1 = true;

matrix_div::matrix_div(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_operator_div_float_fu_72 = new operator_div_float("grp_operator_div_float_fu_72");
    grp_operator_div_float_fu_72->ap_clk(ap_clk);
    grp_operator_div_float_fu_72->ap_rst(ap_rst);
    grp_operator_div_float_fu_72->ap_start(grp_operator_div_float_fu_72_ap_start);
    grp_operator_div_float_fu_72->ap_done(grp_operator_div_float_fu_72_ap_done);
    grp_operator_div_float_fu_72->ap_idle(grp_operator_div_float_fu_72_ap_idle);
    grp_operator_div_float_fu_72->ap_ready(grp_operator_div_float_fu_72_ap_ready);
    grp_operator_div_float_fu_72->p_x_M_real_dout(G1_M_real_dout);
    grp_operator_div_float_fu_72->p_x_M_real_empty_n(G1_M_real_empty_n);
    grp_operator_div_float_fu_72->p_x_M_real_read(grp_operator_div_float_fu_72_p_x_M_real_read);
    grp_operator_div_float_fu_72->p_x_M_imag_dout(G1_M_imag_dout);
    grp_operator_div_float_fu_72->p_x_M_imag_empty_n(G1_M_imag_empty_n);
    grp_operator_div_float_fu_72->p_x_M_imag_read(grp_operator_div_float_fu_72_p_x_M_imag_read);
    grp_operator_div_float_fu_72->p_y_M_real_dout(fft_kernel_M_real_dout);
    grp_operator_div_float_fu_72->p_y_M_real_empty_n(fft_kernel_M_real_empty_n);
    grp_operator_div_float_fu_72->p_y_M_real_read(grp_operator_div_float_fu_72_p_y_M_real_read);
    grp_operator_div_float_fu_72->p_y_M_imag_dout(fft_kernel_M_imag_dout);
    grp_operator_div_float_fu_72->p_y_M_imag_empty_n(fft_kernel_M_imag_empty_n);
    grp_operator_div_float_fu_72->p_y_M_imag_read(grp_operator_div_float_fu_72_p_y_M_imag_read);
    grp_operator_div_float_fu_72->ap_return_0(grp_operator_div_float_fu_72_ap_return_0);
    grp_operator_div_float_fu_72->ap_return_1(grp_operator_div_float_fu_72_ap_return_1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_G1_M_imag_read);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_operator_div_float_fu_72_p_x_M_imag_read );

    SC_METHOD(thread_G1_M_real_read);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_operator_div_float_fu_72_p_x_M_real_read );

    SC_METHOD(thread_G_M_imag_blk_n);
    sensitive << ( G_M_imag_full_n );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_G_M_imag_din);
    sensitive << ( G_M_real_full_n );
    sensitive << ( G_M_imag_full_n );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( p_1_reg_137 );

    SC_METHOD(thread_G_M_imag_write);
    sensitive << ( G_M_real_full_n );
    sensitive << ( G_M_imag_full_n );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_G_M_real_blk_n);
    sensitive << ( G_M_real_full_n );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_G_M_real_din);
    sensitive << ( G_M_real_full_n );
    sensitive << ( G_M_imag_full_n );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( p_0_reg_132 );

    SC_METHOD(thread_G_M_real_write);
    sensitive << ( G_M_real_full_n );
    sensitive << ( G_M_imag_full_n );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state5);
    sensitive << ( G_M_real_full_n );
    sensitive << ( G_M_imag_full_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_84_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_84_p2 );

    SC_METHOD(thread_c_3_fu_102_p2);
    sensitive << ( c_reg_61 );

    SC_METHOD(thread_exitcond1_fu_84_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( r_reg_50 );

    SC_METHOD(thread_exitcond_fu_96_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( c_reg_61 );

    SC_METHOD(thread_fft_kernel_M_imag_read);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_operator_div_float_fu_72_p_y_M_imag_read );

    SC_METHOD(thread_fft_kernel_M_real_read);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_operator_div_float_fu_72_p_y_M_real_read );

    SC_METHOD(thread_grp_operator_div_float_fu_72_ap_start);
    sensitive << ( grp_operator_div_float_fu_72_ap_start_reg );

    SC_METHOD(thread_r_3_fu_90_p2);
    sensitive << ( r_reg_50 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( G_M_real_full_n );
    sensitive << ( G_M_imag_full_n );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_operator_div_float_fu_72_ap_done );
    sensitive << ( exitcond_fu_96_p2 );
    sensitive << ( exitcond1_fu_84_p2 );

    ap_CS_fsm = "00001";
    grp_operator_div_float_fu_72_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "matrix_div_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, G1_M_real_dout, "(port)G1_M_real_dout");
    sc_trace(mVcdFile, G1_M_real_empty_n, "(port)G1_M_real_empty_n");
    sc_trace(mVcdFile, G1_M_real_read, "(port)G1_M_real_read");
    sc_trace(mVcdFile, G1_M_imag_dout, "(port)G1_M_imag_dout");
    sc_trace(mVcdFile, G1_M_imag_empty_n, "(port)G1_M_imag_empty_n");
    sc_trace(mVcdFile, G1_M_imag_read, "(port)G1_M_imag_read");
    sc_trace(mVcdFile, fft_kernel_M_real_dout, "(port)fft_kernel_M_real_dout");
    sc_trace(mVcdFile, fft_kernel_M_real_empty_n, "(port)fft_kernel_M_real_empty_n");
    sc_trace(mVcdFile, fft_kernel_M_real_read, "(port)fft_kernel_M_real_read");
    sc_trace(mVcdFile, fft_kernel_M_imag_dout, "(port)fft_kernel_M_imag_dout");
    sc_trace(mVcdFile, fft_kernel_M_imag_empty_n, "(port)fft_kernel_M_imag_empty_n");
    sc_trace(mVcdFile, fft_kernel_M_imag_read, "(port)fft_kernel_M_imag_read");
    sc_trace(mVcdFile, G_M_real_din, "(port)G_M_real_din");
    sc_trace(mVcdFile, G_M_real_full_n, "(port)G_M_real_full_n");
    sc_trace(mVcdFile, G_M_real_write, "(port)G_M_real_write");
    sc_trace(mVcdFile, G_M_imag_din, "(port)G_M_imag_din");
    sc_trace(mVcdFile, G_M_imag_full_n, "(port)G_M_imag_full_n");
    sc_trace(mVcdFile, G_M_imag_write, "(port)G_M_imag_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, G_M_real_blk_n, "G_M_real_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, G_M_imag_blk_n, "G_M_imag_blk_n");
    sc_trace(mVcdFile, r_3_fu_90_p2, "r_3_fu_90_p2");
    sc_trace(mVcdFile, r_3_reg_119, "r_3_reg_119");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, c_3_fu_102_p2, "c_3_fu_102_p2");
    sc_trace(mVcdFile, c_3_reg_127, "c_3_reg_127");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, p_0_reg_132, "p_0_reg_132");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_operator_div_float_fu_72_ap_ready, "grp_operator_div_float_fu_72_ap_ready");
    sc_trace(mVcdFile, grp_operator_div_float_fu_72_ap_done, "grp_operator_div_float_fu_72_ap_done");
    sc_trace(mVcdFile, p_1_reg_137, "p_1_reg_137");
    sc_trace(mVcdFile, grp_operator_div_float_fu_72_ap_start, "grp_operator_div_float_fu_72_ap_start");
    sc_trace(mVcdFile, grp_operator_div_float_fu_72_ap_idle, "grp_operator_div_float_fu_72_ap_idle");
    sc_trace(mVcdFile, grp_operator_div_float_fu_72_p_x_M_real_read, "grp_operator_div_float_fu_72_p_x_M_real_read");
    sc_trace(mVcdFile, grp_operator_div_float_fu_72_p_x_M_imag_read, "grp_operator_div_float_fu_72_p_x_M_imag_read");
    sc_trace(mVcdFile, grp_operator_div_float_fu_72_p_y_M_real_read, "grp_operator_div_float_fu_72_p_y_M_real_read");
    sc_trace(mVcdFile, grp_operator_div_float_fu_72_p_y_M_imag_read, "grp_operator_div_float_fu_72_p_y_M_imag_read");
    sc_trace(mVcdFile, grp_operator_div_float_fu_72_ap_return_0, "grp_operator_div_float_fu_72_ap_return_0");
    sc_trace(mVcdFile, grp_operator_div_float_fu_72_ap_return_1, "grp_operator_div_float_fu_72_ap_return_1");
    sc_trace(mVcdFile, r_reg_50, "r_reg_50");
    sc_trace(mVcdFile, exitcond_fu_96_p2, "exitcond_fu_96_p2");
    sc_trace(mVcdFile, c_reg_61, "c_reg_61");
    sc_trace(mVcdFile, ap_block_state5, "ap_block_state5");
    sc_trace(mVcdFile, exitcond1_fu_84_p2, "exitcond1_fu_84_p2");
    sc_trace(mVcdFile, grp_operator_div_float_fu_72_ap_start_reg, "grp_operator_div_float_fu_72_ap_start_reg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

matrix_div::~matrix_div() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_operator_div_float_fu_72;
}

void matrix_div::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_84_p2.read(), ap_const_lv1_0))) {
        c_reg_61 = ap_const_lv9_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, G_M_real_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, G_M_imag_full_n.read())))) {
        c_reg_61 = c_3_reg_127.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_operator_div_float_fu_72_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
             esl_seteq<1,1,1>(exitcond_fu_96_p2.read(), ap_const_lv1_0))) {
            grp_operator_div_float_fu_72_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_operator_div_float_fu_72_ap_ready.read())) {
            grp_operator_div_float_fu_72_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_96_p2.read(), ap_const_lv1_1))) {
        r_reg_50 = r_3_reg_119.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        r_reg_50 = ap_const_lv9_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        c_3_reg_127 = c_3_fu_102_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_operator_div_float_fu_72_ap_done.read(), ap_const_logic_1))) {
        p_0_reg_132 = grp_operator_div_float_fu_72_ap_return_0.read();
        p_1_reg_137 = grp_operator_div_float_fu_72_ap_return_1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        r_3_reg_119 = r_3_fu_90_p2.read();
    }
}

void matrix_div::thread_G1_M_imag_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        G1_M_imag_read = grp_operator_div_float_fu_72_p_x_M_imag_read.read();
    } else {
        G1_M_imag_read = ap_const_logic_0;
    }
}

void matrix_div::thread_G1_M_real_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        G1_M_real_read = grp_operator_div_float_fu_72_p_x_M_real_read.read();
    } else {
        G1_M_real_read = ap_const_logic_0;
    }
}

void matrix_div::thread_G_M_imag_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        G_M_imag_blk_n = G_M_imag_full_n.read();
    } else {
        G_M_imag_blk_n = ap_const_logic_1;
    }
}

void matrix_div::thread_G_M_imag_din() {
    G_M_imag_din = p_1_reg_137.read();
}

void matrix_div::thread_G_M_imag_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, G_M_real_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, G_M_imag_full_n.read())))) {
        G_M_imag_write = ap_const_logic_1;
    } else {
        G_M_imag_write = ap_const_logic_0;
    }
}

void matrix_div::thread_G_M_real_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        G_M_real_blk_n = G_M_real_full_n.read();
    } else {
        G_M_real_blk_n = ap_const_logic_1;
    }
}

void matrix_div::thread_G_M_real_din() {
    G_M_real_din = p_0_reg_132.read();
}

void matrix_div::thread_G_M_real_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, G_M_real_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, G_M_imag_full_n.read())))) {
        G_M_real_write = ap_const_logic_1;
    } else {
        G_M_real_write = ap_const_logic_0;
    }
}

void matrix_div::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void matrix_div::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void matrix_div::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void matrix_div::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void matrix_div::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void matrix_div::thread_ap_block_state5() {
    ap_block_state5 = (esl_seteq<1,1,1>(ap_const_logic_0, G_M_real_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, G_M_imag_full_n.read()));
}

void matrix_div::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_84_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void matrix_div::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void matrix_div::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_84_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void matrix_div::thread_c_3_fu_102_p2() {
    c_3_fu_102_p2 = (!c_reg_61.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(c_reg_61.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void matrix_div::thread_exitcond1_fu_84_p2() {
    exitcond1_fu_84_p2 = (!r_reg_50.read().is_01() || !ap_const_lv9_100.is_01())? sc_lv<1>(): sc_lv<1>(r_reg_50.read() == ap_const_lv9_100);
}

void matrix_div::thread_exitcond_fu_96_p2() {
    exitcond_fu_96_p2 = (!c_reg_61.read().is_01() || !ap_const_lv9_100.is_01())? sc_lv<1>(): sc_lv<1>(c_reg_61.read() == ap_const_lv9_100);
}

void matrix_div::thread_fft_kernel_M_imag_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        fft_kernel_M_imag_read = grp_operator_div_float_fu_72_p_y_M_imag_read.read();
    } else {
        fft_kernel_M_imag_read = ap_const_logic_0;
    }
}

void matrix_div::thread_fft_kernel_M_real_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        fft_kernel_M_real_read = grp_operator_div_float_fu_72_p_y_M_real_read.read();
    } else {
        fft_kernel_M_real_read = ap_const_logic_0;
    }
}

void matrix_div::thread_grp_operator_div_float_fu_72_ap_start() {
    grp_operator_div_float_fu_72_ap_start = grp_operator_div_float_fu_72_ap_start_reg.read();
}

void matrix_div::thread_r_3_fu_90_p2() {
    r_3_fu_90_p2 = (!r_reg_50.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(r_reg_50.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void matrix_div::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_84_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_fu_96_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_operator_div_float_fu_72_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, G_M_real_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, G_M_imag_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

