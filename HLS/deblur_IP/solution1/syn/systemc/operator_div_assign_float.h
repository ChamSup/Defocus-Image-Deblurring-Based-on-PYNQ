// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _operator_div_assign_float_HH_
#define _operator_div_assign_float_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "WienerDeblur_faddibs.h"
#include "WienerDeblur_fsubbkb.h"
#include "WienerDeblur_fmuljbC.h"
#include "WienerDeblur_fdivNgs.h"

namespace ap_rtl {

struct operator_div_assign_float : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > complex_float_M_real_read;
    sc_in< sc_lv<32> > complex_float_M_imag_read;
    sc_in< sc_lv<32> > p_z_M_real_dout;
    sc_in< sc_logic > p_z_M_real_empty_n;
    sc_out< sc_logic > p_z_M_real_read;
    sc_in< sc_lv<32> > p_z_M_imag_dout;
    sc_in< sc_logic > p_z_M_imag_empty_n;
    sc_out< sc_logic > p_z_M_imag_read;
    sc_out< sc_lv<32> > ap_return_0;
    sc_out< sc_lv<32> > ap_return_1;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    operator_div_assign_float(sc_module_name name);
    SC_HAS_PROCESS(operator_div_assign_float);

    ~operator_div_assign_float();

    sc_trace_file* mVcdFile;

    WienerDeblur_faddibs<1,5,32,32,32>* WienerDeblur_faddibs_U141;
    WienerDeblur_faddibs<1,5,32,32,32>* WienerDeblur_faddibs_U142;
    WienerDeblur_fsubbkb<1,5,32,32,32>* WienerDeblur_fsubbkb_U143;
    WienerDeblur_fmuljbC<1,4,32,32,32>* WienerDeblur_fmuljbC_U144;
    WienerDeblur_fmuljbC<1,4,32,32,32>* WienerDeblur_fmuljbC_U145;
    WienerDeblur_fmuljbC<1,4,32,32,32>* WienerDeblur_fmuljbC_U146;
    WienerDeblur_fmuljbC<1,4,32,32,32>* WienerDeblur_fmuljbC_U147;
    WienerDeblur_fmuljbC<1,4,32,32,32>* WienerDeblur_fmuljbC_U148;
    WienerDeblur_fmuljbC<1,4,32,32,32>* WienerDeblur_fmuljbC_U149;
    WienerDeblur_fdivNgs<1,16,32,32,32>* WienerDeblur_fdivNgs_U150;
    WienerDeblur_fdivNgs<1,16,32,32,32>* WienerDeblur_fdivNgs_U151;
    sc_signal< sc_lv<26> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > p_z_M_real_blk_n;
    sc_signal< sc_logic > p_z_M_imag_blk_n;
    sc_signal< sc_lv<32> > p_t_real_reg_108;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > p_t_imag_reg_116;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > grp_fu_60_p2;
    sc_signal< sc_lv<32> > tmp_reg_136;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > grp_fu_65_p2;
    sc_signal< sc_lv<32> > tmp_1_reg_141;
    sc_signal< sc_lv<32> > grp_fu_70_p2;
    sc_signal< sc_lv<32> > tmp_3_reg_146;
    sc_signal< sc_lv<32> > grp_fu_74_p2;
    sc_signal< sc_lv<32> > tmp_4_reg_151;
    sc_signal< sc_lv<32> > grp_fu_78_p2;
    sc_signal< sc_lv<32> > tmp_6_reg_156;
    sc_signal< sc_lv<32> > grp_fu_83_p2;
    sc_signal< sc_lv<32> > tmp_7_reg_161;
    sc_signal< sc_lv<32> > grp_fu_48_p2;
    sc_signal< sc_lv<32> > tmp_2_reg_166;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<32> > grp_fu_52_p2;
    sc_signal< sc_lv<32> > tmp_5_reg_171;
    sc_signal< sc_lv<32> > grp_fu_56_p2;
    sc_signal< sc_lv<32> > tmp_8_reg_177;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<32> > grp_fu_88_p2;
    sc_signal< sc_logic > ap_CS_fsm_state26;
    sc_signal< sc_lv<32> > grp_fu_92_p2;
    sc_signal< sc_lv<32> > ap_return_0_preg;
    sc_signal< sc_lv<32> > ap_return_1_preg;
    sc_signal< sc_lv<26> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<26> ap_ST_fsm_state1;
    static const sc_lv<26> ap_ST_fsm_state2;
    static const sc_lv<26> ap_ST_fsm_state3;
    static const sc_lv<26> ap_ST_fsm_state4;
    static const sc_lv<26> ap_ST_fsm_state5;
    static const sc_lv<26> ap_ST_fsm_state6;
    static const sc_lv<26> ap_ST_fsm_state7;
    static const sc_lv<26> ap_ST_fsm_state8;
    static const sc_lv<26> ap_ST_fsm_state9;
    static const sc_lv<26> ap_ST_fsm_state10;
    static const sc_lv<26> ap_ST_fsm_state11;
    static const sc_lv<26> ap_ST_fsm_state12;
    static const sc_lv<26> ap_ST_fsm_state13;
    static const sc_lv<26> ap_ST_fsm_state14;
    static const sc_lv<26> ap_ST_fsm_state15;
    static const sc_lv<26> ap_ST_fsm_state16;
    static const sc_lv<26> ap_ST_fsm_state17;
    static const sc_lv<26> ap_ST_fsm_state18;
    static const sc_lv<26> ap_ST_fsm_state19;
    static const sc_lv<26> ap_ST_fsm_state20;
    static const sc_lv<26> ap_ST_fsm_state21;
    static const sc_lv<26> ap_ST_fsm_state22;
    static const sc_lv<26> ap_ST_fsm_state23;
    static const sc_lv<26> ap_ST_fsm_state24;
    static const sc_lv<26> ap_ST_fsm_state25;
    static const sc_lv<26> ap_ST_fsm_state26;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_19;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state26();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_p_z_M_imag_blk_n();
    void thread_p_z_M_imag_read();
    void thread_p_z_M_real_blk_n();
    void thread_p_z_M_real_read();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
