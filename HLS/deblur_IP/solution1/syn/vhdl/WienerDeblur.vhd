-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity WienerDeblur is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TREADY : OUT STD_LOGIC;
    in_stream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC;
    out_stream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    AXI_LITE_clk : IN STD_LOGIC;
    ap_rst_n_AXI_LITE_clk : IN STD_LOGIC );
end;


architecture behav of WienerDeblur is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "WienerDeblur,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.890000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=3268,HLS_SYN_DSP=233,HLS_SYN_FF=85673,HLS_SYN_LUT=146473,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (100 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (100 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (100 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (100 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (100 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (100 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (100 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (100 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (100 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (100 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (100 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv62_0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3B800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111011100000000000000000000000";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv33_1FFFFFFFF : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111111";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv62_1 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal INPUT_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_data_V_0_vld_in : STD_LOGIC;
    signal INPUT_data_V_0_vld_out : STD_LOGIC;
    signal INPUT_data_V_0_ack_in : STD_LOGIC;
    signal INPUT_data_V_0_ack_out : STD_LOGIC;
    signal INPUT_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_data_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_data_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_data_V_0_sel : STD_LOGIC;
    signal INPUT_data_V_0_load_A : STD_LOGIC;
    signal INPUT_data_V_0_load_B : STD_LOGIC;
    signal INPUT_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_data_V_0_state_cmp_full : STD_LOGIC;
    signal INPUT_last_V_0_vld_in : STD_LOGIC;
    signal INPUT_last_V_0_ack_out : STD_LOGIC;
    signal INPUT_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_data_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_data_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_data_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_data_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_data_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_data_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_data_V_1_sel : STD_LOGIC;
    signal OUTPUT_data_V_1_load_A : STD_LOGIC;
    signal OUTPUT_data_V_1_load_B : STD_LOGIC;
    signal OUTPUT_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_data_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_user_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_user_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_user_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_user_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_user_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_user_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_user_V_1_sel : STD_LOGIC;
    signal OUTPUT_user_V_1_load_A : STD_LOGIC;
    signal OUTPUT_user_V_1_load_B : STD_LOGIC;
    signal OUTPUT_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_user_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_last_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_last_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_last_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_last_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_last_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_last_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_last_V_1_sel : STD_LOGIC;
    signal OUTPUT_last_V_1_load_A : STD_LOGIC;
    signal OUTPUT_last_V_1_load_B : STD_LOGIC;
    signal OUTPUT_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_last_V_1_state_cmp_full : STD_LOGIC;
    signal rows_V : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_V : STD_LOGIC_VECTOR (31 downto 0);
    signal guard_variable_for_W : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_56_reg_2447 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_2857 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal exitcond_flatten_reg_2857_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_n_AXI_LITE_clk_inv : STD_LOGIC;
    signal r_reg_857 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_reg_1110 : STD_LOGIC_VECTOR (61 downto 0);
    signal i_op_assign_12_reg_1121 : STD_LOGIC_VECTOR (31 downto 0);
    signal c12_reg_1132 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1354 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_real379_fu_1320_complex_float_M_real_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal reg_1360 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal middle_M_real_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal middle_M_real_empty_n : STD_LOGIC;
    signal middle_M_real_read : STD_LOGIC;
    signal exitcond3_fu_1585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal middle_M_imag_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal middle_M_imag_empty_n : STD_LOGIC;
    signal middle_M_imag_read : STD_LOGIC;
    signal ap_block_state33 : BOOLEAN;
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal exitcond_fu_1700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state54 : BOOLEAN;
    signal reg_1365 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_M_real_din : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_M_real_full_n : STD_LOGIC;
    signal kernel_M_real_write : STD_LOGIC;
    signal guard_variable_for_W_1_load_fu_1370_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_M_imag_din : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_M_imag_full_n : STD_LOGIC;
    signal kernel_M_imag_write : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal guard_variable_for_W_1_reg_2401 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_sum_fu_1374_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2 : BOOLEAN;
    signal p_sum1_fu_1386_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sum1_reg_2413 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_53_fu_1392_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4 : BOOLEAN;
    signal tmp_54_fu_1398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_1404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_packets_fu_1416_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal col_packets_cast_fu_1429_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal packets_fu_1433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_fu_1442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal src_bw_data_stream_0_din : STD_LOGIC_VECTOR (7 downto 0);
    signal src_bw_data_stream_0_full_n : STD_LOGIC;
    signal src_bw_data_stream_0_write : STD_LOGIC;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal r_4_fu_1447_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_4_reg_2451 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_reg_2456 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state6_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_5_reg_2461 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_2466 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_5_fu_1497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_5_reg_2474 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal c_fu_1508_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_2482 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal src_bw_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src_bw_data_stream_0_empty_n : STD_LOGIC;
    signal src_bw_data_stream_0_read : STD_LOGIC;
    signal exitcond9_fu_1503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state12 : BOOLEAN;
    signal tmp_63_reg_2487 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_1351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_64_reg_2497 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal r_6_fu_1523_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_6_reg_2505 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal c_4_fu_1534_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_4_reg_2513 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal xn1_M_real_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal xn1_M_real_empty_n : STD_LOGIC;
    signal xn1_M_real_read : STD_LOGIC;
    signal exitcond10_fu_1529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xn1_M_imag_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal xn1_M_imag_empty_n : STD_LOGIC;
    signal xn1_M_imag_read : STD_LOGIC;
    signal ap_block_state21 : BOOLEAN;
    signal xn1_M_real_read_reg_2518 : STD_LOGIC_VECTOR (31 downto 0);
    signal xn1_M_imag_read_reg_2523 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_5_fu_1545_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_5_reg_2531 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal out1_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal out1_empty_n : STD_LOGIC;
    signal out1_read : STD_LOGIC;
    signal exitcond11_fu_1540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state25 : BOOLEAN;
    signal tmp_74_fu_1551_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_74_reg_2536 : STD_LOGIC_VECTOR (31 downto 0);
    signal out1_M_real_load_fu_1555_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal out1_M_imag_load_ne_reg_2546 : STD_LOGIC_VECTOR (31 downto 0);
    signal out1_M_imag_load_fu_1569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal c_7_fu_1579_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_7_reg_2559 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal r_7_fu_1591_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_7_reg_2567 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_8_fu_1603_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_8_reg_2575 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal out2_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal out2_empty_n : STD_LOGIC;
    signal out2_read : STD_LOGIC;
    signal exitcond6_fu_1597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state37 : BOOLEAN;
    signal tmp_75_fu_1609_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_reg_2580 : STD_LOGIC_VECTOR (31 downto 0);
    signal out2_M_real_load_fu_1613_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal out2_M_imag_load_ne_reg_2590 : STD_LOGIC_VECTOR (31 downto 0);
    signal out2_M_imag_load_fu_1627_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal r_10_fu_1637_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_10_reg_2603 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal c_6_fu_1649_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_6_reg_2611 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal kernel_M_real_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_M_real_empty_n : STD_LOGIC;
    signal kernel_M_real_read : STD_LOGIC;
    signal exitcond5_fu_1643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_M_imag_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_M_imag_empty_n : STD_LOGIC;
    signal kernel_M_imag_read : STD_LOGIC;
    signal ap_block_state46 : BOOLEAN;
    signal kernel_M_real_read_reg_2616 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_M_imag_read_reg_2621 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_8_fu_1660_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_8_reg_2629 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal out3_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal out3_empty_n : STD_LOGIC;
    signal out3_read : STD_LOGIC;
    signal exitcond14_fu_1655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state50 : BOOLEAN;
    signal tmp_77_fu_1666_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_77_reg_2634 : STD_LOGIC_VECTOR (31 downto 0);
    signal out3_M_imag_load_ne_reg_2639 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_block_state51 : BOOLEAN;
    signal c_9_fu_1694_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_9_reg_2647 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal r_9_fu_1706_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_9_reg_2655 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_14_fu_1717_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_14_reg_2663 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal out4_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal out4_empty_n : STD_LOGIC;
    signal out4_read : STD_LOGIC;
    signal exitcond17_fu_1712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state58 : BOOLEAN;
    signal tmp_80_fu_1723_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_80_reg_2668 : STD_LOGIC_VECTOR (31 downto 0);
    signal out4_M_real_load_fu_1727_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal out4_M_imag_load_ne_reg_2678 : STD_LOGIC_VECTOR (31 downto 0);
    signal out4_M_imag_load_fu_1741_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal r_13_fu_1750_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_13_reg_2691 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal c_13_fu_1761_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_13_reg_2699 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal xk1_M_real_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal xk1_M_real_empty_n : STD_LOGIC;
    signal xk1_M_real_read : STD_LOGIC;
    signal exitcond16_fu_1756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xk1_M_imag_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal xk1_M_imag_empty_n : STD_LOGIC;
    signal xk1_M_imag_read : STD_LOGIC;
    signal ap_block_state79 : BOOLEAN;
    signal xk1_M_real_read_reg_2704 : STD_LOGIC_VECTOR (31 downto 0);
    signal xk1_M_imag_read_reg_2709 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_16_fu_1772_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_16_reg_2717 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal out5_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal out5_empty_n : STD_LOGIC;
    signal out5_read : STD_LOGIC;
    signal exitcond19_fu_1767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state83 : BOOLEAN;
    signal tmp_87_fu_1778_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_reg_2722 : STD_LOGIC_VECTOR (31 downto 0);
    signal out5_M_imag_load_ne_reg_2727 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_block_state84 : BOOLEAN;
    signal c_12_fu_1805_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_12_reg_2735 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal r_16_fu_1816_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_16_reg_2743 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal middle2_M_real_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal middle2_M_real_empty_n : STD_LOGIC;
    signal middle2_M_real_read : STD_LOGIC;
    signal exitcond18_fu_1811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal middle2_M_imag_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal middle2_M_imag_empty_n : STD_LOGIC;
    signal middle2_M_imag_read : STD_LOGIC;
    signal ap_block_state87 : BOOLEAN;
    signal middle2_M_real_read_reg_2748 : STD_LOGIC_VECTOR (31 downto 0);
    signal middle2_M_imag_read_reg_2753 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_18_fu_1827_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_18_reg_2761 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal out6_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal out6_empty_n : STD_LOGIC;
    signal out6_read : STD_LOGIC;
    signal exitcond21_fu_1822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state91 : BOOLEAN;
    signal tmp_112_fu_1833_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_112_reg_2766 : STD_LOGIC_VECTOR (31 downto 0);
    signal out6_M_imag_load_ne_reg_2771 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_block_state92 : BOOLEAN;
    signal exitcond15_fu_1855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal r_15_fu_1860_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_15_reg_2780 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_71_fu_1866_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_fu_1874_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal bound_fu_1886_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal c_17_fu_1897_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_17_reg_2804 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal xk2_M_real_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal xk2_M_real_empty_n : STD_LOGIC;
    signal xk2_M_real_read : STD_LOGIC;
    signal exitcond20_fu_1892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xk2_M_imag_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal xk2_M_imag_empty_n : STD_LOGIC;
    signal xk2_M_imag_read : STD_LOGIC;
    signal ap_block_state95 : BOOLEAN;
    signal p_Result_s_reg_2809 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_8_fu_1925_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_8_reg_2814 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_1939_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_2819 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_fu_1957_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_2824 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_108_fu_2035_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_108_reg_2835 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal tmp_105_fu_2042_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_105_reg_2840 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_flatten_fu_2238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state98_pp1_stage0_iter0 : BOOLEAN;
    signal res_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal res_data_stream_0_V_empty_n : STD_LOGIC;
    signal res_data_stream_0_V_read : STD_LOGIC;
    signal ap_block_state102_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state102_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next_fu_2243_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal indvar_flatten_next_reg_2861 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal c14_mid2_fu_2260_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal c14_mid2_reg_2866 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_87_mid2_v_fu_2285_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_mid2_v_reg_2871 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_user_V_tm_fu_2325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_user_V_tm_reg_2876 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_last_V_tm_fu_2336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_last_V_tm_reg_2881 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_95_reg_2886 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state99_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state103_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_state103_io : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal tmp_96_reg_2891 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state100_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal tmp_99_reg_2896 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp1_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage3 : signal is "none";
    signal ap_block_state101_pp1_stage3_iter0 : BOOLEAN;
    signal ap_block_pp1_stage3_11001 : BOOLEAN;
    signal c_1_fu_2342_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal c_1_reg_2901 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_29_fu_2347_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_block_state8_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state98 : STD_LOGIC;
    signal ap_block_pp1_stage3_subdone : BOOLEAN;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal grp_matrix_modulus_fu_1143_ap_start : STD_LOGIC;
    signal grp_matrix_modulus_fu_1143_ap_done : STD_LOGIC;
    signal grp_matrix_modulus_fu_1143_ap_idle : STD_LOGIC;
    signal grp_matrix_modulus_fu_1143_ap_ready : STD_LOGIC;
    signal grp_matrix_modulus_fu_1143_fft_kernel_M_real_read : STD_LOGIC;
    signal grp_matrix_modulus_fu_1143_fft_kernel_M_imag_read : STD_LOGIC;
    signal grp_matrix_modulus_fu_1143_fft_kernel_modu_M_r_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_modulus_fu_1143_fft_kernel_modu_M_r_write : STD_LOGIC;
    signal grp_matrix_modulus_fu_1143_fft_kernel_modu_M_i_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_modulus_fu_1143_fft_kernel_modu_M_i_write : STD_LOGIC;
    signal grp_fft_top_fu_1179_ap_start : STD_LOGIC;
    signal grp_fft_top_fu_1179_ap_done : STD_LOGIC;
    signal grp_fft_top_fu_1179_ap_idle : STD_LOGIC;
    signal grp_fft_top_fu_1179_ap_ready : STD_LOGIC;
    signal grp_fft_top_fu_1179_direction : STD_LOGIC;
    signal grp_fft_top_fu_1179_direction_ap_ack : STD_LOGIC;
    signal grp_fft_top_fu_1179_in_r_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_top_fu_1179_in_r_empty_n : STD_LOGIC;
    signal grp_fft_top_fu_1179_in_r_read : STD_LOGIC;
    signal grp_fft_top_fu_1179_out_r_din : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_top_fu_1179_out_r_full_n : STD_LOGIC;
    signal grp_fft_top_fu_1179_out_r_write : STD_LOGIC;
    signal grp_matrix_div_1_fu_1204_ap_start : STD_LOGIC;
    signal grp_matrix_div_1_fu_1204_ap_done : STD_LOGIC;
    signal grp_matrix_div_1_fu_1204_ap_idle : STD_LOGIC;
    signal grp_matrix_div_1_fu_1204_ap_ready : STD_LOGIC;
    signal grp_matrix_div_1_fu_1204_fft_kernel_modu2_M_s_read : STD_LOGIC;
    signal grp_matrix_div_1_fu_1204_fft_kernel_modu2_M_1_read : STD_LOGIC;
    signal grp_matrix_div_1_fu_1204_G1_M_real_read : STD_LOGIC;
    signal grp_matrix_div_1_fu_1204_G1_M_real_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_div_1_fu_1204_G1_M_real_write : STD_LOGIC;
    signal grp_matrix_div_1_fu_1204_G1_M_imag_read : STD_LOGIC;
    signal grp_matrix_div_1_fu_1204_G1_M_imag_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_div_1_fu_1204_G1_M_imag_write : STD_LOGIC;
    signal grp_matrix_div_fu_1216_ap_start : STD_LOGIC;
    signal grp_matrix_div_fu_1216_ap_done : STD_LOGIC;
    signal grp_matrix_div_fu_1216_ap_idle : STD_LOGIC;
    signal grp_matrix_div_fu_1216_ap_ready : STD_LOGIC;
    signal grp_matrix_div_fu_1216_G1_M_real_read : STD_LOGIC;
    signal grp_matrix_div_fu_1216_G1_M_imag_read : STD_LOGIC;
    signal grp_matrix_div_fu_1216_fft_kernel_M_real_read : STD_LOGIC;
    signal grp_matrix_div_fu_1216_fft_kernel_M_imag_read : STD_LOGIC;
    signal grp_matrix_div_fu_1216_G_M_real_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_div_fu_1216_G_M_real_write : STD_LOGIC;
    signal grp_matrix_div_fu_1216_G_M_imag_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_div_fu_1216_G_M_imag_write : STD_LOGIC;
    signal grp_KernelMaker_fu_1232_ap_start : STD_LOGIC;
    signal grp_KernelMaker_fu_1232_ap_done : STD_LOGIC;
    signal grp_KernelMaker_fu_1232_ap_idle : STD_LOGIC;
    signal grp_KernelMaker_fu_1232_ap_ready : STD_LOGIC;
    signal grp_KernelMaker_fu_1232_kernel_M_real_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_KernelMaker_fu_1232_kernel_M_real_write : STD_LOGIC;
    signal grp_KernelMaker_fu_1232_kernel_M_imag_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_KernelMaker_fu_1232_kernel_M_imag_write : STD_LOGIC;
    signal grp_InnerProd_1_fu_1240_ap_start : STD_LOGIC;
    signal grp_InnerProd_1_fu_1240_ap_done : STD_LOGIC;
    signal grp_InnerProd_1_fu_1240_ap_idle : STD_LOGIC;
    signal grp_InnerProd_1_fu_1240_ap_ready : STD_LOGIC;
    signal grp_InnerProd_1_fu_1240_fft_kernel_modu_M_r_read : STD_LOGIC;
    signal grp_InnerProd_1_fu_1240_fft_kernel_modu_M_i_read : STD_LOGIC;
    signal grp_InnerProd_1_fu_1240_fft_kernel_modu2_M_s_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_InnerProd_1_fu_1240_fft_kernel_modu2_M_s_write : STD_LOGIC;
    signal grp_InnerProd_1_fu_1240_fft_kernel_modu2_M_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_InnerProd_1_fu_1240_fft_kernel_modu2_M_1_write : STD_LOGIC;
    signal grp_InnerProd381_fu_1252_ap_start : STD_LOGIC;
    signal grp_InnerProd381_fu_1252_ap_done : STD_LOGIC;
    signal grp_InnerProd381_fu_1252_ap_idle : STD_LOGIC;
    signal grp_InnerProd381_fu_1252_ap_ready : STD_LOGIC;
    signal grp_InnerProd381_fu_1252_gauss_blur_M_real_read : STD_LOGIC;
    signal grp_InnerProd381_fu_1252_gauss_blur_M_imag_read : STD_LOGIC;
    signal grp_InnerProd381_fu_1252_G_M_real_read : STD_LOGIC;
    signal grp_InnerProd381_fu_1252_G_M_imag_read : STD_LOGIC;
    signal grp_InnerProd381_fu_1252_xk1_M_real_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_InnerProd381_fu_1252_xk1_M_real_write : STD_LOGIC;
    signal grp_InnerProd381_fu_1252_xk1_M_imag_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_InnerProd381_fu_1252_xk1_M_imag_write : STD_LOGIC;
    signal grp_InnerProd382_fu_1268_ap_start : STD_LOGIC;
    signal grp_InnerProd382_fu_1268_ap_done : STD_LOGIC;
    signal grp_InnerProd382_fu_1268_ap_idle : STD_LOGIC;
    signal grp_InnerProd382_fu_1268_ap_ready : STD_LOGIC;
    signal grp_InnerProd382_fu_1268_gauss_blur_M_real_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_InnerProd382_fu_1268_gauss_blur_M_real_write : STD_LOGIC;
    signal grp_InnerProd382_fu_1268_gauss_blur_M_imag_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_InnerProd382_fu_1268_gauss_blur_M_imag_write : STD_LOGIC;
    signal grp_InnerProd382_fu_1268_xk1_M_real_read : STD_LOGIC;
    signal grp_InnerProd382_fu_1268_xk1_M_imag_read : STD_LOGIC;
    signal grp_InnerProd382_fu_1268_fft_kernel_M_real_read : STD_LOGIC;
    signal grp_InnerProd382_fu_1268_fft_kernel_M_imag_read : STD_LOGIC;
    signal grp_matrix_plus_SNR_fu_1284_ap_start : STD_LOGIC;
    signal grp_matrix_plus_SNR_fu_1284_ap_done : STD_LOGIC;
    signal grp_matrix_plus_SNR_fu_1284_ap_idle : STD_LOGIC;
    signal grp_matrix_plus_SNR_fu_1284_ap_ready : STD_LOGIC;
    signal grp_matrix_plus_SNR_fu_1284_fft_kernel_modu2_M_s_read : STD_LOGIC;
    signal grp_matrix_plus_SNR_fu_1284_G1_M_real_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_plus_SNR_fu_1284_G1_M_real_write : STD_LOGIC;
    signal grp_matrix_plus_SNR_fu_1284_fft_kernel_modu2_M_1_read : STD_LOGIC;
    signal grp_matrix_plus_SNR_fu_1284_G1_M_imag_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_plus_SNR_fu_1284_G1_M_imag_write : STD_LOGIC;
    signal grp_real_1_fu_1296_ap_start : STD_LOGIC;
    signal grp_real_1_fu_1296_ap_done : STD_LOGIC;
    signal grp_real_1_fu_1296_ap_idle : STD_LOGIC;
    signal grp_real_1_fu_1296_ap_ready : STD_LOGIC;
    signal grp_real_1_fu_1296_complex_float_s_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_real_1_fu_1296_complex_float_s_empty_n : STD_LOGIC;
    signal grp_real_1_fu_1296_complex_float_s_read : STD_LOGIC;
    signal grp_real_1_fu_1296_complex_float_s_din : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_real_1_fu_1296_complex_float_s_full_n : STD_LOGIC;
    signal grp_real_1_fu_1296_complex_float_s_write : STD_LOGIC;
    signal grp_real_1_fu_1296_p_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_real_1_fu_1296_complex_float_s_i_blk_n : STD_LOGIC;
    signal grp_real_1_fu_1296_complex_float_s_o_blk_n : STD_LOGIC;
    signal grp_imag_1_fu_1308_ap_start : STD_LOGIC;
    signal grp_imag_1_fu_1308_ap_done : STD_LOGIC;
    signal grp_imag_1_fu_1308_ap_idle : STD_LOGIC;
    signal grp_imag_1_fu_1308_ap_ready : STD_LOGIC;
    signal grp_imag_1_fu_1308_complex_float_s_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_imag_1_fu_1308_complex_float_s_empty_n : STD_LOGIC;
    signal grp_imag_1_fu_1308_complex_float_s_read : STD_LOGIC;
    signal grp_imag_1_fu_1308_complex_float_s_din : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_imag_1_fu_1308_complex_float_s_full_n : STD_LOGIC;
    signal grp_imag_1_fu_1308_complex_float_s_write : STD_LOGIC;
    signal grp_imag_1_fu_1308_p_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_imag_1_fu_1308_complex_float_s_i_blk_n : STD_LOGIC;
    signal grp_imag_1_fu_1308_complex_float_s_o_blk_n : STD_LOGIC;
    signal grp_real379_fu_1320_ap_start : STD_LOGIC;
    signal grp_real379_fu_1320_ap_done : STD_LOGIC;
    signal grp_real379_fu_1320_ap_idle : STD_LOGIC;
    signal grp_real379_fu_1320_ap_ready : STD_LOGIC;
    signal grp_real379_fu_1320_complex_float_M_real_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_real379_fu_1320_complex_float_M_real_full_n : STD_LOGIC;
    signal grp_real379_fu_1320_complex_float_M_real_write : STD_LOGIC;
    signal grp_real379_fu_1320_p_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_imag380_fu_1332_ap_start : STD_LOGIC;
    signal grp_imag380_fu_1332_ap_done : STD_LOGIC;
    signal grp_imag380_fu_1332_ap_idle : STD_LOGIC;
    signal grp_imag380_fu_1332_ap_ready : STD_LOGIC;
    signal grp_imag380_fu_1332_complex_float_M_imag_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_imag380_fu_1332_complex_float_M_imag_full_n : STD_LOGIC;
    signal grp_imag380_fu_1332_complex_float_M_imag_write : STD_LOGIC;
    signal grp_imag380_fu_1332_p_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_imag380_fu_1332_complex_float_M_imag_blk_n : STD_LOGIC;
    signal p_rec1_reg_823 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_1380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_rec2_reg_834 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_reg_846 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_r_phi_fu_861_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_op_assign_reg_868 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_op_assign_2_reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_block_state19 : BOOLEAN;
    signal exitcond7_fu_1492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_op_assign_3_reg_890 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_4_reg_901 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal exitcond8_fu_1518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_op_assign_5_reg_912 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal c5_reg_923 : STD_LOGIC_VECTOR (8 downto 0);
    signal r6_reg_934 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal exitcond1_fu_1573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r7_reg_945 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal r8_reg_956 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal c9_reg_967 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal exitcond2_fu_1631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_op_assign_6_reg_978 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal c6_reg_989 : STD_LOGIC_VECTOR (8 downto 0);
    signal r9_reg_1000 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal exitcond4_fu_1688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_op_assign_7_reg_1011 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal i_op_assign_8_reg_1022 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal i_op_assign_9_reg_1033 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal exitcond12_fu_1745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_op_assign_10_reg_1044 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal i_op_assign_s_reg_1055 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_11_reg_1066 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal exitcond13_fu_1800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_op_assign_13_reg_1077 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal i_op_assign_1_reg_1088 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_14_reg_1099 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal res_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal res_data_stream_0_V_full_n : STD_LOGIC;
    signal res_data_stream_0_V_write : STD_LOGIC;
    signal ap_phi_mux_indvar_flatten_phi_fu_1114_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_phi_mux_i_op_assign_12_phi_fu_1125_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_c12_phi_fu_1136_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_matrix_modulus_fu_1143_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal fft_kernel_M_real_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_kernel_M_real_empty_n : STD_LOGIC;
    signal fft_kernel_M_real_read : STD_LOGIC;
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal fft_kernel_M_imag_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_kernel_M_imag_empty_n : STD_LOGIC;
    signal fft_kernel_M_imag_read : STD_LOGIC;
    signal fft_kernel_modu_M_r_full_n : STD_LOGIC;
    signal fft_kernel_modu_M_r_write : STD_LOGIC;
    signal fft_kernel_modu_M_i_full_n : STD_LOGIC;
    signal fft_kernel_modu_M_i_write : STD_LOGIC;
    signal grp_fft_top_fu_1179_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state21_ignore_call0 : BOOLEAN;
    signal ap_block_state33_ignore_call0 : BOOLEAN;
    signal ap_block_state46_ignore_call0 : BOOLEAN;
    signal ap_block_state54_ignore_call0 : BOOLEAN;
    signal ap_block_state79_ignore_call0 : BOOLEAN;
    signal ap_block_state87_ignore_call0 : BOOLEAN;
    signal in1_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal in1_empty_n : STD_LOGIC;
    signal in1_read : STD_LOGIC;
    signal in2_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal in2_empty_n : STD_LOGIC;
    signal in2_read : STD_LOGIC;
    signal in3_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal in3_empty_n : STD_LOGIC;
    signal in3_read : STD_LOGIC;
    signal in4_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal in4_empty_n : STD_LOGIC;
    signal in4_read : STD_LOGIC;
    signal in5_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal in5_empty_n : STD_LOGIC;
    signal in5_read : STD_LOGIC;
    signal in6_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal in6_empty_n : STD_LOGIC;
    signal in6_read : STD_LOGIC;
    signal out1_din : STD_LOGIC_VECTOR (63 downto 0);
    signal out1_full_n : STD_LOGIC;
    signal out1_write : STD_LOGIC;
    signal out2_din : STD_LOGIC_VECTOR (63 downto 0);
    signal out2_full_n : STD_LOGIC;
    signal out2_write : STD_LOGIC;
    signal out3_din : STD_LOGIC_VECTOR (63 downto 0);
    signal out3_full_n : STD_LOGIC;
    signal out3_write : STD_LOGIC;
    signal out4_din : STD_LOGIC_VECTOR (63 downto 0);
    signal out4_full_n : STD_LOGIC;
    signal out4_write : STD_LOGIC;
    signal out5_din : STD_LOGIC_VECTOR (63 downto 0);
    signal out5_full_n : STD_LOGIC;
    signal out5_write : STD_LOGIC;
    signal out6_din : STD_LOGIC_VECTOR (63 downto 0);
    signal out6_full_n : STD_LOGIC;
    signal out6_write : STD_LOGIC;
    signal grp_matrix_div_1_fu_1204_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal fft_kernel_modu2_M_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_kernel_modu2_M_s_empty_n : STD_LOGIC;
    signal fft_kernel_modu2_M_s_read : STD_LOGIC;
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal fft_kernel_modu2_M_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_kernel_modu2_M_1_empty_n : STD_LOGIC;
    signal fft_kernel_modu2_M_1_read : STD_LOGIC;
    signal G1_M_real_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal G1_M_real_empty_n : STD_LOGIC;
    signal G1_M_real_read : STD_LOGIC;
    signal G1_M_real_din : STD_LOGIC_VECTOR (31 downto 0);
    signal G1_M_real_full_n : STD_LOGIC;
    signal G1_M_real_write : STD_LOGIC;
    signal G1_M_imag_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal G1_M_imag_empty_n : STD_LOGIC;
    signal G1_M_imag_read : STD_LOGIC;
    signal G1_M_imag_din : STD_LOGIC_VECTOR (31 downto 0);
    signal G1_M_imag_full_n : STD_LOGIC;
    signal G1_M_imag_write : STD_LOGIC;
    signal grp_matrix_div_fu_1216_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal G_M_real_full_n : STD_LOGIC;
    signal G_M_real_write : STD_LOGIC;
    signal G_M_imag_full_n : STD_LOGIC;
    signal G_M_imag_write : STD_LOGIC;
    signal grp_KernelMaker_fu_1232_ap_start_reg : STD_LOGIC := '0';
    signal grp_InnerProd_1_fu_1240_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal fft_kernel_modu_M_r_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_kernel_modu_M_r_empty_n : STD_LOGIC;
    signal fft_kernel_modu_M_r_read : STD_LOGIC;
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal fft_kernel_modu_M_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_kernel_modu_M_i_empty_n : STD_LOGIC;
    signal fft_kernel_modu_M_i_read : STD_LOGIC;
    signal fft_kernel_modu2_M_s_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_kernel_modu2_M_s_full_n : STD_LOGIC;
    signal fft_kernel_modu2_M_s_write : STD_LOGIC;
    signal fft_kernel_modu2_M_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_kernel_modu2_M_1_full_n : STD_LOGIC;
    signal fft_kernel_modu2_M_1_write : STD_LOGIC;
    signal grp_InnerProd381_fu_1252_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal gauss_blur_M_real_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_blur_M_real_empty_n : STD_LOGIC;
    signal gauss_blur_M_real_read : STD_LOGIC;
    signal gauss_blur_M_imag_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_blur_M_imag_empty_n : STD_LOGIC;
    signal gauss_blur_M_imag_read : STD_LOGIC;
    signal G_M_real_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal G_M_real_empty_n : STD_LOGIC;
    signal G_M_real_read : STD_LOGIC;
    signal G_M_imag_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal G_M_imag_empty_n : STD_LOGIC;
    signal G_M_imag_read : STD_LOGIC;
    signal xk1_M_real_din : STD_LOGIC_VECTOR (31 downto 0);
    signal xk1_M_real_full_n : STD_LOGIC;
    signal xk1_M_real_write : STD_LOGIC;
    signal xk1_M_imag_din : STD_LOGIC_VECTOR (31 downto 0);
    signal xk1_M_imag_full_n : STD_LOGIC;
    signal xk1_M_imag_write : STD_LOGIC;
    signal grp_InnerProd382_fu_1268_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal gauss_blur_M_real_full_n : STD_LOGIC;
    signal gauss_blur_M_real_write : STD_LOGIC;
    signal gauss_blur_M_imag_full_n : STD_LOGIC;
    signal gauss_blur_M_imag_write : STD_LOGIC;
    signal grp_matrix_plus_SNR_fu_1284_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal in1_din : STD_LOGIC_VECTOR (63 downto 0);
    signal in1_full_n : STD_LOGIC;
    signal in1_write : STD_LOGIC;
    signal in2_din : STD_LOGIC_VECTOR (63 downto 0);
    signal in2_full_n : STD_LOGIC;
    signal in2_write : STD_LOGIC;
    signal in3_din : STD_LOGIC_VECTOR (63 downto 0);
    signal in3_full_n : STD_LOGIC;
    signal in3_write : STD_LOGIC;
    signal in4_din : STD_LOGIC_VECTOR (63 downto 0);
    signal in4_full_n : STD_LOGIC;
    signal in4_write : STD_LOGIC;
    signal in5_din : STD_LOGIC_VECTOR (63 downto 0);
    signal in5_full_n : STD_LOGIC;
    signal in5_write : STD_LOGIC;
    signal in6_din : STD_LOGIC_VECTOR (63 downto 0);
    signal in6_full_n : STD_LOGIC;
    signal in6_write : STD_LOGIC;
    signal xn1_M_real_din : STD_LOGIC_VECTOR (31 downto 0);
    signal xn1_M_real_full_n : STD_LOGIC;
    signal xn1_M_real_write : STD_LOGIC;
    signal middle_M_real_din : STD_LOGIC_VECTOR (31 downto 0);
    signal middle_M_real_full_n : STD_LOGIC;
    signal middle_M_real_write : STD_LOGIC;
    signal fft_kernel_M_real_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_kernel_M_real_full_n : STD_LOGIC;
    signal fft_kernel_M_real_write : STD_LOGIC;
    signal middle2_M_real_din : STD_LOGIC_VECTOR (31 downto 0);
    signal middle2_M_real_full_n : STD_LOGIC;
    signal middle2_M_real_write : STD_LOGIC;
    signal xk2_M_real_din : STD_LOGIC_VECTOR (31 downto 0);
    signal xk2_M_real_full_n : STD_LOGIC;
    signal xk2_M_real_write : STD_LOGIC;
    signal out3_M_real_load_fu_1670_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out5_M_real_load_fu_1782_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out6_M_real_load_fu_1837_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xn1_M_imag_din : STD_LOGIC_VECTOR (31 downto 0);
    signal xn1_M_imag_full_n : STD_LOGIC;
    signal xn1_M_imag_write : STD_LOGIC;
    signal middle_M_imag_din : STD_LOGIC_VECTOR (31 downto 0);
    signal middle_M_imag_full_n : STD_LOGIC;
    signal middle_M_imag_write : STD_LOGIC;
    signal fft_kernel_M_imag_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_kernel_M_imag_full_n : STD_LOGIC;
    signal fft_kernel_M_imag_write : STD_LOGIC;
    signal middle2_M_imag_din : STD_LOGIC_VECTOR (31 downto 0);
    signal middle2_M_imag_full_n : STD_LOGIC;
    signal middle2_M_imag_write : STD_LOGIC;
    signal xk2_M_imag_din : STD_LOGIC_VECTOR (31 downto 0);
    signal xk2_M_imag_full_n : STD_LOGIC;
    signal xk2_M_imag_write : STD_LOGIC;
    signal out3_M_imag_load_fu_1684_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out5_M_imag_load_fu_1796_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out6_M_imag_load_fu_1851_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state7_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_61_fu_1457_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal grp_fu_1345_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1351_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal packets_fu_1433_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal packets_fu_1433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_cast_fu_1438_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond7_fu_1492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond8_fu_1518_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond17_fu_1712_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond12_fu_1745_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond18_fu_1811_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond21_fu_1822_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond15_fu_1855_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_cast_fu_1871_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_cast_fu_1871_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal cast_fu_1880_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_1886_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_1886_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_101_fu_1903_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_fu_1915_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i_cast4_fu_1929_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_1933_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_i_i_fu_1947_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_cast_fu_1953_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_V_fu_1965_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_assign_16_cast_fu_1978_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_16_cast_ca_fu_1981_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal mantissa_V_7_cast5_fu_1974_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_i_i_i_438_fu_1984_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_1988_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_104_fu_2000_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_42_fu_1994_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_93_fu_2008_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_94_fu_2012_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_107_fu_2022_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_4_fu_2029_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abscond_fu_2175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_fu_2180_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_127_cast_fu_2229_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_90_fu_2255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_1_fu_2249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_127_cast_mid1_fu_2268_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_72_fu_2233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_mid1_fu_2272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_92_fu_2293_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_88_fu_2307_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_86_fu_2301_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_89_fu_2317_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c14_cast_mid2_cast_fu_2297_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_74_mid2_fu_2277_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_91_fu_2331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp1_stage3 : BOOLEAN;
    signal grp_fu_1345_ce : STD_LOGIC;
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_block_state104 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (100 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal G1_M_imag_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal G1_M_real_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal fft_kernel_M_imag_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal fft_kernel_M_real_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal fft_kernel_modu2_M_1_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal fft_kernel_modu2_M_s_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal in1_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal in2_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal in3_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal in4_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal in5_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal in6_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal kernel_M_imag_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal kernel_M_real_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal middle_M_imag_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal middle_M_real_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal middle2_M_imag_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal middle2_M_real_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal out1_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal out2_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal out3_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal out4_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal out5_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal out6_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal xk1_M_imag_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal xk1_M_real_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal xk2_M_imag_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal xk2_M_real_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal xn1_M_imag_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal xn1_M_real_fifo_U_ap_dummy_ce : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal bound_fu_1886_p00 : STD_LOGIC_VECTOR (61 downto 0);
    signal bound_fu_1886_p10 : STD_LOGIC_VECTOR (61 downto 0);
    signal packets_fu_1433_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_2468 : BOOLEAN;
    signal ap_condition_2473 : BOOLEAN;
    signal ap_condition_2478 : BOOLEAN;
    signal ap_condition_2483 : BOOLEAN;

    component matrix_modulus IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fft_kernel_M_real_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fft_kernel_M_real_empty_n : IN STD_LOGIC;
        fft_kernel_M_real_read : OUT STD_LOGIC;
        fft_kernel_M_imag_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fft_kernel_M_imag_empty_n : IN STD_LOGIC;
        fft_kernel_M_imag_read : OUT STD_LOGIC;
        fft_kernel_modu_M_r_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fft_kernel_modu_M_r_full_n : IN STD_LOGIC;
        fft_kernel_modu_M_r_write : OUT STD_LOGIC;
        fft_kernel_modu_M_i_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fft_kernel_modu_M_i_full_n : IN STD_LOGIC;
        fft_kernel_modu_M_i_write : OUT STD_LOGIC );
    end component;


    component fft_top IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        direction : IN STD_LOGIC;
        direction_ap_vld : IN STD_LOGIC;
        direction_ap_ack : OUT STD_LOGIC;
        in_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        in_r_empty_n : IN STD_LOGIC;
        in_r_read : OUT STD_LOGIC;
        out_r_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r_full_n : IN STD_LOGIC;
        out_r_write : OUT STD_LOGIC );
    end component;


    component matrix_div_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fft_kernel_modu2_M_s_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fft_kernel_modu2_M_s_empty_n : IN STD_LOGIC;
        fft_kernel_modu2_M_s_read : OUT STD_LOGIC;
        fft_kernel_modu2_M_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fft_kernel_modu2_M_1_empty_n : IN STD_LOGIC;
        fft_kernel_modu2_M_1_read : OUT STD_LOGIC;
        G1_M_real_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        G1_M_real_empty_n : IN STD_LOGIC;
        G1_M_real_read : OUT STD_LOGIC;
        G1_M_real_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        G1_M_real_full_n : IN STD_LOGIC;
        G1_M_real_write : OUT STD_LOGIC;
        G1_M_imag_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        G1_M_imag_empty_n : IN STD_LOGIC;
        G1_M_imag_read : OUT STD_LOGIC;
        G1_M_imag_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        G1_M_imag_full_n : IN STD_LOGIC;
        G1_M_imag_write : OUT STD_LOGIC );
    end component;


    component matrix_div IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        G1_M_real_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        G1_M_real_empty_n : IN STD_LOGIC;
        G1_M_real_read : OUT STD_LOGIC;
        G1_M_imag_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        G1_M_imag_empty_n : IN STD_LOGIC;
        G1_M_imag_read : OUT STD_LOGIC;
        fft_kernel_M_real_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fft_kernel_M_real_empty_n : IN STD_LOGIC;
        fft_kernel_M_real_read : OUT STD_LOGIC;
        fft_kernel_M_imag_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fft_kernel_M_imag_empty_n : IN STD_LOGIC;
        fft_kernel_M_imag_read : OUT STD_LOGIC;
        G_M_real_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        G_M_real_full_n : IN STD_LOGIC;
        G_M_real_write : OUT STD_LOGIC;
        G_M_imag_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        G_M_imag_full_n : IN STD_LOGIC;
        G_M_imag_write : OUT STD_LOGIC );
    end component;


    component KernelMaker IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        kernel_M_real_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        kernel_M_real_full_n : IN STD_LOGIC;
        kernel_M_real_write : OUT STD_LOGIC;
        kernel_M_imag_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        kernel_M_imag_full_n : IN STD_LOGIC;
        kernel_M_imag_write : OUT STD_LOGIC );
    end component;


    component InnerProd_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fft_kernel_modu_M_r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fft_kernel_modu_M_r_empty_n : IN STD_LOGIC;
        fft_kernel_modu_M_r_read : OUT STD_LOGIC;
        fft_kernel_modu_M_i_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fft_kernel_modu_M_i_empty_n : IN STD_LOGIC;
        fft_kernel_modu_M_i_read : OUT STD_LOGIC;
        fft_kernel_modu2_M_s_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fft_kernel_modu2_M_s_full_n : IN STD_LOGIC;
        fft_kernel_modu2_M_s_write : OUT STD_LOGIC;
        fft_kernel_modu2_M_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fft_kernel_modu2_M_1_full_n : IN STD_LOGIC;
        fft_kernel_modu2_M_1_write : OUT STD_LOGIC );
    end component;


    component InnerProd381 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        gauss_blur_M_real_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        gauss_blur_M_real_empty_n : IN STD_LOGIC;
        gauss_blur_M_real_read : OUT STD_LOGIC;
        gauss_blur_M_imag_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        gauss_blur_M_imag_empty_n : IN STD_LOGIC;
        gauss_blur_M_imag_read : OUT STD_LOGIC;
        G_M_real_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        G_M_real_empty_n : IN STD_LOGIC;
        G_M_real_read : OUT STD_LOGIC;
        G_M_imag_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        G_M_imag_empty_n : IN STD_LOGIC;
        G_M_imag_read : OUT STD_LOGIC;
        xk1_M_real_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        xk1_M_real_full_n : IN STD_LOGIC;
        xk1_M_real_write : OUT STD_LOGIC;
        xk1_M_imag_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        xk1_M_imag_full_n : IN STD_LOGIC;
        xk1_M_imag_write : OUT STD_LOGIC );
    end component;


    component InnerProd382 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        gauss_blur_M_real_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        gauss_blur_M_real_full_n : IN STD_LOGIC;
        gauss_blur_M_real_write : OUT STD_LOGIC;
        gauss_blur_M_imag_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        gauss_blur_M_imag_full_n : IN STD_LOGIC;
        gauss_blur_M_imag_write : OUT STD_LOGIC;
        xk1_M_real_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        xk1_M_real_empty_n : IN STD_LOGIC;
        xk1_M_real_read : OUT STD_LOGIC;
        xk1_M_imag_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        xk1_M_imag_empty_n : IN STD_LOGIC;
        xk1_M_imag_read : OUT STD_LOGIC;
        fft_kernel_M_real_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fft_kernel_M_real_empty_n : IN STD_LOGIC;
        fft_kernel_M_real_read : OUT STD_LOGIC;
        fft_kernel_M_imag_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fft_kernel_M_imag_empty_n : IN STD_LOGIC;
        fft_kernel_M_imag_read : OUT STD_LOGIC );
    end component;


    component matrix_plus_SNR IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fft_kernel_modu2_M_s_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fft_kernel_modu2_M_s_empty_n : IN STD_LOGIC;
        fft_kernel_modu2_M_s_read : OUT STD_LOGIC;
        G1_M_real_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        G1_M_real_full_n : IN STD_LOGIC;
        G1_M_real_write : OUT STD_LOGIC;
        fft_kernel_modu2_M_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fft_kernel_modu2_M_1_empty_n : IN STD_LOGIC;
        fft_kernel_modu2_M_1_read : OUT STD_LOGIC;
        G1_M_imag_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        G1_M_imag_full_n : IN STD_LOGIC;
        G1_M_imag_write : OUT STD_LOGIC );
    end component;


    component real_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        complex_float_s_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        complex_float_s_empty_n : IN STD_LOGIC;
        complex_float_s_read : OUT STD_LOGIC;
        complex_float_s_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        complex_float_s_full_n : IN STD_LOGIC;
        complex_float_s_write : OUT STD_LOGIC;
        p_val : IN STD_LOGIC_VECTOR (31 downto 0);
        complex_float_s_i_blk_n : OUT STD_LOGIC;
        complex_float_s_o_blk_n : OUT STD_LOGIC );
    end component;


    component imag_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        complex_float_s_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        complex_float_s_empty_n : IN STD_LOGIC;
        complex_float_s_read : OUT STD_LOGIC;
        complex_float_s_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        complex_float_s_full_n : IN STD_LOGIC;
        complex_float_s_write : OUT STD_LOGIC;
        p_val : IN STD_LOGIC_VECTOR (31 downto 0);
        complex_float_s_i_blk_n : OUT STD_LOGIC;
        complex_float_s_o_blk_n : OUT STD_LOGIC );
    end component;


    component real379 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        complex_float_M_real_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        complex_float_M_real_full_n : IN STD_LOGIC;
        complex_float_M_real_write : OUT STD_LOGIC;
        p_val : IN STD_LOGIC_VECTOR (31 downto 0);
        complex_float_M_real_blk_n : OUT STD_LOGIC );
    end component;


    component imag380 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        complex_float_M_imag_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        complex_float_M_imag_full_n : IN STD_LOGIC;
        complex_float_M_imag_write : OUT STD_LOGIC;
        p_val : IN STD_LOGIC_VECTOR (31 downto 0);
        complex_float_M_imag_blk_n : OUT STD_LOGIC );
    end component;


    component WienerDeblur_fmuljbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WienerDeblur_uitoOgC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fifo_w32_d65536_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w64_d256_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w64_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component WienerDeblur_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        rows_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        rst : IN STD_LOGIC );
    end component;



begin
    WienerDeblur_CONTROL_BUS_s_axi_U : component WienerDeblur_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => AXI_LITE_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        rows_V => rows_V,
        cols_V => cols_V,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        clk => ap_clk,
        rst => ap_rst_n_AXI_LITE_clk_inv);

    grp_matrix_modulus_fu_1143 : component matrix_modulus
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_matrix_modulus_fu_1143_ap_start,
        ap_done => grp_matrix_modulus_fu_1143_ap_done,
        ap_idle => grp_matrix_modulus_fu_1143_ap_idle,
        ap_ready => grp_matrix_modulus_fu_1143_ap_ready,
        fft_kernel_M_real_dout => fft_kernel_M_real_dout,
        fft_kernel_M_real_empty_n => fft_kernel_M_real_empty_n,
        fft_kernel_M_real_read => grp_matrix_modulus_fu_1143_fft_kernel_M_real_read,
        fft_kernel_M_imag_dout => fft_kernel_M_imag_dout,
        fft_kernel_M_imag_empty_n => fft_kernel_M_imag_empty_n,
        fft_kernel_M_imag_read => grp_matrix_modulus_fu_1143_fft_kernel_M_imag_read,
        fft_kernel_modu_M_r_din => grp_matrix_modulus_fu_1143_fft_kernel_modu_M_r_din,
        fft_kernel_modu_M_r_full_n => fft_kernel_modu_M_r_full_n,
        fft_kernel_modu_M_r_write => grp_matrix_modulus_fu_1143_fft_kernel_modu_M_r_write,
        fft_kernel_modu_M_i_din => grp_matrix_modulus_fu_1143_fft_kernel_modu_M_i_din,
        fft_kernel_modu_M_i_full_n => fft_kernel_modu_M_i_full_n,
        fft_kernel_modu_M_i_write => grp_matrix_modulus_fu_1143_fft_kernel_modu_M_i_write);

    grp_fft_top_fu_1179 : component fft_top
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fft_top_fu_1179_ap_start,
        ap_done => grp_fft_top_fu_1179_ap_done,
        ap_idle => grp_fft_top_fu_1179_ap_idle,
        ap_ready => grp_fft_top_fu_1179_ap_ready,
        direction => grp_fft_top_fu_1179_direction,
        direction_ap_vld => ap_const_logic_1,
        direction_ap_ack => grp_fft_top_fu_1179_direction_ap_ack,
        in_r_dout => grp_fft_top_fu_1179_in_r_dout,
        in_r_empty_n => grp_fft_top_fu_1179_in_r_empty_n,
        in_r_read => grp_fft_top_fu_1179_in_r_read,
        out_r_din => grp_fft_top_fu_1179_out_r_din,
        out_r_full_n => grp_fft_top_fu_1179_out_r_full_n,
        out_r_write => grp_fft_top_fu_1179_out_r_write);

    grp_matrix_div_1_fu_1204 : component matrix_div_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_matrix_div_1_fu_1204_ap_start,
        ap_done => grp_matrix_div_1_fu_1204_ap_done,
        ap_idle => grp_matrix_div_1_fu_1204_ap_idle,
        ap_ready => grp_matrix_div_1_fu_1204_ap_ready,
        fft_kernel_modu2_M_s_dout => fft_kernel_modu2_M_s_dout,
        fft_kernel_modu2_M_s_empty_n => fft_kernel_modu2_M_s_empty_n,
        fft_kernel_modu2_M_s_read => grp_matrix_div_1_fu_1204_fft_kernel_modu2_M_s_read,
        fft_kernel_modu2_M_1_dout => fft_kernel_modu2_M_1_dout,
        fft_kernel_modu2_M_1_empty_n => fft_kernel_modu2_M_1_empty_n,
        fft_kernel_modu2_M_1_read => grp_matrix_div_1_fu_1204_fft_kernel_modu2_M_1_read,
        G1_M_real_dout => G1_M_real_dout,
        G1_M_real_empty_n => G1_M_real_empty_n,
        G1_M_real_read => grp_matrix_div_1_fu_1204_G1_M_real_read,
        G1_M_real_din => grp_matrix_div_1_fu_1204_G1_M_real_din,
        G1_M_real_full_n => G1_M_real_full_n,
        G1_M_real_write => grp_matrix_div_1_fu_1204_G1_M_real_write,
        G1_M_imag_dout => G1_M_imag_dout,
        G1_M_imag_empty_n => G1_M_imag_empty_n,
        G1_M_imag_read => grp_matrix_div_1_fu_1204_G1_M_imag_read,
        G1_M_imag_din => grp_matrix_div_1_fu_1204_G1_M_imag_din,
        G1_M_imag_full_n => G1_M_imag_full_n,
        G1_M_imag_write => grp_matrix_div_1_fu_1204_G1_M_imag_write);

    grp_matrix_div_fu_1216 : component matrix_div
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_matrix_div_fu_1216_ap_start,
        ap_done => grp_matrix_div_fu_1216_ap_done,
        ap_idle => grp_matrix_div_fu_1216_ap_idle,
        ap_ready => grp_matrix_div_fu_1216_ap_ready,
        G1_M_real_dout => G1_M_real_dout,
        G1_M_real_empty_n => G1_M_real_empty_n,
        G1_M_real_read => grp_matrix_div_fu_1216_G1_M_real_read,
        G1_M_imag_dout => G1_M_imag_dout,
        G1_M_imag_empty_n => G1_M_imag_empty_n,
        G1_M_imag_read => grp_matrix_div_fu_1216_G1_M_imag_read,
        fft_kernel_M_real_dout => fft_kernel_M_real_dout,
        fft_kernel_M_real_empty_n => fft_kernel_M_real_empty_n,
        fft_kernel_M_real_read => grp_matrix_div_fu_1216_fft_kernel_M_real_read,
        fft_kernel_M_imag_dout => fft_kernel_M_imag_dout,
        fft_kernel_M_imag_empty_n => fft_kernel_M_imag_empty_n,
        fft_kernel_M_imag_read => grp_matrix_div_fu_1216_fft_kernel_M_imag_read,
        G_M_real_din => grp_matrix_div_fu_1216_G_M_real_din,
        G_M_real_full_n => G_M_real_full_n,
        G_M_real_write => grp_matrix_div_fu_1216_G_M_real_write,
        G_M_imag_din => grp_matrix_div_fu_1216_G_M_imag_din,
        G_M_imag_full_n => G_M_imag_full_n,
        G_M_imag_write => grp_matrix_div_fu_1216_G_M_imag_write);

    grp_KernelMaker_fu_1232 : component KernelMaker
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_KernelMaker_fu_1232_ap_start,
        ap_done => grp_KernelMaker_fu_1232_ap_done,
        ap_idle => grp_KernelMaker_fu_1232_ap_idle,
        ap_ready => grp_KernelMaker_fu_1232_ap_ready,
        kernel_M_real_din => grp_KernelMaker_fu_1232_kernel_M_real_din,
        kernel_M_real_full_n => kernel_M_real_full_n,
        kernel_M_real_write => grp_KernelMaker_fu_1232_kernel_M_real_write,
        kernel_M_imag_din => grp_KernelMaker_fu_1232_kernel_M_imag_din,
        kernel_M_imag_full_n => kernel_M_imag_full_n,
        kernel_M_imag_write => grp_KernelMaker_fu_1232_kernel_M_imag_write);

    grp_InnerProd_1_fu_1240 : component InnerProd_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_InnerProd_1_fu_1240_ap_start,
        ap_done => grp_InnerProd_1_fu_1240_ap_done,
        ap_idle => grp_InnerProd_1_fu_1240_ap_idle,
        ap_ready => grp_InnerProd_1_fu_1240_ap_ready,
        fft_kernel_modu_M_r_dout => fft_kernel_modu_M_r_dout,
        fft_kernel_modu_M_r_empty_n => fft_kernel_modu_M_r_empty_n,
        fft_kernel_modu_M_r_read => grp_InnerProd_1_fu_1240_fft_kernel_modu_M_r_read,
        fft_kernel_modu_M_i_dout => fft_kernel_modu_M_i_dout,
        fft_kernel_modu_M_i_empty_n => fft_kernel_modu_M_i_empty_n,
        fft_kernel_modu_M_i_read => grp_InnerProd_1_fu_1240_fft_kernel_modu_M_i_read,
        fft_kernel_modu2_M_s_din => grp_InnerProd_1_fu_1240_fft_kernel_modu2_M_s_din,
        fft_kernel_modu2_M_s_full_n => fft_kernel_modu2_M_s_full_n,
        fft_kernel_modu2_M_s_write => grp_InnerProd_1_fu_1240_fft_kernel_modu2_M_s_write,
        fft_kernel_modu2_M_1_din => grp_InnerProd_1_fu_1240_fft_kernel_modu2_M_1_din,
        fft_kernel_modu2_M_1_full_n => fft_kernel_modu2_M_1_full_n,
        fft_kernel_modu2_M_1_write => grp_InnerProd_1_fu_1240_fft_kernel_modu2_M_1_write);

    grp_InnerProd381_fu_1252 : component InnerProd381
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_InnerProd381_fu_1252_ap_start,
        ap_done => grp_InnerProd381_fu_1252_ap_done,
        ap_idle => grp_InnerProd381_fu_1252_ap_idle,
        ap_ready => grp_InnerProd381_fu_1252_ap_ready,
        gauss_blur_M_real_dout => gauss_blur_M_real_dout,
        gauss_blur_M_real_empty_n => gauss_blur_M_real_empty_n,
        gauss_blur_M_real_read => grp_InnerProd381_fu_1252_gauss_blur_M_real_read,
        gauss_blur_M_imag_dout => gauss_blur_M_imag_dout,
        gauss_blur_M_imag_empty_n => gauss_blur_M_imag_empty_n,
        gauss_blur_M_imag_read => grp_InnerProd381_fu_1252_gauss_blur_M_imag_read,
        G_M_real_dout => G_M_real_dout,
        G_M_real_empty_n => G_M_real_empty_n,
        G_M_real_read => grp_InnerProd381_fu_1252_G_M_real_read,
        G_M_imag_dout => G_M_imag_dout,
        G_M_imag_empty_n => G_M_imag_empty_n,
        G_M_imag_read => grp_InnerProd381_fu_1252_G_M_imag_read,
        xk1_M_real_din => grp_InnerProd381_fu_1252_xk1_M_real_din,
        xk1_M_real_full_n => xk1_M_real_full_n,
        xk1_M_real_write => grp_InnerProd381_fu_1252_xk1_M_real_write,
        xk1_M_imag_din => grp_InnerProd381_fu_1252_xk1_M_imag_din,
        xk1_M_imag_full_n => xk1_M_imag_full_n,
        xk1_M_imag_write => grp_InnerProd381_fu_1252_xk1_M_imag_write);

    grp_InnerProd382_fu_1268 : component InnerProd382
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_InnerProd382_fu_1268_ap_start,
        ap_done => grp_InnerProd382_fu_1268_ap_done,
        ap_idle => grp_InnerProd382_fu_1268_ap_idle,
        ap_ready => grp_InnerProd382_fu_1268_ap_ready,
        gauss_blur_M_real_din => grp_InnerProd382_fu_1268_gauss_blur_M_real_din,
        gauss_blur_M_real_full_n => gauss_blur_M_real_full_n,
        gauss_blur_M_real_write => grp_InnerProd382_fu_1268_gauss_blur_M_real_write,
        gauss_blur_M_imag_din => grp_InnerProd382_fu_1268_gauss_blur_M_imag_din,
        gauss_blur_M_imag_full_n => gauss_blur_M_imag_full_n,
        gauss_blur_M_imag_write => grp_InnerProd382_fu_1268_gauss_blur_M_imag_write,
        xk1_M_real_dout => xk1_M_real_dout,
        xk1_M_real_empty_n => xk1_M_real_empty_n,
        xk1_M_real_read => grp_InnerProd382_fu_1268_xk1_M_real_read,
        xk1_M_imag_dout => xk1_M_imag_dout,
        xk1_M_imag_empty_n => xk1_M_imag_empty_n,
        xk1_M_imag_read => grp_InnerProd382_fu_1268_xk1_M_imag_read,
        fft_kernel_M_real_dout => fft_kernel_M_real_dout,
        fft_kernel_M_real_empty_n => fft_kernel_M_real_empty_n,
        fft_kernel_M_real_read => grp_InnerProd382_fu_1268_fft_kernel_M_real_read,
        fft_kernel_M_imag_dout => fft_kernel_M_imag_dout,
        fft_kernel_M_imag_empty_n => fft_kernel_M_imag_empty_n,
        fft_kernel_M_imag_read => grp_InnerProd382_fu_1268_fft_kernel_M_imag_read);

    grp_matrix_plus_SNR_fu_1284 : component matrix_plus_SNR
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_matrix_plus_SNR_fu_1284_ap_start,
        ap_done => grp_matrix_plus_SNR_fu_1284_ap_done,
        ap_idle => grp_matrix_plus_SNR_fu_1284_ap_idle,
        ap_ready => grp_matrix_plus_SNR_fu_1284_ap_ready,
        fft_kernel_modu2_M_s_dout => fft_kernel_modu2_M_s_dout,
        fft_kernel_modu2_M_s_empty_n => fft_kernel_modu2_M_s_empty_n,
        fft_kernel_modu2_M_s_read => grp_matrix_plus_SNR_fu_1284_fft_kernel_modu2_M_s_read,
        G1_M_real_din => grp_matrix_plus_SNR_fu_1284_G1_M_real_din,
        G1_M_real_full_n => G1_M_real_full_n,
        G1_M_real_write => grp_matrix_plus_SNR_fu_1284_G1_M_real_write,
        fft_kernel_modu2_M_1_dout => fft_kernel_modu2_M_1_dout,
        fft_kernel_modu2_M_1_empty_n => fft_kernel_modu2_M_1_empty_n,
        fft_kernel_modu2_M_1_read => grp_matrix_plus_SNR_fu_1284_fft_kernel_modu2_M_1_read,
        G1_M_imag_din => grp_matrix_plus_SNR_fu_1284_G1_M_imag_din,
        G1_M_imag_full_n => G1_M_imag_full_n,
        G1_M_imag_write => grp_matrix_plus_SNR_fu_1284_G1_M_imag_write);

    grp_real_1_fu_1296 : component real_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_real_1_fu_1296_ap_start,
        ap_done => grp_real_1_fu_1296_ap_done,
        ap_idle => grp_real_1_fu_1296_ap_idle,
        ap_ready => grp_real_1_fu_1296_ap_ready,
        complex_float_s_dout => grp_real_1_fu_1296_complex_float_s_dout,
        complex_float_s_empty_n => grp_real_1_fu_1296_complex_float_s_empty_n,
        complex_float_s_read => grp_real_1_fu_1296_complex_float_s_read,
        complex_float_s_din => grp_real_1_fu_1296_complex_float_s_din,
        complex_float_s_full_n => grp_real_1_fu_1296_complex_float_s_full_n,
        complex_float_s_write => grp_real_1_fu_1296_complex_float_s_write,
        p_val => grp_real_1_fu_1296_p_val,
        complex_float_s_i_blk_n => grp_real_1_fu_1296_complex_float_s_i_blk_n,
        complex_float_s_o_blk_n => grp_real_1_fu_1296_complex_float_s_o_blk_n);

    grp_imag_1_fu_1308 : component imag_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_imag_1_fu_1308_ap_start,
        ap_done => grp_imag_1_fu_1308_ap_done,
        ap_idle => grp_imag_1_fu_1308_ap_idle,
        ap_ready => grp_imag_1_fu_1308_ap_ready,
        complex_float_s_dout => grp_imag_1_fu_1308_complex_float_s_dout,
        complex_float_s_empty_n => grp_imag_1_fu_1308_complex_float_s_empty_n,
        complex_float_s_read => grp_imag_1_fu_1308_complex_float_s_read,
        complex_float_s_din => grp_imag_1_fu_1308_complex_float_s_din,
        complex_float_s_full_n => grp_imag_1_fu_1308_complex_float_s_full_n,
        complex_float_s_write => grp_imag_1_fu_1308_complex_float_s_write,
        p_val => grp_imag_1_fu_1308_p_val,
        complex_float_s_i_blk_n => grp_imag_1_fu_1308_complex_float_s_i_blk_n,
        complex_float_s_o_blk_n => grp_imag_1_fu_1308_complex_float_s_o_blk_n);

    grp_real379_fu_1320 : component real379
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_real379_fu_1320_ap_start,
        ap_done => grp_real379_fu_1320_ap_done,
        ap_idle => grp_real379_fu_1320_ap_idle,
        ap_ready => grp_real379_fu_1320_ap_ready,
        complex_float_M_real_din => grp_real379_fu_1320_complex_float_M_real_din,
        complex_float_M_real_full_n => grp_real379_fu_1320_complex_float_M_real_full_n,
        complex_float_M_real_write => grp_real379_fu_1320_complex_float_M_real_write,
        p_val => grp_real379_fu_1320_p_val,
        complex_float_M_real_blk_n => grp_real379_fu_1320_complex_float_M_real_blk_n);

    grp_imag380_fu_1332 : component imag380
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_imag380_fu_1332_ap_start,
        ap_done => grp_imag380_fu_1332_ap_done,
        ap_idle => grp_imag380_fu_1332_ap_idle,
        ap_ready => grp_imag380_fu_1332_ap_ready,
        complex_float_M_imag_din => grp_imag380_fu_1332_complex_float_M_imag_din,
        complex_float_M_imag_full_n => grp_imag380_fu_1332_complex_float_M_imag_full_n,
        complex_float_M_imag_write => grp_imag380_fu_1332_complex_float_M_imag_write,
        p_val => grp_imag380_fu_1332_p_val,
        complex_float_M_imag_blk_n => grp_imag380_fu_1332_complex_float_M_imag_blk_n);

    WienerDeblur_fmuljbC_U181 : component WienerDeblur_fmuljbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1345_p0,
        din1 => grp_fu_1345_p1,
        ce => grp_fu_1345_ce,
        dout => grp_fu_1345_p2);

    WienerDeblur_uitoOgC_U182 : component WienerDeblur_uitoOgC
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1351_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_1351_p1);

    G_M_imag_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_matrix_div_fu_1216_G_M_imag_din,
        if_full_n => G_M_imag_full_n,
        if_write => G_M_imag_write,
        if_dout => G_M_imag_dout,
        if_empty_n => G_M_imag_empty_n,
        if_read => G_M_imag_read);

    G_M_real_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_matrix_div_fu_1216_G_M_real_din,
        if_full_n => G_M_real_full_n,
        if_write => G_M_real_write,
        if_dout => G_M_real_dout,
        if_empty_n => G_M_real_empty_n,
        if_read => G_M_real_read);

    fft_kernel_modu_M_i_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_matrix_modulus_fu_1143_fft_kernel_modu_M_i_din,
        if_full_n => fft_kernel_modu_M_i_full_n,
        if_write => fft_kernel_modu_M_i_write,
        if_dout => fft_kernel_modu_M_i_dout,
        if_empty_n => fft_kernel_modu_M_i_empty_n,
        if_read => fft_kernel_modu_M_i_read);

    fft_kernel_modu_M_r_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_matrix_modulus_fu_1143_fft_kernel_modu_M_r_din,
        if_full_n => fft_kernel_modu_M_r_full_n,
        if_write => fft_kernel_modu_M_r_write,
        if_dout => fft_kernel_modu_M_r_dout,
        if_empty_n => fft_kernel_modu_M_r_empty_n,
        if_read => fft_kernel_modu_M_r_read);

    gauss_blur_M_imag_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_InnerProd382_fu_1268_gauss_blur_M_imag_din,
        if_full_n => gauss_blur_M_imag_full_n,
        if_write => gauss_blur_M_imag_write,
        if_dout => gauss_blur_M_imag_dout,
        if_empty_n => gauss_blur_M_imag_empty_n,
        if_read => gauss_blur_M_imag_read);

    gauss_blur_M_real_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_InnerProd382_fu_1268_gauss_blur_M_real_din,
        if_full_n => gauss_blur_M_real_full_n,
        if_write => gauss_blur_M_real_write,
        if_dout => gauss_blur_M_real_dout,
        if_empty_n => gauss_blur_M_real_empty_n,
        if_read => gauss_blur_M_real_read);

    G1_M_imag_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => G1_M_imag_din,
        if_full_n => G1_M_imag_full_n,
        if_write => G1_M_imag_write,
        if_dout => G1_M_imag_dout,
        if_empty_n => G1_M_imag_empty_n,
        if_read => G1_M_imag_read);

    G1_M_real_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => G1_M_real_din,
        if_full_n => G1_M_real_full_n,
        if_write => G1_M_real_write,
        if_dout => G1_M_real_dout,
        if_empty_n => G1_M_real_empty_n,
        if_read => G1_M_real_read);

    fft_kernel_M_imag_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_imag380_fu_1332_complex_float_M_imag_din,
        if_full_n => fft_kernel_M_imag_full_n,
        if_write => fft_kernel_M_imag_write,
        if_dout => fft_kernel_M_imag_dout,
        if_empty_n => fft_kernel_M_imag_empty_n,
        if_read => fft_kernel_M_imag_read);

    fft_kernel_M_real_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_real379_fu_1320_complex_float_M_real_din,
        if_full_n => fft_kernel_M_real_full_n,
        if_write => fft_kernel_M_real_write,
        if_dout => fft_kernel_M_real_dout,
        if_empty_n => fft_kernel_M_real_empty_n,
        if_read => fft_kernel_M_real_read);

    fft_kernel_modu2_M_1_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_InnerProd_1_fu_1240_fft_kernel_modu2_M_1_din,
        if_full_n => fft_kernel_modu2_M_1_full_n,
        if_write => fft_kernel_modu2_M_1_write,
        if_dout => fft_kernel_modu2_M_1_dout,
        if_empty_n => fft_kernel_modu2_M_1_empty_n,
        if_read => fft_kernel_modu2_M_1_read);

    fft_kernel_modu2_M_s_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_InnerProd_1_fu_1240_fft_kernel_modu2_M_s_din,
        if_full_n => fft_kernel_modu2_M_s_full_n,
        if_write => fft_kernel_modu2_M_s_write,
        if_dout => fft_kernel_modu2_M_s_dout,
        if_empty_n => fft_kernel_modu2_M_s_empty_n,
        if_read => fft_kernel_modu2_M_s_read);

    in1_fifo_U : component fifo_w64_d256_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => in1_din,
        if_full_n => in1_full_n,
        if_write => in1_write,
        if_dout => in1_dout,
        if_empty_n => in1_empty_n,
        if_read => in1_read);

    in2_fifo_U : component fifo_w64_d256_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => in2_din,
        if_full_n => in2_full_n,
        if_write => in2_write,
        if_dout => in2_dout,
        if_empty_n => in2_empty_n,
        if_read => in2_read);

    in3_fifo_U : component fifo_w64_d256_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => in3_din,
        if_full_n => in3_full_n,
        if_write => in3_write,
        if_dout => in3_dout,
        if_empty_n => in3_empty_n,
        if_read => in3_read);

    in4_fifo_U : component fifo_w64_d256_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => in4_din,
        if_full_n => in4_full_n,
        if_write => in4_write,
        if_dout => in4_dout,
        if_empty_n => in4_empty_n,
        if_read => in4_read);

    in5_fifo_U : component fifo_w64_d256_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => in5_din,
        if_full_n => in5_full_n,
        if_write => in5_write,
        if_dout => in5_dout,
        if_empty_n => in5_empty_n,
        if_read => in5_read);

    in6_fifo_U : component fifo_w64_d256_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => in6_din,
        if_full_n => in6_full_n,
        if_write => in6_write,
        if_dout => in6_dout,
        if_empty_n => in6_empty_n,
        if_read => in6_read);

    kernel_M_imag_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => kernel_M_imag_din,
        if_full_n => kernel_M_imag_full_n,
        if_write => kernel_M_imag_write,
        if_dout => kernel_M_imag_dout,
        if_empty_n => kernel_M_imag_empty_n,
        if_read => kernel_M_imag_read);

    kernel_M_real_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => kernel_M_real_din,
        if_full_n => kernel_M_real_full_n,
        if_write => kernel_M_real_write,
        if_dout => kernel_M_real_dout,
        if_empty_n => kernel_M_real_empty_n,
        if_read => kernel_M_real_read);

    middle_M_imag_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_imag380_fu_1332_complex_float_M_imag_din,
        if_full_n => middle_M_imag_full_n,
        if_write => middle_M_imag_write,
        if_dout => middle_M_imag_dout,
        if_empty_n => middle_M_imag_empty_n,
        if_read => middle_M_imag_read);

    middle_M_real_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_real379_fu_1320_complex_float_M_real_din,
        if_full_n => middle_M_real_full_n,
        if_write => middle_M_real_write,
        if_dout => middle_M_real_dout,
        if_empty_n => middle_M_real_empty_n,
        if_read => middle_M_real_read);

    middle2_M_imag_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_imag380_fu_1332_complex_float_M_imag_din,
        if_full_n => middle2_M_imag_full_n,
        if_write => middle2_M_imag_write,
        if_dout => middle2_M_imag_dout,
        if_empty_n => middle2_M_imag_empty_n,
        if_read => middle2_M_imag_read);

    middle2_M_real_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_real379_fu_1320_complex_float_M_real_din,
        if_full_n => middle2_M_real_full_n,
        if_write => middle2_M_real_write,
        if_dout => middle2_M_real_dout,
        if_empty_n => middle2_M_real_empty_n,
        if_read => middle2_M_real_read);

    out1_fifo_U : component fifo_w64_d256_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_fft_top_fu_1179_out_r_din,
        if_full_n => out1_full_n,
        if_write => out1_write,
        if_dout => out1_dout,
        if_empty_n => out1_empty_n,
        if_read => out1_read);

    out2_fifo_U : component fifo_w64_d256_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_fft_top_fu_1179_out_r_din,
        if_full_n => out2_full_n,
        if_write => out2_write,
        if_dout => out2_dout,
        if_empty_n => out2_empty_n,
        if_read => out2_read);

    out3_fifo_U : component fifo_w64_d256_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_fft_top_fu_1179_out_r_din,
        if_full_n => out3_full_n,
        if_write => out3_write,
        if_dout => out3_dout,
        if_empty_n => out3_empty_n,
        if_read => out3_read);

    out4_fifo_U : component fifo_w64_d256_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_fft_top_fu_1179_out_r_din,
        if_full_n => out4_full_n,
        if_write => out4_write,
        if_dout => out4_dout,
        if_empty_n => out4_empty_n,
        if_read => out4_read);

    out5_fifo_U : component fifo_w64_d256_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_fft_top_fu_1179_out_r_din,
        if_full_n => out5_full_n,
        if_write => out5_write,
        if_dout => out5_dout,
        if_empty_n => out5_empty_n,
        if_read => out5_read);

    out6_fifo_U : component fifo_w64_d256_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_fft_top_fu_1179_out_r_din,
        if_full_n => out6_full_n,
        if_write => out6_write,
        if_dout => out6_dout,
        if_empty_n => out6_empty_n,
        if_read => out6_read);

    xk1_M_imag_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xk1_M_imag_din,
        if_full_n => xk1_M_imag_full_n,
        if_write => xk1_M_imag_write,
        if_dout => xk1_M_imag_dout,
        if_empty_n => xk1_M_imag_empty_n,
        if_read => xk1_M_imag_read);

    xk1_M_real_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xk1_M_real_din,
        if_full_n => xk1_M_real_full_n,
        if_write => xk1_M_real_write,
        if_dout => xk1_M_real_dout,
        if_empty_n => xk1_M_real_empty_n,
        if_read => xk1_M_real_read);

    xk2_M_imag_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_imag380_fu_1332_complex_float_M_imag_din,
        if_full_n => xk2_M_imag_full_n,
        if_write => xk2_M_imag_write,
        if_dout => xk2_M_imag_dout,
        if_empty_n => xk2_M_imag_empty_n,
        if_read => xk2_M_imag_read);

    xk2_M_real_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_real379_fu_1320_complex_float_M_real_din,
        if_full_n => xk2_M_real_full_n,
        if_write => xk2_M_real_write,
        if_dout => xk2_M_real_dout,
        if_empty_n => xk2_M_real_empty_n,
        if_read => xk2_M_real_read);

    xn1_M_imag_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_imag380_fu_1332_complex_float_M_imag_din,
        if_full_n => xn1_M_imag_full_n,
        if_write => xn1_M_imag_write,
        if_dout => xn1_M_imag_dout,
        if_empty_n => xn1_M_imag_empty_n,
        if_read => xn1_M_imag_read);

    xn1_M_real_fifo_U : component fifo_w32_d65536_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_real379_fu_1320_complex_float_M_real_din,
        if_full_n => xn1_M_real_full_n,
        if_write => xn1_M_real_write,
        if_dout => xn1_M_real_dout,
        if_empty_n => xn1_M_real_empty_n,
        if_read => xn1_M_real_read);

    src_bw_data_stream_0_fifo_U : component fifo_w8_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => src_bw_data_stream_0_din,
        if_full_n => src_bw_data_stream_0_full_n,
        if_write => src_bw_data_stream_0_write,
        if_dout => src_bw_data_stream_0_dout,
        if_empty_n => src_bw_data_stream_0_empty_n,
        if_read => src_bw_data_stream_0_read);

    res_data_stream_0_V_fifo_U : component fifo_w8_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => res_data_stream_0_V_din,
        if_full_n => res_data_stream_0_V_full_n,
        if_write => res_data_stream_0_V_write,
        if_dout => res_data_stream_0_V_dout,
        if_empty_n => res_data_stream_0_V_empty_n,
        if_read => res_data_stream_0_V_read);





    INPUT_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_data_V_0_ack_out) and (ap_const_logic_1 = INPUT_data_V_0_vld_out))) then 
                                        INPUT_data_V_0_sel_rd <= not(INPUT_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_data_V_0_ack_in) and (ap_const_logic_1 = INPUT_data_V_0_vld_in))) then 
                                        INPUT_data_V_0_sel_wr <= not(INPUT_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = INPUT_data_V_0_vld_in) and (ap_const_lv2_2 = INPUT_data_V_0_state)) or ((ap_const_logic_0 = INPUT_data_V_0_vld_in) and (ap_const_logic_1 = INPUT_data_V_0_ack_out) and (ap_const_lv2_3 = INPUT_data_V_0_state)))) then 
                    INPUT_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = INPUT_data_V_0_ack_out) and (ap_const_lv2_1 = INPUT_data_V_0_state)) or ((ap_const_logic_0 = INPUT_data_V_0_ack_out) and (ap_const_logic_1 = INPUT_data_V_0_vld_in) and (ap_const_lv2_3 = INPUT_data_V_0_state)))) then 
                    INPUT_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_data_V_0_vld_in) and (ap_const_logic_1 = INPUT_data_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_data_V_0_ack_out) and (ap_const_logic_1 = INPUT_data_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_data_V_0_state)) or ((ap_const_logic_1 = INPUT_data_V_0_ack_out) and (ap_const_lv2_1 = INPUT_data_V_0_state)) or ((ap_const_logic_1 = INPUT_data_V_0_vld_in) and (ap_const_lv2_2 = INPUT_data_V_0_state)))) then 
                    INPUT_data_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    INPUT_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = INPUT_last_V_0_vld_in) and (ap_const_lv2_2 = INPUT_last_V_0_state)) or ((ap_const_logic_0 = INPUT_last_V_0_vld_in) and (ap_const_logic_1 = INPUT_last_V_0_ack_out) and (ap_const_lv2_3 = INPUT_last_V_0_state)))) then 
                    INPUT_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = INPUT_last_V_0_ack_out) and (ap_const_lv2_1 = INPUT_last_V_0_state)) or ((ap_const_logic_0 = INPUT_last_V_0_ack_out) and (ap_const_logic_1 = INPUT_last_V_0_vld_in) and (ap_const_lv2_3 = INPUT_last_V_0_state)))) then 
                    INPUT_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_last_V_0_vld_in) and (ap_const_logic_1 = INPUT_last_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_last_V_0_ack_out) and (ap_const_logic_1 = INPUT_last_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_last_V_0_state)) or ((ap_const_logic_1 = INPUT_last_V_0_ack_out) and (ap_const_lv2_1 = INPUT_last_V_0_state)) or ((ap_const_logic_1 = INPUT_last_V_0_vld_in) and (ap_const_lv2_2 = INPUT_last_V_0_state)))) then 
                    INPUT_last_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_data_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_data_V_1_vld_out))) then 
                                        OUTPUT_data_V_1_sel_rd <= not(OUTPUT_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_data_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_data_V_1_vld_in))) then 
                                        OUTPUT_data_V_1_sel_wr <= not(OUTPUT_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = OUTPUT_data_V_1_vld_in) and (ap_const_lv2_2 = OUTPUT_data_V_1_state)) or ((ap_const_logic_0 = OUTPUT_data_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_data_V_1_ack_out) and (ap_const_lv2_3 = OUTPUT_data_V_1_state)))) then 
                    OUTPUT_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = OUTPUT_data_V_1_ack_out) and (ap_const_lv2_1 = OUTPUT_data_V_1_state)) or ((ap_const_logic_0 = OUTPUT_data_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_data_V_1_vld_in) and (ap_const_lv2_3 = OUTPUT_data_V_1_state)))) then 
                    OUTPUT_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_data_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_data_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_data_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_data_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_data_V_1_state)) or ((ap_const_logic_1 = OUTPUT_data_V_1_ack_out) and (ap_const_lv2_1 = OUTPUT_data_V_1_state)) or ((ap_const_logic_1 = OUTPUT_data_V_1_vld_in) and (ap_const_lv2_2 = OUTPUT_data_V_1_state)))) then 
                    OUTPUT_data_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_last_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_last_V_1_vld_out))) then 
                                        OUTPUT_last_V_1_sel_rd <= not(OUTPUT_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_last_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_last_V_1_vld_in))) then 
                                        OUTPUT_last_V_1_sel_wr <= not(OUTPUT_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = OUTPUT_last_V_1_vld_in) and (ap_const_lv2_2 = OUTPUT_last_V_1_state)) or ((ap_const_logic_0 = OUTPUT_last_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_last_V_1_ack_out) and (ap_const_lv2_3 = OUTPUT_last_V_1_state)))) then 
                    OUTPUT_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = OUTPUT_last_V_1_ack_out) and (ap_const_lv2_1 = OUTPUT_last_V_1_state)) or ((ap_const_logic_0 = OUTPUT_last_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_last_V_1_vld_in) and (ap_const_lv2_3 = OUTPUT_last_V_1_state)))) then 
                    OUTPUT_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_last_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_last_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_last_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_last_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_last_V_1_state)) or ((ap_const_logic_1 = OUTPUT_last_V_1_ack_out) and (ap_const_lv2_1 = OUTPUT_last_V_1_state)) or ((ap_const_logic_1 = OUTPUT_last_V_1_vld_in) and (ap_const_lv2_2 = OUTPUT_last_V_1_state)))) then 
                    OUTPUT_last_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_user_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_user_V_1_vld_out))) then 
                                        OUTPUT_user_V_1_sel_rd <= not(OUTPUT_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_user_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_user_V_1_vld_in))) then 
                                        OUTPUT_user_V_1_sel_wr <= not(OUTPUT_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = OUTPUT_user_V_1_vld_in) and (ap_const_lv2_2 = OUTPUT_user_V_1_state)) or ((ap_const_logic_0 = OUTPUT_user_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_user_V_1_ack_out) and (ap_const_lv2_3 = OUTPUT_user_V_1_state)))) then 
                    OUTPUT_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = OUTPUT_user_V_1_ack_out) and (ap_const_lv2_1 = OUTPUT_user_V_1_state)) or ((ap_const_logic_0 = OUTPUT_user_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_user_V_1_vld_in) and (ap_const_lv2_3 = OUTPUT_user_V_1_state)))) then 
                    OUTPUT_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_user_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_user_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_user_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_user_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_user_V_1_state)) or ((ap_const_logic_1 = OUTPUT_user_V_1_ack_out) and (ap_const_lv2_1 = OUTPUT_user_V_1_state)) or ((ap_const_logic_1 = OUTPUT_user_V_1_vld_in) and (ap_const_lv2_2 = OUTPUT_user_V_1_state)))) then 
                    OUTPUT_user_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not((((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and ((guard_variable_for_W_1_reg_2401 = ap_const_lv1_1) or ((tmp_55_fu_1404_p2 = ap_const_lv1_1) and (tmp_54_fu_1398_p2 = ap_const_lv1_1))))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not((((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and ((guard_variable_for_W_1_reg_2401 = ap_const_lv1_1) or ((tmp_55_fu_1404_p2 = ap_const_lv1_1) and (tmp_54_fu_1398_p2 = ap_const_lv1_1))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state98) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state94) and (exitcond15_fu_1855_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_boolean_0 = ap_block_pp1_stage3_subdone)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state94) and (exitcond15_fu_1855_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_InnerProd381_fu_1252_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_InnerProd381_fu_1252_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
                    grp_InnerProd381_fu_1252_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_InnerProd381_fu_1252_ap_ready = ap_const_logic_1)) then 
                    grp_InnerProd381_fu_1252_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_InnerProd382_fu_1268_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_InnerProd382_fu_1268_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state53) and (exitcond4_fu_1688_p2 = ap_const_lv1_1))) then 
                    grp_InnerProd382_fu_1268_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_InnerProd382_fu_1268_ap_ready = ap_const_logic_1)) then 
                    grp_InnerProd382_fu_1268_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_InnerProd_1_fu_1240_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_InnerProd_1_fu_1240_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                    grp_InnerProd_1_fu_1240_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_InnerProd_1_fu_1240_ap_ready = ap_const_logic_1)) then 
                    grp_InnerProd_1_fu_1240_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KernelMaker_fu_1232_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_KernelMaker_fu_1232_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (exitcond1_fu_1573_p2 = ap_const_lv1_1))) then 
                    grp_KernelMaker_fu_1232_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KernelMaker_fu_1232_ap_ready = ap_const_logic_1)) then 
                    grp_KernelMaker_fu_1232_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fft_top_fu_1179_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fft_top_fu_1179_ap_start_reg <= ap_const_logic_0;
            else
                if (((not((((kernel_M_imag_empty_n = ap_const_logic_0) and (exitcond5_fu_1643_p2 = ap_const_lv1_0)) or ((kernel_M_real_empty_n = ap_const_logic_0) and (exitcond5_fu_1643_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state46) and (exitcond5_fu_1643_p2 = ap_const_lv1_1)) or (not((((xn1_M_imag_empty_n = ap_const_logic_0) and (exitcond10_fu_1529_p2 = ap_const_lv1_0)) or ((xn1_M_real_empty_n = ap_const_logic_0) and (exitcond10_fu_1529_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond10_fu_1529_p2 = ap_const_lv1_1)) or (not((((middle_M_imag_empty_n = ap_const_logic_0) and (exitcond_fu_1700_p2 = ap_const_lv1_0)) or ((middle_M_real_empty_n = ap_const_logic_0) and (exitcond_fu_1700_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state54) and (exitcond_fu_1700_p2 = ap_const_lv1_1)) or (not((((middle_M_imag_empty_n = ap_const_logic_0) and (exitcond3_fu_1585_p2 = ap_const_lv1_0)) or ((middle_M_real_empty_n = ap_const_logic_0) and (exitcond3_fu_1585_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond3_fu_1585_p2 = ap_const_lv1_1)) or (not((((middle2_M_imag_empty_n = ap_const_logic_0) and (exitcond18_fu_1811_p2 = ap_const_lv1_0)) or ((middle2_M_real_empty_n = ap_const_logic_0) and (exitcond18_fu_1811_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state87) and (exitcond18_fu_1811_p2 = ap_const_lv1_1)) or (not((((xk1_M_imag_empty_n = ap_const_logic_0) and (exitcond16_fu_1756_p2 = ap_const_lv1_0)) or ((xk1_M_real_empty_n = ap_const_logic_0) and (exitcond16_fu_1756_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state79) and (exitcond16_fu_1756_p2 = ap_const_lv1_1)))) then 
                    grp_fft_top_fu_1179_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft_top_fu_1179_ap_ready = ap_const_logic_1)) then 
                    grp_fft_top_fu_1179_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrix_div_1_fu_1204_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_matrix_div_1_fu_1204_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                    grp_matrix_div_1_fu_1204_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrix_div_1_fu_1204_ap_ready = ap_const_logic_1)) then 
                    grp_matrix_div_1_fu_1204_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrix_div_fu_1216_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_matrix_div_fu_1216_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
                    grp_matrix_div_fu_1216_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrix_div_fu_1216_ap_ready = ap_const_logic_1)) then 
                    grp_matrix_div_fu_1216_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrix_modulus_fu_1143_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_matrix_modulus_fu_1143_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                    grp_matrix_modulus_fu_1143_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrix_modulus_fu_1143_ap_ready = ap_const_logic_1)) then 
                    grp_matrix_modulus_fu_1143_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrix_plus_SNR_fu_1284_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_matrix_plus_SNR_fu_1284_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                    grp_matrix_plus_SNR_fu_1284_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrix_plus_SNR_fu_1284_ap_ready = ap_const_logic_1)) then 
                    grp_matrix_plus_SNR_fu_1284_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c12_reg_1132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_2857 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                c12_reg_1132 <= c_1_reg_2901;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state94) and (exitcond15_fu_1855_p2 = ap_const_lv1_1))) then 
                c12_reg_1132 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    c5_reg_923_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond8_fu_1518_p2 = ap_const_lv1_1))) then 
                c5_reg_923 <= ap_const_lv9_0;
            elsif ((not(((out2_empty_n = ap_const_logic_0) and (exitcond6_fu_1597_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state37) and (exitcond6_fu_1597_p2 = ap_const_lv1_1))) then 
                c5_reg_923 <= c_7_reg_2559;
            end if; 
        end if;
    end process;

    c6_reg_989_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond2_fu_1631_p2 = ap_const_lv1_1))) then 
                c6_reg_989 <= ap_const_lv9_0;
            elsif ((not(((out4_empty_n = ap_const_logic_0) and (exitcond17_fu_1712_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state58) and (exitcond17_fu_1712_p2 = ap_const_lv1_1))) then 
                c6_reg_989 <= c_9_reg_2647;
            end if; 
        end if;
    end process;

    c9_reg_967_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond2_fu_1631_p2 = ap_const_lv1_0))) then 
                c9_reg_967 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state48) and (grp_imag_1_fu_1308_complex_float_s_o_blk_n = ap_const_logic_1))) then 
                c9_reg_967 <= c_6_reg_2611;
            end if; 
        end if;
    end process;

    i_op_assign_10_reg_1044_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state85) and (grp_imag380_fu_1332_complex_float_M_imag_blk_n = ap_const_logic_1))) then 
                i_op_assign_10_reg_1044 <= c_16_reg_2717;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_fft_top_fu_1179_ap_done = ap_const_logic_1))) then 
                i_op_assign_10_reg_1044 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_op_assign_11_reg_1066_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state86) and (exitcond13_fu_1800_p2 = ap_const_lv1_0))) then 
                i_op_assign_11_reg_1066 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state89) and (grp_imag_1_fu_1308_complex_float_s_o_blk_n = ap_const_logic_1))) then 
                i_op_assign_11_reg_1066 <= r_16_reg_2743;
            end if; 
        end if;
    end process;

    i_op_assign_12_reg_1121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_2857 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_op_assign_12_reg_1121 <= tmp_87_mid2_v_reg_2871;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state94) and (exitcond15_fu_1855_p2 = ap_const_lv1_1))) then 
                i_op_assign_12_reg_1121 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_op_assign_13_reg_1077_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state93) and (grp_imag380_fu_1332_complex_float_M_imag_blk_n = ap_const_logic_1))) then 
                i_op_assign_13_reg_1077 <= r_18_reg_2761;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state90) and (grp_fft_top_fu_1179_ap_done = ap_const_logic_1))) then 
                i_op_assign_13_reg_1077 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_op_assign_14_reg_1099_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state94) and (exitcond15_fu_1855_p2 = ap_const_lv1_0))) then 
                i_op_assign_14_reg_1099 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state97) and (res_data_stream_0_V_full_n = ap_const_logic_1))) then 
                i_op_assign_14_reg_1099 <= c_17_reg_2804;
            end if; 
        end if;
    end process;

    i_op_assign_1_reg_1088_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state86) and (exitcond13_fu_1800_p2 = ap_const_lv1_1))) then 
                i_op_assign_1_reg_1088 <= ap_const_lv32_0;
            elsif ((not((((xk2_M_imag_empty_n = ap_const_logic_0) and (exitcond20_fu_1892_p2 = ap_const_lv1_0)) or ((xk2_M_real_empty_n = ap_const_logic_0) and (exitcond20_fu_1892_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state95) and (exitcond20_fu_1892_p2 = ap_const_lv1_1))) then 
                i_op_assign_1_reg_1088 <= r_15_reg_2780;
            end if; 
        end if;
    end process;

    i_op_assign_2_reg_879_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond7_fu_1492_p2 = ap_const_lv1_0))) then 
                i_op_assign_2_reg_879 <= ap_const_lv32_0;
            elsif ((not(((grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_0) or (grp_imag380_fu_1332_complex_float_M_imag_blk_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                i_op_assign_2_reg_879 <= c_reg_2482;
            end if; 
        end if;
    end process;

    i_op_assign_3_reg_890_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond7_fu_1492_p2 = ap_const_lv1_1))) then 
                i_op_assign_3_reg_890 <= ap_const_lv32_0;
            elsif ((not(((out1_empty_n = ap_const_logic_0) and (exitcond11_fu_1540_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond11_fu_1540_p2 = ap_const_lv1_1))) then 
                i_op_assign_3_reg_890 <= r_6_reg_2505;
            end if; 
        end if;
    end process;

    i_op_assign_4_reg_901_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond8_fu_1518_p2 = ap_const_lv1_0))) then 
                i_op_assign_4_reg_901 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_imag_1_fu_1308_complex_float_s_o_blk_n = ap_const_logic_1))) then 
                i_op_assign_4_reg_901 <= c_4_reg_2513;
            end if; 
        end if;
    end process;

    i_op_assign_5_reg_912_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_imag380_fu_1332_complex_float_M_imag_blk_n = ap_const_logic_1))) then 
                i_op_assign_5_reg_912 <= c_5_reg_2531;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_fft_top_fu_1179_ap_done = ap_const_logic_1))) then 
                i_op_assign_5_reg_912 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_op_assign_6_reg_978_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state52) and (grp_imag380_fu_1332_complex_float_M_imag_blk_n = ap_const_logic_1))) then 
                i_op_assign_6_reg_978 <= c_8_reg_2629;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state49) and (grp_fft_top_fu_1179_ap_done = ap_const_logic_1))) then 
                i_op_assign_6_reg_978 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_op_assign_7_reg_1011_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state64) and (grp_imag380_fu_1332_complex_float_M_imag_blk_n = ap_const_logic_1))) then 
                i_op_assign_7_reg_1011 <= r_14_reg_2663;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state57) and (grp_fft_top_fu_1179_ap_done = ap_const_logic_1))) then 
                i_op_assign_7_reg_1011 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_op_assign_8_reg_1022_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out5_empty_n = ap_const_logic_0) and (exitcond19_fu_1767_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state83) and (exitcond19_fu_1767_p2 = ap_const_lv1_1))) then 
                i_op_assign_8_reg_1022 <= r_13_reg_2691;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state77) and (grp_InnerProd381_fu_1252_ap_done = ap_const_logic_1))) then 
                i_op_assign_8_reg_1022 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_op_assign_9_reg_1033_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state78) and (exitcond12_fu_1745_p2 = ap_const_lv1_0))) then 
                i_op_assign_9_reg_1033 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state81) and (grp_imag_1_fu_1308_complex_float_s_o_blk_n = ap_const_logic_1))) then 
                i_op_assign_9_reg_1033 <= c_13_reg_2699;
            end if; 
        end if;
    end process;

    i_op_assign_reg_868_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_op_assign_reg_868 <= ap_const_lv32_0;
            elsif ((not(((src_bw_data_stream_0_empty_n = ap_const_logic_0) and (exitcond9_fu_1503_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond9_fu_1503_p2 = ap_const_lv1_1))) then 
                i_op_assign_reg_868 <= r_5_reg_2474;
            end if; 
        end if;
    end process;

    i_op_assign_s_reg_1055_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state78) and (exitcond12_fu_1745_p2 = ap_const_lv1_1))) then 
                i_op_assign_s_reg_1055 <= ap_const_lv32_0;
            elsif ((not(((out6_empty_n = ap_const_logic_0) and (exitcond21_fu_1822_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state91) and (exitcond21_fu_1822_p2 = ap_const_lv1_1))) then 
                i_op_assign_s_reg_1055 <= c_12_reg_2735;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_1110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_2857 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten_reg_1110 <= indvar_flatten_next_reg_2861;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state94) and (exitcond15_fu_1855_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_1110 <= ap_const_lv62_0;
            end if; 
        end if;
    end process;

    p_rec1_reg_823_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((kernel_M_imag_full_n = ap_const_logic_0) or (kernel_M_real_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_1380_p2 = ap_const_lv1_0))) then 
                p_rec1_reg_823 <= p_sum_fu_1374_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or ((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (guard_variable_for_W = ap_const_lv1_0))) then 
                p_rec1_reg_823 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_rec2_reg_834_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((kernel_M_imag_full_n = ap_const_logic_0) or (kernel_M_real_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_1380_p2 = ap_const_lv1_1))) then 
                p_rec2_reg_834 <= ap_const_lv8_0;
            elsif ((not((((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_54_fu_1398_p2 = ap_const_lv1_1) and (tmp_55_fu_1404_p2 = ap_const_lv1_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0))) then 
                p_rec2_reg_834 <= p_sum1_reg_2413;
            end if; 
        end if;
    end process;

    r6_reg_934_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and (exitcond1_fu_1573_p2 = ap_const_lv1_0))) then 
                r6_reg_934 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state35) and (grp_imag_1_fu_1308_complex_float_s_o_blk_n = ap_const_logic_1))) then 
                r6_reg_934 <= r_7_reg_2567;
            end if; 
        end if;
    end process;

    r7_reg_945_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (grp_imag380_fu_1332_complex_float_M_imag_blk_n = ap_const_logic_1))) then 
                r7_reg_945 <= r_8_reg_2575;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (grp_fft_top_fu_1179_ap_done = ap_const_logic_1))) then 
                r7_reg_945 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    r8_reg_956_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out3_empty_n = ap_const_logic_0) and (exitcond14_fu_1655_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state50) and (exitcond14_fu_1655_p2 = ap_const_lv1_1))) then 
                r8_reg_956 <= r_10_reg_2603;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (grp_KernelMaker_fu_1232_ap_done = ap_const_logic_1))) then 
                r8_reg_956 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    r9_reg_1000_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state53) and (exitcond4_fu_1688_p2 = ap_const_lv1_0))) then 
                r9_reg_1000 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state56) and (grp_imag_1_fu_1308_complex_float_s_o_blk_n = ap_const_logic_1))) then 
                r9_reg_1000 <= r_9_reg_2655;
            end if; 
        end if;
    end process;

    r_reg_857_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_56_reg_2447 = ap_const_lv1_1))) then 
                r_reg_857 <= r_4_reg_2451;
            elsif ((not((((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and ((guard_variable_for_W_1_reg_2401 = ap_const_lv1_1) or ((tmp_55_fu_1404_p2 = ap_const_lv1_1) and (tmp_54_fu_1398_p2 = ap_const_lv1_1))))) then 
                r_reg_857 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    tmp_52_reg_846_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_54_fu_1398_p2 = ap_const_lv1_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0))) then 
                tmp_52_reg_846 <= tmp_53_fu_1392_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                tmp_52_reg_846 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_data_V_0_load_A)) then
                INPUT_data_V_0_payload_A <= in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_data_V_0_load_B)) then
                INPUT_data_V_0_payload_B <= in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_data_V_1_load_A)) then
                OUTPUT_data_V_1_payload_A <= p_Result_29_fu_2347_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_data_V_1_load_B)) then
                OUTPUT_data_V_1_payload_B <= p_Result_29_fu_2347_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_last_V_1_load_A)) then
                OUTPUT_last_V_1_payload_A <= out_stream_last_V_tm_reg_2881;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_last_V_1_load_B)) then
                OUTPUT_last_V_1_payload_B <= out_stream_last_V_tm_reg_2881;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_user_V_1_load_A)) then
                OUTPUT_user_V_1_payload_A <= out_stream_user_V_tm_reg_2876;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_user_V_1_load_B)) then
                OUTPUT_user_V_1_payload_B <= out_stream_user_V_tm_reg_2876;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_fu_2238_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                c14_mid2_reg_2866 <= c14_mid2_fu_2260_p3;
                out_stream_last_V_tm_reg_2881 <= out_stream_last_V_tm_fu_2336_p2;
                out_stream_user_V_tm_reg_2876 <= out_stream_user_V_tm_fu_2325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                c_12_reg_2735 <= c_12_fu_1805_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((xk1_M_imag_empty_n = ap_const_logic_0) and (exitcond16_fu_1756_p2 = ap_const_lv1_0)) or ((xk1_M_real_empty_n = ap_const_logic_0) and (exitcond16_fu_1756_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                c_13_reg_2699 <= c_13_fu_1761_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out5_empty_n = ap_const_logic_0) and (exitcond19_fu_1767_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                c_16_reg_2717 <= c_16_fu_1772_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((xk2_M_imag_empty_n = ap_const_logic_0) and (exitcond20_fu_1892_p2 = ap_const_lv1_0)) or ((xk2_M_real_empty_n = ap_const_logic_0) and (exitcond20_fu_1892_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state95))) then
                c_17_reg_2804 <= c_17_fu_1897_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_2857 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001))) then
                c_1_reg_2901 <= c_1_fu_2342_p2;
                tmp_99_reg_2896 <= res_data_stream_0_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((xn1_M_imag_empty_n = ap_const_logic_0) and (exitcond10_fu_1529_p2 = ap_const_lv1_0)) or ((xn1_M_real_empty_n = ap_const_logic_0) and (exitcond10_fu_1529_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                c_4_reg_2513 <= c_4_fu_1534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out1_empty_n = ap_const_logic_0) and (exitcond11_fu_1540_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                c_5_reg_2531 <= c_5_fu_1545_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((kernel_M_imag_empty_n = ap_const_logic_0) and (exitcond5_fu_1643_p2 = ap_const_lv1_0)) or ((kernel_M_real_empty_n = ap_const_logic_0) and (exitcond5_fu_1643_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                c_6_reg_2611 <= c_6_fu_1649_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                c_7_reg_2559 <= c_7_fu_1579_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out3_empty_n = ap_const_logic_0) and (exitcond14_fu_1655_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                c_8_reg_2629 <= c_8_fu_1660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                c_9_reg_2647 <= c_9_fu_1694_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((src_bw_data_stream_0_empty_n = ap_const_logic_0) and (exitcond9_fu_1503_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                c_reg_2482 <= c_fu_1508_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                exitcond_flatten_reg_2857 <= exitcond_flatten_fu_2238_p2;
                exitcond_flatten_reg_2857_pp1_iter1_reg <= exitcond_flatten_reg_2857;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_55_fu_1404_p2 = ap_const_lv1_1) and (tmp_54_fu_1398_p2 = ap_const_lv1_1) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0))) then
                guard_variable_for_W <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or ((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                guard_variable_for_W_1_reg_2401 <= guard_variable_for_W;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                indvar_flatten_next_reg_2861 <= indvar_flatten_next_fu_2243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((xk2_M_imag_empty_n = ap_const_logic_0) and (exitcond20_fu_1892_p2 = ap_const_lv1_0)) or ((xk2_M_real_empty_n = ap_const_logic_0) and (exitcond20_fu_1892_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state95) and (exitcond20_fu_1892_p2 = ap_const_lv1_0))) then
                isNeg_reg_2819 <= sh_assign_fu_1933_p2(8 downto 8);
                p_Result_s_reg_2809 <= p_Val2_101_fu_1903_p1(31 downto 31);
                tmp_V_8_reg_2814 <= tmp_V_8_fu_1925_p1;
                ush_reg_2824 <= ush_fu_1957_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((kernel_M_imag_empty_n = ap_const_logic_0) and (exitcond5_fu_1643_p2 = ap_const_lv1_0)) or ((kernel_M_real_empty_n = ap_const_logic_0) and (exitcond5_fu_1643_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state46) and (exitcond5_fu_1643_p2 = ap_const_lv1_0))) then
                kernel_M_imag_read_reg_2621 <= kernel_M_imag_dout;
                kernel_M_real_read_reg_2616 <= kernel_M_real_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((middle2_M_imag_empty_n = ap_const_logic_0) and (exitcond18_fu_1811_p2 = ap_const_lv1_0)) or ((middle2_M_real_empty_n = ap_const_logic_0) and (exitcond18_fu_1811_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state87) and (exitcond18_fu_1811_p2 = ap_const_lv1_0))) then
                middle2_M_imag_read_reg_2753 <= middle2_M_imag_dout;
                middle2_M_real_read_reg_2748 <= middle2_M_real_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((out1_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                out1_M_imag_load_ne_reg_2546 <= out1_dout(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((out2_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                out2_M_imag_load_ne_reg_2590 <= out2_dout(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out3_empty_n = ap_const_logic_0) or (grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                out3_M_imag_load_ne_reg_2639 <= out3_dout(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state59) and (out4_empty_n = ap_const_logic_1))) then
                out4_M_imag_load_ne_reg_2678 <= out4_dout(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_0) or (out5_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state84))) then
                out5_M_imag_load_ne_reg_2727 <= out5_dout(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_0) or (out6_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                out6_M_imag_load_ne_reg_2771 <= out6_dout(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state96)) then
                p_Val2_108_reg_2835 <= p_Val2_108_fu_2035_p3;
                tmp_105_reg_2840 <= tmp_105_fu_2042_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_sum1_reg_2413 <= p_sum1_fu_1386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                r_10_reg_2603 <= r_10_fu_1637_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                r_13_reg_2691 <= r_13_fu_1750_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out4_empty_n = ap_const_logic_0) and (exitcond17_fu_1712_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                r_14_reg_2663 <= r_14_fu_1717_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then
                r_15_reg_2780 <= r_15_fu_1860_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((middle2_M_imag_empty_n = ap_const_logic_0) and (exitcond18_fu_1811_p2 = ap_const_lv1_0)) or ((middle2_M_real_empty_n = ap_const_logic_0) and (exitcond18_fu_1811_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                r_16_reg_2743 <= r_16_fu_1816_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out6_empty_n = ap_const_logic_0) and (exitcond21_fu_1822_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state91))) then
                r_18_reg_2761 <= r_18_fu_1827_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                r_4_reg_2451 <= r_4_fu_1447_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                r_5_reg_2474 <= r_5_fu_1497_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                r_6_reg_2505 <= r_6_fu_1523_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((middle_M_imag_empty_n = ap_const_logic_0) and (exitcond3_fu_1585_p2 = ap_const_lv1_0)) or ((middle_M_real_empty_n = ap_const_logic_0) and (exitcond3_fu_1585_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                r_7_reg_2567 <= r_7_fu_1591_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out2_empty_n = ap_const_logic_0) and (exitcond6_fu_1597_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                r_8_reg_2575 <= r_8_fu_1603_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((middle_M_imag_empty_n = ap_const_logic_0) and (exitcond_fu_1700_p2 = ap_const_lv1_0)) or ((middle_M_real_empty_n = ap_const_logic_0) and (exitcond_fu_1700_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                r_9_reg_2655 <= r_9_fu_1706_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state29) or ((grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then
                reg_1354 <= grp_fu_1345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((((middle_M_imag_empty_n = ap_const_logic_0) and (exitcond_fu_1700_p2 = ap_const_lv1_0)) or ((middle_M_real_empty_n = ap_const_logic_0) and (exitcond_fu_1700_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state54) and (exitcond_fu_1700_p2 = ap_const_lv1_0)) or (not((((middle_M_imag_empty_n = ap_const_logic_0) and (exitcond3_fu_1585_p2 = ap_const_lv1_0)) or ((middle_M_real_empty_n = ap_const_logic_0) and (exitcond3_fu_1585_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond3_fu_1585_p2 = ap_const_lv1_0)))) then
                reg_1360 <= middle_M_real_dout;
                reg_1365 <= middle_M_imag_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out6_empty_n = ap_const_logic_0) and (exitcond21_fu_1822_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state91) and (exitcond21_fu_1822_p2 = ap_const_lv1_0))) then
                tmp_112_reg_2766 <= tmp_112_fu_1833_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_56_reg_2447 = ap_const_lv1_1))) then
                tmp_3_reg_2456 <= INPUT_data_V_0_data_out(15 downto 8);
                tmp_5_reg_2461 <= INPUT_data_V_0_data_out(23 downto 16);
                tmp_7_reg_2466 <= INPUT_data_V_0_data_out(31 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_56_reg_2447 <= tmp_56_fu_1442_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((src_bw_data_stream_0_empty_n = ap_const_logic_0) and (exitcond9_fu_1503_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond9_fu_1503_p2 = ap_const_lv1_0))) then
                tmp_63_reg_2487 <= src_bw_data_stream_0_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_64_reg_2497 <= grp_fu_1351_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out1_empty_n = ap_const_logic_0) and (exitcond11_fu_1540_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond11_fu_1540_p2 = ap_const_lv1_0))) then
                tmp_74_reg_2536 <= tmp_74_fu_1551_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out2_empty_n = ap_const_logic_0) and (exitcond6_fu_1597_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state37) and (exitcond6_fu_1597_p2 = ap_const_lv1_0))) then
                tmp_75_reg_2580 <= tmp_75_fu_1609_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out3_empty_n = ap_const_logic_0) and (exitcond14_fu_1655_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state50) and (exitcond14_fu_1655_p2 = ap_const_lv1_0))) then
                tmp_77_reg_2634 <= tmp_77_fu_1666_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out4_empty_n = ap_const_logic_0) and (exitcond17_fu_1712_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state58) and (exitcond17_fu_1712_p2 = ap_const_lv1_0))) then
                tmp_80_reg_2668 <= tmp_80_fu_1723_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_2238_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_87_mid2_v_reg_2871 <= tmp_87_mid2_v_fu_2285_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out5_empty_n = ap_const_logic_0) and (exitcond19_fu_1767_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state83) and (exitcond19_fu_1767_p2 = ap_const_lv1_0))) then
                tmp_87_reg_2722 <= tmp_87_fu_1778_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_2857 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                tmp_95_reg_2886 <= res_data_stream_0_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_2857 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001))) then
                tmp_96_reg_2891 <= res_data_stream_0_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((xk1_M_imag_empty_n = ap_const_logic_0) and (exitcond16_fu_1756_p2 = ap_const_lv1_0)) or ((xk1_M_real_empty_n = ap_const_logic_0) and (exitcond16_fu_1756_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state79) and (exitcond16_fu_1756_p2 = ap_const_lv1_0))) then
                xk1_M_imag_read_reg_2709 <= xk1_M_imag_dout;
                xk1_M_real_read_reg_2704 <= xk1_M_real_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((xn1_M_imag_empty_n = ap_const_logic_0) and (exitcond10_fu_1529_p2 = ap_const_lv1_0)) or ((xn1_M_real_empty_n = ap_const_logic_0) and (exitcond10_fu_1529_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond10_fu_1529_p2 = ap_const_lv1_0))) then
                xn1_M_imag_read_reg_2523 <= xn1_M_imag_dout;
                xn1_M_real_read_reg_2518 <= xn1_M_real_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, OUTPUT_data_V_1_ack_in, OUTPUT_data_V_1_state, OUTPUT_user_V_1_ack_in, OUTPUT_user_V_1_state, OUTPUT_last_V_1_ack_in, OUTPUT_last_V_1_state, guard_variable_for_W, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp1_stage1, ap_CS_fsm_state30, grp_real379_fu_1320_complex_float_M_real_blk_n, ap_CS_fsm_state42, ap_CS_fsm_state63, ap_CS_fsm_state33, middle_M_real_empty_n, exitcond3_fu_1585_p2, middle_M_imag_empty_n, ap_CS_fsm_state54, exitcond_fu_1700_p2, kernel_M_real_full_n, guard_variable_for_W_1_load_fu_1370_p1, kernel_M_imag_full_n, guard_variable_for_W_1_reg_2401, ap_CS_fsm_state2, ap_CS_fsm_state4, tmp_54_fu_1398_p2, tmp_55_fu_1404_p2, tmp_56_fu_1442_p2, ap_CS_fsm_state11, ap_CS_fsm_state12, src_bw_data_stream_0_empty_n, exitcond9_fu_1503_p2, ap_CS_fsm_state20, ap_CS_fsm_state21, xn1_M_real_empty_n, exitcond10_fu_1529_p2, xn1_M_imag_empty_n, ap_CS_fsm_state25, out1_empty_n, exitcond11_fu_1540_p2, ap_CS_fsm_state26, ap_CS_fsm_state32, ap_CS_fsm_state37, out2_empty_n, exitcond6_fu_1597_p2, ap_CS_fsm_state38, ap_CS_fsm_state45, ap_CS_fsm_state46, kernel_M_real_empty_n, exitcond5_fu_1643_p2, kernel_M_imag_empty_n, ap_CS_fsm_state50, out3_empty_n, exitcond14_fu_1655_p2, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state58, out4_empty_n, exitcond17_fu_1712_p2, ap_CS_fsm_state59, ap_CS_fsm_state78, ap_CS_fsm_state79, xk1_M_real_empty_n, exitcond16_fu_1756_p2, xk1_M_imag_empty_n, ap_CS_fsm_state83, out5_empty_n, exitcond19_fu_1767_p2, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state87, middle2_M_real_empty_n, exitcond18_fu_1811_p2, middle2_M_imag_empty_n, ap_CS_fsm_state91, out6_empty_n, exitcond21_fu_1822_p2, ap_CS_fsm_state92, exitcond15_fu_1855_p2, ap_CS_fsm_state94, ap_CS_fsm_state95, xk2_M_real_empty_n, exitcond20_fu_1892_p2, xk2_M_imag_empty_n, exitcond_flatten_fu_2238_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp1_stage0_subdone, ap_block_pp1_stage3_subdone, ap_block_pp1_stage1_subdone, grp_matrix_modulus_fu_1143_ap_done, grp_fft_top_fu_1179_ap_done, grp_matrix_div_1_fu_1204_ap_done, grp_matrix_div_fu_1216_ap_done, grp_KernelMaker_fu_1232_ap_done, grp_InnerProd_1_fu_1240_ap_done, grp_InnerProd381_fu_1252_ap_done, grp_InnerProd382_fu_1268_ap_done, grp_matrix_plus_SNR_fu_1284_ap_done, grp_real_1_fu_1296_complex_float_s_o_blk_n, grp_imag_1_fu_1308_complex_float_s_o_blk_n, grp_imag380_fu_1332_complex_float_M_imag_blk_n, tmp_s_fu_1380_p2, ap_CS_fsm_state19, exitcond7_fu_1492_p2, ap_CS_fsm_state23, exitcond8_fu_1518_p2, ap_CS_fsm_state24, ap_CS_fsm_state31, ap_CS_fsm_state35, exitcond1_fu_1573_p2, ap_CS_fsm_state36, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state48, exitcond2_fu_1631_p2, ap_CS_fsm_state49, ap_CS_fsm_state52, ap_CS_fsm_state56, exitcond4_fu_1688_p2, ap_CS_fsm_state57, ap_CS_fsm_state64, ap_CS_fsm_state77, ap_CS_fsm_state81, exitcond12_fu_1745_p2, ap_CS_fsm_state82, ap_CS_fsm_state85, ap_CS_fsm_state89, exitcond13_fu_1800_p2, ap_CS_fsm_state90, ap_CS_fsm_state93, ap_CS_fsm_state97, res_data_stream_0_V_full_n, ap_CS_fsm_state67, ap_CS_fsm_state73, ap_CS_fsm_state75, ap_CS_fsm_state69, ap_CS_fsm_state65, ap_CS_fsm_state71, ap_CS_fsm_state22, ap_CS_fsm_state34, ap_CS_fsm_state47, ap_CS_fsm_state55, ap_CS_fsm_state80, ap_CS_fsm_state88, ap_CS_fsm_state104, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp1_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or ((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (guard_variable_for_W = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((ap_start = ap_const_logic_0) or ((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (guard_variable_for_W_1_load_fu_1370_p1 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((kernel_M_imag_full_n = ap_const_logic_0) or (kernel_M_real_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_1380_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((kernel_M_imag_full_n = ap_const_logic_0) or (kernel_M_real_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_1380_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if ((not((((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and ((guard_variable_for_W_1_reg_2401 = ap_const_lv1_1) or ((tmp_55_fu_1404_p2 = ap_const_lv1_1) and (tmp_54_fu_1398_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not((((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_54_fu_1398_p2 = ap_const_lv1_1) and (tmp_55_fu_1404_p2 = ap_const_lv1_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not((((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_54_fu_1398_p2 = ap_const_lv1_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_56_fu_1442_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_56_fu_1442_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond7_fu_1492_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if ((not(((src_bw_data_stream_0_empty_n = ap_const_logic_0) and (exitcond9_fu_1503_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond9_fu_1503_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif ((not(((src_bw_data_stream_0_empty_n = ap_const_logic_0) and (exitcond9_fu_1503_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond9_fu_1503_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if ((not(((grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_0) or (grp_imag380_fu_1332_complex_float_M_imag_blk_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond8_fu_1518_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                if ((not((((xn1_M_imag_empty_n = ap_const_logic_0) and (exitcond10_fu_1529_p2 = ap_const_lv1_0)) or ((xn1_M_real_empty_n = ap_const_logic_0) and (exitcond10_fu_1529_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond10_fu_1529_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                elsif ((not((((xn1_M_imag_empty_n = ap_const_logic_0) and (exitcond10_fu_1529_p2 = ap_const_lv1_0)) or ((xn1_M_real_empty_n = ap_const_logic_0) and (exitcond10_fu_1529_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond10_fu_1529_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_real_1_fu_1296_complex_float_s_o_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_imag_1_fu_1308_complex_float_s_o_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_fft_top_fu_1179_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if ((not(((out1_empty_n = ap_const_logic_0) and (exitcond11_fu_1540_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond11_fu_1540_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                elsif ((not(((out1_empty_n = ap_const_logic_0) and (exitcond11_fu_1540_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond11_fu_1540_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((out1_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_imag380_fu_1332_complex_float_M_imag_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (exitcond1_fu_1573_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state33 => 
                if ((not((((middle_M_imag_empty_n = ap_const_logic_0) and (exitcond3_fu_1585_p2 = ap_const_lv1_0)) or ((middle_M_real_empty_n = ap_const_logic_0) and (exitcond3_fu_1585_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond3_fu_1585_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                elsif ((not((((middle_M_imag_empty_n = ap_const_logic_0) and (exitcond3_fu_1585_p2 = ap_const_lv1_0)) or ((middle_M_real_empty_n = ap_const_logic_0) and (exitcond3_fu_1585_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond3_fu_1585_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_real_1_fu_1296_complex_float_s_o_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (grp_imag_1_fu_1308_complex_float_s_o_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (grp_fft_top_fu_1179_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if ((not(((out2_empty_n = ap_const_logic_0) and (exitcond6_fu_1597_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state37) and (exitcond6_fu_1597_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                elsif ((not(((out2_empty_n = ap_const_logic_0) and (exitcond6_fu_1597_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state37) and (exitcond6_fu_1597_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((out2_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (grp_imag380_fu_1332_complex_float_M_imag_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (grp_KernelMaker_fu_1232_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond2_fu_1631_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                if ((not((((kernel_M_imag_empty_n = ap_const_logic_0) and (exitcond5_fu_1643_p2 = ap_const_lv1_0)) or ((kernel_M_real_empty_n = ap_const_logic_0) and (exitcond5_fu_1643_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state46) and (exitcond5_fu_1643_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                elsif ((not((((kernel_M_imag_empty_n = ap_const_logic_0) and (exitcond5_fu_1643_p2 = ap_const_lv1_0)) or ((kernel_M_real_empty_n = ap_const_logic_0) and (exitcond5_fu_1643_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state46) and (exitcond5_fu_1643_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state47) and (grp_real_1_fu_1296_complex_float_s_o_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state48) and (grp_imag_1_fu_1308_complex_float_s_o_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state49) and (grp_fft_top_fu_1179_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                if ((not(((out3_empty_n = ap_const_logic_0) and (exitcond14_fu_1655_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state50) and (exitcond14_fu_1655_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                elsif ((not(((out3_empty_n = ap_const_logic_0) and (exitcond14_fu_1655_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state50) and (exitcond14_fu_1655_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if ((not(((out3_empty_n = ap_const_logic_0) or (grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state52) and (grp_imag380_fu_1332_complex_float_M_imag_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state53) and (exitcond4_fu_1688_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state54 => 
                if ((not((((middle_M_imag_empty_n = ap_const_logic_0) and (exitcond_fu_1700_p2 = ap_const_lv1_0)) or ((middle_M_real_empty_n = ap_const_logic_0) and (exitcond_fu_1700_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state54) and (exitcond_fu_1700_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                elsif ((not((((middle_M_imag_empty_n = ap_const_logic_0) and (exitcond_fu_1700_p2 = ap_const_lv1_0)) or ((middle_M_real_empty_n = ap_const_logic_0) and (exitcond_fu_1700_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state54) and (exitcond_fu_1700_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state55 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state55) and (grp_real_1_fu_1296_complex_float_s_o_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and (grp_imag_1_fu_1308_complex_float_s_o_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state57) and (grp_fft_top_fu_1179_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                if ((not(((out4_empty_n = ap_const_logic_0) and (exitcond17_fu_1712_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state58) and (exitcond17_fu_1712_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                elsif ((not(((out4_empty_n = ap_const_logic_0) and (exitcond17_fu_1712_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state58) and (exitcond17_fu_1712_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state59) and (out4_empty_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                if (((grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state64) and (grp_imag380_fu_1332_complex_float_M_imag_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state65) and (grp_InnerProd382_fu_1268_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state67) and (grp_matrix_modulus_fu_1143_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state69) and (grp_InnerProd_1_fu_1240_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state69;
                end if;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state71) and (grp_matrix_plus_SNR_fu_1284_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state73) and (grp_matrix_div_1_fu_1204_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state75) and (grp_matrix_div_fu_1216_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state77) and (grp_InnerProd381_fu_1252_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state78 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state78) and (exitcond12_fu_1745_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state79 => 
                if ((not((((xk1_M_imag_empty_n = ap_const_logic_0) and (exitcond16_fu_1756_p2 = ap_const_lv1_0)) or ((xk1_M_real_empty_n = ap_const_logic_0) and (exitcond16_fu_1756_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state79) and (exitcond16_fu_1756_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                elsif ((not((((xk1_M_imag_empty_n = ap_const_logic_0) and (exitcond16_fu_1756_p2 = ap_const_lv1_0)) or ((xk1_M_real_empty_n = ap_const_logic_0) and (exitcond16_fu_1756_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state79) and (exitcond16_fu_1756_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state80 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state80) and (grp_real_1_fu_1296_complex_float_s_o_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state81) and (grp_imag_1_fu_1308_complex_float_s_o_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_state82 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_fft_top_fu_1179_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                if ((not(((out5_empty_n = ap_const_logic_0) and (exitcond19_fu_1767_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state83) and (exitcond19_fu_1767_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                elsif ((not(((out5_empty_n = ap_const_logic_0) and (exitcond19_fu_1767_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state83) and (exitcond19_fu_1767_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state84 => 
                if ((not(((grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_0) or (out5_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state84))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state85 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state85) and (grp_imag380_fu_1332_complex_float_M_imag_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state86 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state86) and (exitcond13_fu_1800_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state87 => 
                if ((not((((middle2_M_imag_empty_n = ap_const_logic_0) and (exitcond18_fu_1811_p2 = ap_const_lv1_0)) or ((middle2_M_real_empty_n = ap_const_logic_0) and (exitcond18_fu_1811_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state87) and (exitcond18_fu_1811_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state90;
                elsif ((not((((middle2_M_imag_empty_n = ap_const_logic_0) and (exitcond18_fu_1811_p2 = ap_const_lv1_0)) or ((middle2_M_real_empty_n = ap_const_logic_0) and (exitcond18_fu_1811_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state87) and (exitcond18_fu_1811_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state88 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state88) and (grp_real_1_fu_1296_complex_float_s_o_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when ap_ST_fsm_state89 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state89) and (grp_imag_1_fu_1308_complex_float_s_o_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state90 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state90) and (grp_fft_top_fu_1179_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state91;
                else
                    ap_NS_fsm <= ap_ST_fsm_state90;
                end if;
            when ap_ST_fsm_state91 => 
                if ((not(((out6_empty_n = ap_const_logic_0) and (exitcond21_fu_1822_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state91) and (exitcond21_fu_1822_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                elsif ((not(((out6_empty_n = ap_const_logic_0) and (exitcond21_fu_1822_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state91) and (exitcond21_fu_1822_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state92;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_state92 => 
                if ((not(((grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_0) or (out6_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                else
                    ap_NS_fsm <= ap_ST_fsm_state92;
                end if;
            when ap_ST_fsm_state93 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state93) and (grp_imag380_fu_1332_complex_float_M_imag_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state91;
                else
                    ap_NS_fsm <= ap_ST_fsm_state93;
                end if;
            when ap_ST_fsm_state94 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state94) and (exitcond15_fu_1855_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state95;
                end if;
            when ap_ST_fsm_state95 => 
                if ((not((((xk2_M_imag_empty_n = ap_const_logic_0) and (exitcond20_fu_1892_p2 = ap_const_lv1_0)) or ((xk2_M_real_empty_n = ap_const_logic_0) and (exitcond20_fu_1892_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state95) and (exitcond20_fu_1892_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                elsif ((not((((xk2_M_imag_empty_n = ap_const_logic_0) and (exitcond20_fu_1892_p2 = ap_const_lv1_0)) or ((xk2_M_real_empty_n = ap_const_logic_0) and (exitcond20_fu_1892_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state95) and (exitcond20_fu_1892_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                else
                    ap_NS_fsm <= ap_ST_fsm_state95;
                end if;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state97) and (res_data_stream_0_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_2238_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_2238_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state104;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((not(((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state104;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_pp1_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                end if;
            when ap_ST_fsm_state104 => 
                if ((not(((ap_const_logic_0 = OUTPUT_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_user_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_data_V_1_ack_in))) and (OUTPUT_last_V_1_state(0) = ap_const_logic_0) and (OUTPUT_user_V_1_state(0) = ap_const_logic_0) and (OUTPUT_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state104;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    G1_M_imag_din_assign_proc : process(grp_matrix_div_1_fu_1204_G1_M_imag_din, grp_matrix_plus_SNR_fu_1284_G1_M_imag_din, ap_CS_fsm_state73, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            G1_M_imag_din <= grp_matrix_plus_SNR_fu_1284_G1_M_imag_din;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            G1_M_imag_din <= grp_matrix_div_1_fu_1204_G1_M_imag_din;
        else 
            G1_M_imag_din <= grp_matrix_plus_SNR_fu_1284_G1_M_imag_din;
        end if; 
    end process;

    G1_M_imag_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    G1_M_imag_read_assign_proc : process(grp_matrix_div_1_fu_1204_G1_M_imag_read, grp_matrix_div_fu_1216_G1_M_imag_read, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            G1_M_imag_read <= grp_matrix_div_fu_1216_G1_M_imag_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            G1_M_imag_read <= grp_matrix_div_1_fu_1204_G1_M_imag_read;
        else 
            G1_M_imag_read <= ap_const_logic_0;
        end if; 
    end process;


    G1_M_imag_write_assign_proc : process(grp_matrix_div_1_fu_1204_G1_M_imag_write, grp_matrix_plus_SNR_fu_1284_G1_M_imag_write, ap_CS_fsm_state73, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            G1_M_imag_write <= grp_matrix_plus_SNR_fu_1284_G1_M_imag_write;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            G1_M_imag_write <= grp_matrix_div_1_fu_1204_G1_M_imag_write;
        else 
            G1_M_imag_write <= ap_const_logic_0;
        end if; 
    end process;


    G1_M_real_din_assign_proc : process(grp_matrix_div_1_fu_1204_G1_M_real_din, grp_matrix_plus_SNR_fu_1284_G1_M_real_din, ap_CS_fsm_state73, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            G1_M_real_din <= grp_matrix_plus_SNR_fu_1284_G1_M_real_din;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            G1_M_real_din <= grp_matrix_div_1_fu_1204_G1_M_real_din;
        else 
            G1_M_real_din <= grp_matrix_plus_SNR_fu_1284_G1_M_real_din;
        end if; 
    end process;

    G1_M_real_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    G1_M_real_read_assign_proc : process(grp_matrix_div_1_fu_1204_G1_M_real_read, grp_matrix_div_fu_1216_G1_M_real_read, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            G1_M_real_read <= grp_matrix_div_fu_1216_G1_M_real_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            G1_M_real_read <= grp_matrix_div_1_fu_1204_G1_M_real_read;
        else 
            G1_M_real_read <= ap_const_logic_0;
        end if; 
    end process;


    G1_M_real_write_assign_proc : process(grp_matrix_div_1_fu_1204_G1_M_real_write, grp_matrix_plus_SNR_fu_1284_G1_M_real_write, ap_CS_fsm_state73, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            G1_M_real_write <= grp_matrix_plus_SNR_fu_1284_G1_M_real_write;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            G1_M_real_write <= grp_matrix_div_1_fu_1204_G1_M_real_write;
        else 
            G1_M_real_write <= ap_const_logic_0;
        end if; 
    end process;


    G_M_imag_read_assign_proc : process(grp_InnerProd381_fu_1252_G_M_imag_read, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            G_M_imag_read <= grp_InnerProd381_fu_1252_G_M_imag_read;
        else 
            G_M_imag_read <= ap_const_logic_0;
        end if; 
    end process;


    G_M_imag_write_assign_proc : process(grp_matrix_div_fu_1216_G_M_imag_write, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            G_M_imag_write <= grp_matrix_div_fu_1216_G_M_imag_write;
        else 
            G_M_imag_write <= ap_const_logic_0;
        end if; 
    end process;


    G_M_real_read_assign_proc : process(grp_InnerProd381_fu_1252_G_M_real_read, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            G_M_real_read <= grp_InnerProd381_fu_1252_G_M_real_read;
        else 
            G_M_real_read <= ap_const_logic_0;
        end if; 
    end process;


    G_M_real_write_assign_proc : process(grp_matrix_div_fu_1216_G_M_real_write, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            G_M_real_write <= grp_matrix_div_fu_1216_G_M_real_write;
        else 
            G_M_real_write <= ap_const_logic_0;
        end if; 
    end process;

    INPUT_data_V_0_ack_in <= INPUT_data_V_0_state(1);

    INPUT_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_56_reg_2447, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_56_reg_2447 = ap_const_lv1_1))) then 
            INPUT_data_V_0_ack_out <= ap_const_logic_1;
        else 
            INPUT_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_data_V_0_data_out_assign_proc : process(INPUT_data_V_0_payload_A, INPUT_data_V_0_payload_B, INPUT_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_data_V_0_sel)) then 
            INPUT_data_V_0_data_out <= INPUT_data_V_0_payload_B;
        else 
            INPUT_data_V_0_data_out <= INPUT_data_V_0_payload_A;
        end if; 
    end process;

    INPUT_data_V_0_load_A <= (not(INPUT_data_V_0_sel_wr) and INPUT_data_V_0_state_cmp_full);
    INPUT_data_V_0_load_B <= (INPUT_data_V_0_state_cmp_full and INPUT_data_V_0_sel_wr);
    INPUT_data_V_0_sel <= INPUT_data_V_0_sel_rd;
    INPUT_data_V_0_state_cmp_full <= '0' when (INPUT_data_V_0_state = ap_const_lv2_1) else '1';
    INPUT_data_V_0_vld_in <= in_stream_TVALID;
    INPUT_data_V_0_vld_out <= INPUT_data_V_0_state(0);

    INPUT_last_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_56_reg_2447, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_56_reg_2447 = ap_const_lv1_1))) then 
            INPUT_last_V_0_ack_out <= ap_const_logic_1;
        else 
            INPUT_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    INPUT_last_V_0_vld_in <= in_stream_TVALID;
    OUTPUT_data_V_1_ack_in <= OUTPUT_data_V_1_state(1);
    OUTPUT_data_V_1_ack_out <= out_stream_TREADY;

    OUTPUT_data_V_1_data_out_assign_proc : process(OUTPUT_data_V_1_payload_A, OUTPUT_data_V_1_payload_B, OUTPUT_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_data_V_1_sel)) then 
            OUTPUT_data_V_1_data_out <= OUTPUT_data_V_1_payload_B;
        else 
            OUTPUT_data_V_1_data_out <= OUTPUT_data_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_data_V_1_load_A <= (not(OUTPUT_data_V_1_sel_wr) and OUTPUT_data_V_1_state_cmp_full);
    OUTPUT_data_V_1_load_B <= (OUTPUT_data_V_1_state_cmp_full and OUTPUT_data_V_1_sel_wr);
    OUTPUT_data_V_1_sel <= OUTPUT_data_V_1_sel_rd;
    OUTPUT_data_V_1_state_cmp_full <= '0' when (OUTPUT_data_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_flatten_reg_2857, ap_block_pp1_stage0_11001)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_2857 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            OUTPUT_data_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_data_V_1_vld_out <= OUTPUT_data_V_1_state(0);
    OUTPUT_last_V_1_ack_in <= OUTPUT_last_V_1_state(1);
    OUTPUT_last_V_1_ack_out <= out_stream_TREADY;

    OUTPUT_last_V_1_data_out_assign_proc : process(OUTPUT_last_V_1_payload_A, OUTPUT_last_V_1_payload_B, OUTPUT_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_last_V_1_sel)) then 
            OUTPUT_last_V_1_data_out <= OUTPUT_last_V_1_payload_B;
        else 
            OUTPUT_last_V_1_data_out <= OUTPUT_last_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_last_V_1_load_A <= (not(OUTPUT_last_V_1_sel_wr) and OUTPUT_last_V_1_state_cmp_full);
    OUTPUT_last_V_1_load_B <= (OUTPUT_last_V_1_state_cmp_full and OUTPUT_last_V_1_sel_wr);
    OUTPUT_last_V_1_sel <= OUTPUT_last_V_1_sel_rd;
    OUTPUT_last_V_1_state_cmp_full <= '0' when (OUTPUT_last_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_flatten_reg_2857, ap_block_pp1_stage0_11001)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_2857 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            OUTPUT_last_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_last_V_1_vld_out <= OUTPUT_last_V_1_state(0);
    OUTPUT_user_V_1_ack_in <= OUTPUT_user_V_1_state(1);
    OUTPUT_user_V_1_ack_out <= out_stream_TREADY;

    OUTPUT_user_V_1_data_out_assign_proc : process(OUTPUT_user_V_1_payload_A, OUTPUT_user_V_1_payload_B, OUTPUT_user_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_user_V_1_sel)) then 
            OUTPUT_user_V_1_data_out <= OUTPUT_user_V_1_payload_B;
        else 
            OUTPUT_user_V_1_data_out <= OUTPUT_user_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_user_V_1_load_A <= (not(OUTPUT_user_V_1_sel_wr) and OUTPUT_user_V_1_state_cmp_full);
    OUTPUT_user_V_1_load_B <= (OUTPUT_user_V_1_state_cmp_full and OUTPUT_user_V_1_sel_wr);
    OUTPUT_user_V_1_sel <= OUTPUT_user_V_1_sel_rd;
    OUTPUT_user_V_1_state_cmp_full <= '0' when (OUTPUT_user_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_flatten_reg_2857, ap_block_pp1_stage0_11001)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_2857 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            OUTPUT_user_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_user_V_1_vld_out <= OUTPUT_user_V_1_state(0);
    abscond_fu_2175_p2 <= "1" when (signed(p_Val2_108_reg_2835) > signed(ap_const_lv32_0)) else "0";
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(7);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(96);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(97);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(98);
    ap_CS_fsm_pp1_stage3 <= ap_CS_fsm(99);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state104 <= ap_CS_fsm(100);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state21 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(20);
    ap_CS_fsm_state23 <= ap_CS_fsm(21);
    ap_CS_fsm_state24 <= ap_CS_fsm(22);
    ap_CS_fsm_state25 <= ap_CS_fsm(23);
    ap_CS_fsm_state26 <= ap_CS_fsm(24);
    ap_CS_fsm_state27 <= ap_CS_fsm(25);
    ap_CS_fsm_state28 <= ap_CS_fsm(26);
    ap_CS_fsm_state29 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(28);
    ap_CS_fsm_state31 <= ap_CS_fsm(29);
    ap_CS_fsm_state32 <= ap_CS_fsm(30);
    ap_CS_fsm_state33 <= ap_CS_fsm(31);
    ap_CS_fsm_state34 <= ap_CS_fsm(32);
    ap_CS_fsm_state35 <= ap_CS_fsm(33);
    ap_CS_fsm_state36 <= ap_CS_fsm(34);
    ap_CS_fsm_state37 <= ap_CS_fsm(35);
    ap_CS_fsm_state38 <= ap_CS_fsm(36);
    ap_CS_fsm_state39 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(38);
    ap_CS_fsm_state41 <= ap_CS_fsm(39);
    ap_CS_fsm_state42 <= ap_CS_fsm(40);
    ap_CS_fsm_state43 <= ap_CS_fsm(41);
    ap_CS_fsm_state44 <= ap_CS_fsm(42);
    ap_CS_fsm_state45 <= ap_CS_fsm(43);
    ap_CS_fsm_state46 <= ap_CS_fsm(44);
    ap_CS_fsm_state47 <= ap_CS_fsm(45);
    ap_CS_fsm_state48 <= ap_CS_fsm(46);
    ap_CS_fsm_state49 <= ap_CS_fsm(47);
    ap_CS_fsm_state50 <= ap_CS_fsm(48);
    ap_CS_fsm_state51 <= ap_CS_fsm(49);
    ap_CS_fsm_state52 <= ap_CS_fsm(50);
    ap_CS_fsm_state53 <= ap_CS_fsm(51);
    ap_CS_fsm_state54 <= ap_CS_fsm(52);
    ap_CS_fsm_state55 <= ap_CS_fsm(53);
    ap_CS_fsm_state56 <= ap_CS_fsm(54);
    ap_CS_fsm_state57 <= ap_CS_fsm(55);
    ap_CS_fsm_state58 <= ap_CS_fsm(56);
    ap_CS_fsm_state59 <= ap_CS_fsm(57);
    ap_CS_fsm_state60 <= ap_CS_fsm(58);
    ap_CS_fsm_state61 <= ap_CS_fsm(59);
    ap_CS_fsm_state62 <= ap_CS_fsm(60);
    ap_CS_fsm_state63 <= ap_CS_fsm(61);
    ap_CS_fsm_state64 <= ap_CS_fsm(62);
    ap_CS_fsm_state65 <= ap_CS_fsm(63);
    ap_CS_fsm_state66 <= ap_CS_fsm(64);
    ap_CS_fsm_state67 <= ap_CS_fsm(65);
    ap_CS_fsm_state68 <= ap_CS_fsm(66);
    ap_CS_fsm_state69 <= ap_CS_fsm(67);
    ap_CS_fsm_state70 <= ap_CS_fsm(68);
    ap_CS_fsm_state71 <= ap_CS_fsm(69);
    ap_CS_fsm_state72 <= ap_CS_fsm(70);
    ap_CS_fsm_state73 <= ap_CS_fsm(71);
    ap_CS_fsm_state74 <= ap_CS_fsm(72);
    ap_CS_fsm_state75 <= ap_CS_fsm(73);
    ap_CS_fsm_state76 <= ap_CS_fsm(74);
    ap_CS_fsm_state77 <= ap_CS_fsm(75);
    ap_CS_fsm_state78 <= ap_CS_fsm(76);
    ap_CS_fsm_state79 <= ap_CS_fsm(77);
    ap_CS_fsm_state80 <= ap_CS_fsm(78);
    ap_CS_fsm_state81 <= ap_CS_fsm(79);
    ap_CS_fsm_state82 <= ap_CS_fsm(80);
    ap_CS_fsm_state83 <= ap_CS_fsm(81);
    ap_CS_fsm_state84 <= ap_CS_fsm(82);
    ap_CS_fsm_state85 <= ap_CS_fsm(83);
    ap_CS_fsm_state86 <= ap_CS_fsm(84);
    ap_CS_fsm_state87 <= ap_CS_fsm(85);
    ap_CS_fsm_state88 <= ap_CS_fsm(86);
    ap_CS_fsm_state89 <= ap_CS_fsm(87);
    ap_CS_fsm_state90 <= ap_CS_fsm(88);
    ap_CS_fsm_state91 <= ap_CS_fsm(89);
    ap_CS_fsm_state92 <= ap_CS_fsm(90);
    ap_CS_fsm_state93 <= ap_CS_fsm(91);
    ap_CS_fsm_state94 <= ap_CS_fsm(92);
    ap_CS_fsm_state95 <= ap_CS_fsm(93);
    ap_CS_fsm_state96 <= ap_CS_fsm(94);
    ap_CS_fsm_state97 <= ap_CS_fsm(95);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(tmp_56_reg_2447, src_bw_data_stream_0_full_n, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= ((src_bw_data_stream_0_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_56_reg_2447 = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(tmp_56_reg_2447, src_bw_data_stream_0_full_n, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((src_bw_data_stream_0_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_56_reg_2447 = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(tmp_56_reg_2447, src_bw_data_stream_0_full_n, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((src_bw_data_stream_0_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_56_reg_2447 = ap_const_lv1_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(INPUT_data_V_0_vld_out, ap_enable_reg_pp0_iter0, tmp_56_reg_2447, src_bw_data_stream_0_full_n)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((ap_const_logic_0 = INPUT_data_V_0_vld_out) and (tmp_56_reg_2447 = ap_const_lv1_1)) or ((src_bw_data_stream_0_full_n = ap_const_logic_0) and (tmp_56_reg_2447 = ap_const_lv1_1))));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(INPUT_data_V_0_vld_out, ap_enable_reg_pp0_iter0, tmp_56_reg_2447, src_bw_data_stream_0_full_n)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((ap_const_logic_0 = INPUT_data_V_0_vld_out) and (tmp_56_reg_2447 = ap_const_lv1_1)) or ((src_bw_data_stream_0_full_n = ap_const_logic_0) and (tmp_56_reg_2447 = ap_const_lv1_1))));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(INPUT_data_V_0_vld_out, ap_enable_reg_pp0_iter0, tmp_56_reg_2447, src_bw_data_stream_0_full_n)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((ap_const_logic_0 = INPUT_data_V_0_vld_out) and (tmp_56_reg_2447 = ap_const_lv1_1)) or ((src_bw_data_stream_0_full_n = ap_const_logic_0) and (tmp_56_reg_2447 = ap_const_lv1_1))));
    end process;


    ap_block_pp0_stage2_01001_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_56_reg_2447, src_bw_data_stream_0_full_n)
    begin
                ap_block_pp0_stage2_01001 <= ((src_bw_data_stream_0_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_56_reg_2447 = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_56_reg_2447, src_bw_data_stream_0_full_n)
    begin
                ap_block_pp0_stage2_11001 <= ((src_bw_data_stream_0_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_56_reg_2447 = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_56_reg_2447, src_bw_data_stream_0_full_n)
    begin
                ap_block_pp0_stage2_subdone <= ((src_bw_data_stream_0_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_56_reg_2447 = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage3_01001_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_56_reg_2447, src_bw_data_stream_0_full_n)
    begin
                ap_block_pp0_stage3_01001 <= ((src_bw_data_stream_0_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_56_reg_2447 = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_56_reg_2447, src_bw_data_stream_0_full_n)
    begin
                ap_block_pp0_stage3_11001 <= ((src_bw_data_stream_0_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_56_reg_2447 = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_56_reg_2447, src_bw_data_stream_0_full_n)
    begin
                ap_block_pp0_stage3_subdone <= ((src_bw_data_stream_0_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_56_reg_2447 = ap_const_lv1_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond_flatten_reg_2857, res_data_stream_0_V_empty_n)
    begin
                ap_block_pp1_stage0_01001 <= ((res_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_2857 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond_flatten_reg_2857, res_data_stream_0_V_empty_n, ap_block_state102_io)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state102_io) or ((res_data_stream_0_V_empty_n = ap_const_logic_0) and (exitcond_flatten_reg_2857 = ap_const_lv1_0))));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond_flatten_reg_2857, res_data_stream_0_V_empty_n, ap_block_state102_io)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state102_io) or ((res_data_stream_0_V_empty_n = ap_const_logic_0) and (exitcond_flatten_reg_2857 = ap_const_lv1_0))));
    end process;

        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage1_11001_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond_flatten_reg_2857, res_data_stream_0_V_empty_n, ap_enable_reg_pp1_iter0, ap_block_state103_io)
    begin
                ap_block_pp1_stage1_11001 <= (((res_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_2857 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state103_io)));
    end process;


    ap_block_pp1_stage1_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond_flatten_reg_2857, res_data_stream_0_V_empty_n, ap_enable_reg_pp1_iter0, ap_block_state103_io)
    begin
                ap_block_pp1_stage1_subdone <= (((res_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_2857 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state103_io)));
    end process;


    ap_block_pp1_stage2_11001_assign_proc : process(exitcond_flatten_reg_2857, res_data_stream_0_V_empty_n, ap_enable_reg_pp1_iter0)
    begin
                ap_block_pp1_stage2_11001 <= ((res_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_2857 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage2_subdone_assign_proc : process(exitcond_flatten_reg_2857, res_data_stream_0_V_empty_n, ap_enable_reg_pp1_iter0)
    begin
                ap_block_pp1_stage2_subdone <= ((res_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_2857 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage3_11001_assign_proc : process(exitcond_flatten_reg_2857, res_data_stream_0_V_empty_n, ap_enable_reg_pp1_iter0)
    begin
                ap_block_pp1_stage3_11001 <= ((res_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_2857 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage3_subdone_assign_proc : process(exitcond_flatten_reg_2857, res_data_stream_0_V_empty_n, ap_enable_reg_pp1_iter0)
    begin
                ap_block_pp1_stage3_subdone <= ((res_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_2857 = ap_const_lv1_0));
    end process;


    ap_block_state1_assign_proc : process(ap_start, guard_variable_for_W, kernel_M_real_full_n, kernel_M_imag_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or ((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W = ap_const_lv1_0)));
    end process;


    ap_block_state100_pp1_stage2_iter0_assign_proc : process(exitcond_flatten_reg_2857, res_data_stream_0_V_empty_n)
    begin
                ap_block_state100_pp1_stage2_iter0 <= ((res_data_stream_0_V_empty_n = ap_const_logic_0) and (exitcond_flatten_reg_2857 = ap_const_lv1_0));
    end process;


    ap_block_state101_pp1_stage3_iter0_assign_proc : process(exitcond_flatten_reg_2857, res_data_stream_0_V_empty_n)
    begin
                ap_block_state101_pp1_stage3_iter0 <= ((res_data_stream_0_V_empty_n = ap_const_logic_0) and (exitcond_flatten_reg_2857 = ap_const_lv1_0));
    end process;


    ap_block_state102_io_assign_proc : process(OUTPUT_data_V_1_ack_in, exitcond_flatten_reg_2857)
    begin
                ap_block_state102_io <= ((ap_const_logic_0 = OUTPUT_data_V_1_ack_in) and (exitcond_flatten_reg_2857 = ap_const_lv1_0));
    end process;


    ap_block_state102_pp1_stage0_iter1_assign_proc : process(exitcond_flatten_reg_2857, res_data_stream_0_V_empty_n)
    begin
                ap_block_state102_pp1_stage0_iter1 <= ((res_data_stream_0_V_empty_n = ap_const_logic_0) and (exitcond_flatten_reg_2857 = ap_const_lv1_0));
    end process;


    ap_block_state103_io_assign_proc : process(OUTPUT_data_V_1_ack_in, exitcond_flatten_reg_2857_pp1_iter1_reg)
    begin
                ap_block_state103_io <= ((ap_const_logic_0 = OUTPUT_data_V_1_ack_in) and (exitcond_flatten_reg_2857_pp1_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state103_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state104_assign_proc : process(OUTPUT_data_V_1_ack_in, OUTPUT_user_V_1_ack_in, OUTPUT_last_V_1_ack_in)
    begin
                ap_block_state104 <= ((ap_const_logic_0 = OUTPUT_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_user_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_data_V_1_ack_in));
    end process;


    ap_block_state12_assign_proc : process(src_bw_data_stream_0_empty_n, exitcond9_fu_1503_p2)
    begin
                ap_block_state12 <= ((src_bw_data_stream_0_empty_n = ap_const_logic_0) and (exitcond9_fu_1503_p2 = ap_const_lv1_0));
    end process;


    ap_block_state19_assign_proc : process(grp_real379_fu_1320_complex_float_M_real_blk_n, grp_imag380_fu_1332_complex_float_M_imag_blk_n)
    begin
                ap_block_state19 <= ((grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_0) or (grp_imag380_fu_1332_complex_float_M_imag_blk_n = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(kernel_M_real_full_n, kernel_M_imag_full_n)
    begin
                ap_block_state2 <= ((kernel_M_imag_full_n = ap_const_logic_0) or (kernel_M_real_full_n = ap_const_logic_0));
    end process;


    ap_block_state21_assign_proc : process(xn1_M_real_empty_n, exitcond10_fu_1529_p2, xn1_M_imag_empty_n)
    begin
                ap_block_state21 <= (((xn1_M_imag_empty_n = ap_const_logic_0) and (exitcond10_fu_1529_p2 = ap_const_lv1_0)) or ((xn1_M_real_empty_n = ap_const_logic_0) and (exitcond10_fu_1529_p2 = ap_const_lv1_0)));
    end process;


    ap_block_state21_ignore_call0_assign_proc : process(xn1_M_real_empty_n, exitcond10_fu_1529_p2, xn1_M_imag_empty_n)
    begin
                ap_block_state21_ignore_call0 <= (((xn1_M_imag_empty_n = ap_const_logic_0) and (exitcond10_fu_1529_p2 = ap_const_lv1_0)) or ((xn1_M_real_empty_n = ap_const_logic_0) and (exitcond10_fu_1529_p2 = ap_const_lv1_0)));
    end process;


    ap_block_state25_assign_proc : process(out1_empty_n, exitcond11_fu_1540_p2)
    begin
                ap_block_state25 <= ((out1_empty_n = ap_const_logic_0) and (exitcond11_fu_1540_p2 = ap_const_lv1_0));
    end process;


    ap_block_state33_assign_proc : process(middle_M_real_empty_n, exitcond3_fu_1585_p2, middle_M_imag_empty_n)
    begin
                ap_block_state33 <= (((middle_M_imag_empty_n = ap_const_logic_0) and (exitcond3_fu_1585_p2 = ap_const_lv1_0)) or ((middle_M_real_empty_n = ap_const_logic_0) and (exitcond3_fu_1585_p2 = ap_const_lv1_0)));
    end process;


    ap_block_state33_ignore_call0_assign_proc : process(middle_M_real_empty_n, exitcond3_fu_1585_p2, middle_M_imag_empty_n)
    begin
                ap_block_state33_ignore_call0 <= (((middle_M_imag_empty_n = ap_const_logic_0) and (exitcond3_fu_1585_p2 = ap_const_lv1_0)) or ((middle_M_real_empty_n = ap_const_logic_0) and (exitcond3_fu_1585_p2 = ap_const_lv1_0)));
    end process;


    ap_block_state37_assign_proc : process(out2_empty_n, exitcond6_fu_1597_p2)
    begin
                ap_block_state37 <= ((out2_empty_n = ap_const_logic_0) and (exitcond6_fu_1597_p2 = ap_const_lv1_0));
    end process;


    ap_block_state4_assign_proc : process(kernel_M_real_full_n, kernel_M_imag_full_n, guard_variable_for_W_1_reg_2401)
    begin
                ap_block_state4 <= (((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)));
    end process;


    ap_block_state46_assign_proc : process(kernel_M_real_empty_n, exitcond5_fu_1643_p2, kernel_M_imag_empty_n)
    begin
                ap_block_state46 <= (((kernel_M_imag_empty_n = ap_const_logic_0) and (exitcond5_fu_1643_p2 = ap_const_lv1_0)) or ((kernel_M_real_empty_n = ap_const_logic_0) and (exitcond5_fu_1643_p2 = ap_const_lv1_0)));
    end process;


    ap_block_state46_ignore_call0_assign_proc : process(kernel_M_real_empty_n, exitcond5_fu_1643_p2, kernel_M_imag_empty_n)
    begin
                ap_block_state46_ignore_call0 <= (((kernel_M_imag_empty_n = ap_const_logic_0) and (exitcond5_fu_1643_p2 = ap_const_lv1_0)) or ((kernel_M_real_empty_n = ap_const_logic_0) and (exitcond5_fu_1643_p2 = ap_const_lv1_0)));
    end process;


    ap_block_state50_assign_proc : process(out3_empty_n, exitcond14_fu_1655_p2)
    begin
                ap_block_state50 <= ((out3_empty_n = ap_const_logic_0) and (exitcond14_fu_1655_p2 = ap_const_lv1_0));
    end process;


    ap_block_state51_assign_proc : process(grp_real379_fu_1320_complex_float_M_real_blk_n, out3_empty_n)
    begin
                ap_block_state51 <= ((out3_empty_n = ap_const_logic_0) or (grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_0));
    end process;


    ap_block_state54_assign_proc : process(middle_M_real_empty_n, middle_M_imag_empty_n, exitcond_fu_1700_p2)
    begin
                ap_block_state54 <= (((middle_M_imag_empty_n = ap_const_logic_0) and (exitcond_fu_1700_p2 = ap_const_lv1_0)) or ((middle_M_real_empty_n = ap_const_logic_0) and (exitcond_fu_1700_p2 = ap_const_lv1_0)));
    end process;


    ap_block_state54_ignore_call0_assign_proc : process(middle_M_real_empty_n, middle_M_imag_empty_n, exitcond_fu_1700_p2)
    begin
                ap_block_state54_ignore_call0 <= (((middle_M_imag_empty_n = ap_const_logic_0) and (exitcond_fu_1700_p2 = ap_const_lv1_0)) or ((middle_M_real_empty_n = ap_const_logic_0) and (exitcond_fu_1700_p2 = ap_const_lv1_0)));
    end process;


    ap_block_state58_assign_proc : process(out4_empty_n, exitcond17_fu_1712_p2)
    begin
                ap_block_state58 <= ((out4_empty_n = ap_const_logic_0) and (exitcond17_fu_1712_p2 = ap_const_lv1_0));
    end process;

        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage1_iter0_assign_proc : process(INPUT_data_V_0_vld_out, tmp_56_reg_2447, src_bw_data_stream_0_full_n)
    begin
                ap_block_state6_pp0_stage1_iter0 <= (((ap_const_logic_0 = INPUT_data_V_0_vld_out) and (tmp_56_reg_2447 = ap_const_lv1_1)) or ((src_bw_data_stream_0_full_n = ap_const_logic_0) and (tmp_56_reg_2447 = ap_const_lv1_1)));
    end process;


    ap_block_state79_assign_proc : process(xk1_M_real_empty_n, exitcond16_fu_1756_p2, xk1_M_imag_empty_n)
    begin
                ap_block_state79 <= (((xk1_M_imag_empty_n = ap_const_logic_0) and (exitcond16_fu_1756_p2 = ap_const_lv1_0)) or ((xk1_M_real_empty_n = ap_const_logic_0) and (exitcond16_fu_1756_p2 = ap_const_lv1_0)));
    end process;


    ap_block_state79_ignore_call0_assign_proc : process(xk1_M_real_empty_n, exitcond16_fu_1756_p2, xk1_M_imag_empty_n)
    begin
                ap_block_state79_ignore_call0 <= (((xk1_M_imag_empty_n = ap_const_logic_0) and (exitcond16_fu_1756_p2 = ap_const_lv1_0)) or ((xk1_M_real_empty_n = ap_const_logic_0) and (exitcond16_fu_1756_p2 = ap_const_lv1_0)));
    end process;


    ap_block_state7_pp0_stage2_iter0_assign_proc : process(tmp_56_reg_2447, src_bw_data_stream_0_full_n)
    begin
                ap_block_state7_pp0_stage2_iter0 <= ((src_bw_data_stream_0_full_n = ap_const_logic_0) and (tmp_56_reg_2447 = ap_const_lv1_1));
    end process;


    ap_block_state83_assign_proc : process(out5_empty_n, exitcond19_fu_1767_p2)
    begin
                ap_block_state83 <= ((out5_empty_n = ap_const_logic_0) and (exitcond19_fu_1767_p2 = ap_const_lv1_0));
    end process;


    ap_block_state84_assign_proc : process(grp_real379_fu_1320_complex_float_M_real_blk_n, out5_empty_n)
    begin
                ap_block_state84 <= ((grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_0) or (out5_empty_n = ap_const_logic_0));
    end process;


    ap_block_state87_assign_proc : process(middle2_M_real_empty_n, exitcond18_fu_1811_p2, middle2_M_imag_empty_n)
    begin
                ap_block_state87 <= (((middle2_M_imag_empty_n = ap_const_logic_0) and (exitcond18_fu_1811_p2 = ap_const_lv1_0)) or ((middle2_M_real_empty_n = ap_const_logic_0) and (exitcond18_fu_1811_p2 = ap_const_lv1_0)));
    end process;


    ap_block_state87_ignore_call0_assign_proc : process(middle2_M_real_empty_n, exitcond18_fu_1811_p2, middle2_M_imag_empty_n)
    begin
                ap_block_state87_ignore_call0 <= (((middle2_M_imag_empty_n = ap_const_logic_0) and (exitcond18_fu_1811_p2 = ap_const_lv1_0)) or ((middle2_M_real_empty_n = ap_const_logic_0) and (exitcond18_fu_1811_p2 = ap_const_lv1_0)));
    end process;


    ap_block_state8_pp0_stage3_iter0_assign_proc : process(tmp_56_reg_2447, src_bw_data_stream_0_full_n)
    begin
                ap_block_state8_pp0_stage3_iter0 <= ((src_bw_data_stream_0_full_n = ap_const_logic_0) and (tmp_56_reg_2447 = ap_const_lv1_1));
    end process;


    ap_block_state91_assign_proc : process(out6_empty_n, exitcond21_fu_1822_p2)
    begin
                ap_block_state91 <= ((out6_empty_n = ap_const_logic_0) and (exitcond21_fu_1822_p2 = ap_const_lv1_0));
    end process;


    ap_block_state92_assign_proc : process(grp_real379_fu_1320_complex_float_M_real_blk_n, out6_empty_n)
    begin
                ap_block_state92 <= ((grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_0) or (out6_empty_n = ap_const_logic_0));
    end process;


    ap_block_state95_assign_proc : process(xk2_M_real_empty_n, exitcond20_fu_1892_p2, xk2_M_imag_empty_n)
    begin
                ap_block_state95 <= (((xk2_M_imag_empty_n = ap_const_logic_0) and (exitcond20_fu_1892_p2 = ap_const_lv1_0)) or ((xk2_M_real_empty_n = ap_const_logic_0) and (exitcond20_fu_1892_p2 = ap_const_lv1_0)));
    end process;

        ap_block_state98_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state99_pp1_stage1_iter0_assign_proc : process(exitcond_flatten_reg_2857, res_data_stream_0_V_empty_n)
    begin
                ap_block_state99_pp1_stage1_iter0 <= ((res_data_stream_0_V_empty_n = ap_const_logic_0) and (exitcond_flatten_reg_2857 = ap_const_lv1_0));
    end process;


    ap_block_state9_pp0_stage0_iter1_assign_proc : process(tmp_56_reg_2447, src_bw_data_stream_0_full_n)
    begin
                ap_block_state9_pp0_stage0_iter1 <= ((src_bw_data_stream_0_full_n = ap_const_logic_0) and (tmp_56_reg_2447 = ap_const_lv1_1));
    end process;


    ap_condition_2468_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_01001)
    begin
                ap_condition_2468 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_2473_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_01001)
    begin
                ap_condition_2473 <= ((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2));
    end process;


    ap_condition_2478_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_01001)
    begin
                ap_condition_2478 <= ((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3));
    end process;


    ap_condition_2483_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_01001)
    begin
                ap_condition_2483 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state5_assign_proc : process(tmp_56_fu_1442_p2)
    begin
        if ((tmp_56_fu_1442_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state98_assign_proc : process(exitcond_flatten_fu_2238_p2)
    begin
        if ((exitcond_flatten_fu_2238_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state98 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state98 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(OUTPUT_data_V_1_ack_in, OUTPUT_data_V_1_state, OUTPUT_user_V_1_ack_in, OUTPUT_user_V_1_state, OUTPUT_last_V_1_ack_in, OUTPUT_last_V_1_state, ap_CS_fsm_state104)
    begin
        if ((not(((ap_const_logic_0 = OUTPUT_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_user_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_data_V_1_ack_in))) and (OUTPUT_last_V_1_state(0) = ap_const_logic_0) and (OUTPUT_user_V_1_state(0) = ap_const_logic_0) and (OUTPUT_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c12_phi_fu_1136_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_flatten_reg_2857, c12_reg_1132, c_1_reg_2901)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_2857 = ap_const_lv1_0))) then 
            ap_phi_mux_c12_phi_fu_1136_p4 <= c_1_reg_2901;
        else 
            ap_phi_mux_c12_phi_fu_1136_p4 <= c12_reg_1132;
        end if; 
    end process;


    ap_phi_mux_i_op_assign_12_phi_fu_1125_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_flatten_reg_2857, i_op_assign_12_reg_1121, tmp_87_mid2_v_reg_2871)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_2857 = ap_const_lv1_0))) then 
            ap_phi_mux_i_op_assign_12_phi_fu_1125_p4 <= tmp_87_mid2_v_reg_2871;
        else 
            ap_phi_mux_i_op_assign_12_phi_fu_1125_p4 <= i_op_assign_12_reg_1121;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_1114_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_flatten_reg_2857, indvar_flatten_reg_1110, indvar_flatten_next_reg_2861)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_2857 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_1114_p4 <= indvar_flatten_next_reg_2861;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_1114_p4 <= indvar_flatten_reg_1110;
        end if; 
    end process;


    ap_phi_mux_r_phi_fu_861_p4_assign_proc : process(tmp_56_reg_2447, r_reg_857, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, r_4_reg_2451, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_56_reg_2447 = ap_const_lv1_1))) then 
            ap_phi_mux_r_phi_fu_861_p4 <= r_4_reg_2451;
        else 
            ap_phi_mux_r_phi_fu_861_p4 <= r_reg_857;
        end if; 
    end process;


    ap_ready_assign_proc : process(OUTPUT_data_V_1_ack_in, OUTPUT_data_V_1_state, OUTPUT_user_V_1_ack_in, OUTPUT_user_V_1_state, OUTPUT_last_V_1_ack_in, OUTPUT_last_V_1_state, ap_CS_fsm_state104)
    begin
        if ((not(((ap_const_logic_0 = OUTPUT_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_user_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_data_V_1_ack_in))) and (OUTPUT_last_V_1_state(0) = ap_const_logic_0) and (OUTPUT_user_V_1_state(0) = ap_const_logic_0) and (OUTPUT_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_AXI_LITE_clk_inv_assign_proc : process(ap_rst_n_AXI_LITE_clk)
    begin
                ap_rst_n_AXI_LITE_clk_inv <= not(ap_rst_n_AXI_LITE_clk);
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bound_fu_1886_p0 <= bound_fu_1886_p00(32 - 1 downto 0);
    bound_fu_1886_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cast_fu_1880_p0),62));
    bound_fu_1886_p1 <= bound_fu_1886_p10(30 - 1 downto 0);
    bound_fu_1886_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_packets_fu_1416_p4),62));
    bound_fu_1886_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_1886_p0) * unsigned(bound_fu_1886_p1), 62));
    c14_cast_mid2_cast_fu_2297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c14_mid2_fu_2260_p3),31));
    c14_mid2_fu_2260_p3 <= 
        ap_phi_mux_c12_phi_fu_1136_p4 when (tmp_90_fu_2255_p2(0) = '1') else 
        ap_const_lv30_0;
    c_12_fu_1805_p2 <= std_logic_vector(unsigned(i_op_assign_s_reg_1055) + unsigned(ap_const_lv32_1));
    c_13_fu_1761_p2 <= std_logic_vector(unsigned(i_op_assign_9_reg_1033) + unsigned(ap_const_lv32_1));
    c_16_fu_1772_p2 <= std_logic_vector(unsigned(i_op_assign_10_reg_1044) + unsigned(ap_const_lv32_1));
    c_17_fu_1897_p2 <= std_logic_vector(unsigned(i_op_assign_14_reg_1099) + unsigned(ap_const_lv32_1));
    c_1_fu_2342_p2 <= std_logic_vector(unsigned(ap_const_lv30_1) + unsigned(c14_mid2_reg_2866));
    c_4_fu_1534_p2 <= std_logic_vector(unsigned(i_op_assign_4_reg_901) + unsigned(ap_const_lv32_1));
    c_5_fu_1545_p2 <= std_logic_vector(unsigned(i_op_assign_5_reg_912) + unsigned(ap_const_lv32_1));
    c_6_fu_1649_p2 <= std_logic_vector(unsigned(c9_reg_967) + unsigned(ap_const_lv9_1));
    c_7_fu_1579_p2 <= std_logic_vector(unsigned(c5_reg_923) + unsigned(ap_const_lv9_1));
    c_8_fu_1660_p2 <= std_logic_vector(unsigned(i_op_assign_6_reg_978) + unsigned(ap_const_lv32_1));
    c_9_fu_1694_p2 <= std_logic_vector(unsigned(c6_reg_989) + unsigned(ap_const_lv9_1));
    c_fu_1508_p2 <= std_logic_vector(unsigned(i_op_assign_2_reg_879) + unsigned(ap_const_lv32_1));
    cast_fu_1880_p0 <= rows_V;
    col_packets_cast_fu_1429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_packets_fu_1416_p4),31));
    col_packets_fu_1416_p4 <= cols_V(31 downto 2);
    exitcond10_fu_1529_p2 <= "1" when (i_op_assign_4_reg_901 = cols_V) else "0";
    exitcond11_fu_1540_p2 <= "1" when (i_op_assign_5_reg_912 = cols_V) else "0";
    exitcond12_fu_1745_p1 <= rows_V;
    exitcond12_fu_1745_p2 <= "1" when (i_op_assign_8_reg_1022 = exitcond12_fu_1745_p1) else "0";
    exitcond13_fu_1800_p2 <= "1" when (i_op_assign_s_reg_1055 = cols_V) else "0";
    exitcond14_fu_1655_p2 <= "1" when (i_op_assign_6_reg_978 = cols_V) else "0";
    exitcond15_fu_1855_p1 <= rows_V;
    exitcond15_fu_1855_p2 <= "1" when (i_op_assign_1_reg_1088 = exitcond15_fu_1855_p1) else "0";
    exitcond16_fu_1756_p2 <= "1" when (i_op_assign_9_reg_1033 = cols_V) else "0";
    exitcond17_fu_1712_p1 <= rows_V;
    exitcond17_fu_1712_p2 <= "1" when (i_op_assign_7_reg_1011 = exitcond17_fu_1712_p1) else "0";
    exitcond18_fu_1811_p1 <= rows_V;
    exitcond18_fu_1811_p2 <= "1" when (i_op_assign_11_reg_1066 = exitcond18_fu_1811_p1) else "0";
    exitcond19_fu_1767_p2 <= "1" when (i_op_assign_10_reg_1044 = cols_V) else "0";
    exitcond1_fu_1573_p2 <= "1" when (c5_reg_923 = ap_const_lv9_100) else "0";
    exitcond20_fu_1892_p2 <= "1" when (i_op_assign_14_reg_1099 = cols_V) else "0";
    exitcond21_fu_1822_p1 <= rows_V;
    exitcond21_fu_1822_p2 <= "1" when (i_op_assign_13_reg_1077 = exitcond21_fu_1822_p1) else "0";
    exitcond2_fu_1631_p2 <= "1" when (r8_reg_956 = ap_const_lv9_100) else "0";
    exitcond3_fu_1585_p2 <= "1" when (r6_reg_934 = ap_const_lv9_100) else "0";
    exitcond4_fu_1688_p2 <= "1" when (c6_reg_989 = ap_const_lv9_100) else "0";
    exitcond5_fu_1643_p2 <= "1" when (c9_reg_967 = ap_const_lv9_100) else "0";
    exitcond6_fu_1597_p2 <= "1" when (r7_reg_945 = ap_const_lv9_100) else "0";
    exitcond7_fu_1492_p1 <= rows_V;
    exitcond7_fu_1492_p2 <= "1" when (i_op_assign_reg_868 = exitcond7_fu_1492_p1) else "0";
    exitcond8_fu_1518_p1 <= rows_V;
    exitcond8_fu_1518_p2 <= "1" when (i_op_assign_3_reg_890 = exitcond8_fu_1518_p1) else "0";
    exitcond9_fu_1503_p2 <= "1" when (i_op_assign_2_reg_879 = cols_V) else "0";
    exitcond_flatten_fu_2238_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_1114_p4 = bound_fu_1886_p2) else "0";
    exitcond_fu_1700_p2 <= "1" when (r9_reg_1000 = ap_const_lv9_100) else "0";
    fft_kernel_M_imag_din <= grp_imag380_fu_1332_complex_float_M_imag_din;
    fft_kernel_M_imag_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    fft_kernel_M_imag_read_assign_proc : process(grp_matrix_modulus_fu_1143_fft_kernel_M_imag_read, grp_matrix_div_fu_1216_fft_kernel_M_imag_read, grp_InnerProd382_fu_1268_fft_kernel_M_imag_read, ap_CS_fsm_state67, ap_CS_fsm_state75, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            fft_kernel_M_imag_read <= grp_InnerProd382_fu_1268_fft_kernel_M_imag_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            fft_kernel_M_imag_read <= grp_matrix_div_fu_1216_fft_kernel_M_imag_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            fft_kernel_M_imag_read <= grp_matrix_modulus_fu_1143_fft_kernel_M_imag_read;
        else 
            fft_kernel_M_imag_read <= ap_const_logic_0;
        end if; 
    end process;


    fft_kernel_M_imag_write_assign_proc : process(grp_imag380_fu_1332_complex_float_M_imag_write, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            fft_kernel_M_imag_write <= grp_imag380_fu_1332_complex_float_M_imag_write;
        else 
            fft_kernel_M_imag_write <= ap_const_logic_0;
        end if; 
    end process;

    fft_kernel_M_real_din <= grp_real379_fu_1320_complex_float_M_real_din;
    fft_kernel_M_real_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    fft_kernel_M_real_read_assign_proc : process(grp_matrix_modulus_fu_1143_fft_kernel_M_real_read, grp_matrix_div_fu_1216_fft_kernel_M_real_read, grp_InnerProd382_fu_1268_fft_kernel_M_real_read, ap_CS_fsm_state67, ap_CS_fsm_state75, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            fft_kernel_M_real_read <= grp_InnerProd382_fu_1268_fft_kernel_M_real_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            fft_kernel_M_real_read <= grp_matrix_div_fu_1216_fft_kernel_M_real_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            fft_kernel_M_real_read <= grp_matrix_modulus_fu_1143_fft_kernel_M_real_read;
        else 
            fft_kernel_M_real_read <= ap_const_logic_0;
        end if; 
    end process;


    fft_kernel_M_real_write_assign_proc : process(ap_CS_fsm_state63, grp_real379_fu_1320_complex_float_M_real_write)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            fft_kernel_M_real_write <= grp_real379_fu_1320_complex_float_M_real_write;
        else 
            fft_kernel_M_real_write <= ap_const_logic_0;
        end if; 
    end process;

    fft_kernel_modu2_M_1_din <= grp_InnerProd_1_fu_1240_fft_kernel_modu2_M_1_din;
    fft_kernel_modu2_M_1_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    fft_kernel_modu2_M_1_read_assign_proc : process(grp_matrix_div_1_fu_1204_fft_kernel_modu2_M_1_read, grp_matrix_plus_SNR_fu_1284_fft_kernel_modu2_M_1_read, ap_CS_fsm_state73, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            fft_kernel_modu2_M_1_read <= grp_matrix_plus_SNR_fu_1284_fft_kernel_modu2_M_1_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            fft_kernel_modu2_M_1_read <= grp_matrix_div_1_fu_1204_fft_kernel_modu2_M_1_read;
        else 
            fft_kernel_modu2_M_1_read <= ap_const_logic_0;
        end if; 
    end process;


    fft_kernel_modu2_M_1_write_assign_proc : process(grp_InnerProd_1_fu_1240_fft_kernel_modu2_M_1_write, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            fft_kernel_modu2_M_1_write <= grp_InnerProd_1_fu_1240_fft_kernel_modu2_M_1_write;
        else 
            fft_kernel_modu2_M_1_write <= ap_const_logic_0;
        end if; 
    end process;

    fft_kernel_modu2_M_s_din <= grp_InnerProd_1_fu_1240_fft_kernel_modu2_M_s_din;
    fft_kernel_modu2_M_s_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    fft_kernel_modu2_M_s_read_assign_proc : process(grp_matrix_div_1_fu_1204_fft_kernel_modu2_M_s_read, grp_matrix_plus_SNR_fu_1284_fft_kernel_modu2_M_s_read, ap_CS_fsm_state73, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            fft_kernel_modu2_M_s_read <= grp_matrix_plus_SNR_fu_1284_fft_kernel_modu2_M_s_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            fft_kernel_modu2_M_s_read <= grp_matrix_div_1_fu_1204_fft_kernel_modu2_M_s_read;
        else 
            fft_kernel_modu2_M_s_read <= ap_const_logic_0;
        end if; 
    end process;


    fft_kernel_modu2_M_s_write_assign_proc : process(grp_InnerProd_1_fu_1240_fft_kernel_modu2_M_s_write, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            fft_kernel_modu2_M_s_write <= grp_InnerProd_1_fu_1240_fft_kernel_modu2_M_s_write;
        else 
            fft_kernel_modu2_M_s_write <= ap_const_logic_0;
        end if; 
    end process;


    fft_kernel_modu_M_i_read_assign_proc : process(grp_InnerProd_1_fu_1240_fft_kernel_modu_M_i_read, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            fft_kernel_modu_M_i_read <= grp_InnerProd_1_fu_1240_fft_kernel_modu_M_i_read;
        else 
            fft_kernel_modu_M_i_read <= ap_const_logic_0;
        end if; 
    end process;


    fft_kernel_modu_M_i_write_assign_proc : process(grp_matrix_modulus_fu_1143_fft_kernel_modu_M_i_write, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            fft_kernel_modu_M_i_write <= grp_matrix_modulus_fu_1143_fft_kernel_modu_M_i_write;
        else 
            fft_kernel_modu_M_i_write <= ap_const_logic_0;
        end if; 
    end process;


    fft_kernel_modu_M_r_read_assign_proc : process(grp_InnerProd_1_fu_1240_fft_kernel_modu_M_r_read, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            fft_kernel_modu_M_r_read <= grp_InnerProd_1_fu_1240_fft_kernel_modu_M_r_read;
        else 
            fft_kernel_modu_M_r_read <= ap_const_logic_0;
        end if; 
    end process;


    fft_kernel_modu_M_r_write_assign_proc : process(grp_matrix_modulus_fu_1143_fft_kernel_modu_M_r_write, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            fft_kernel_modu_M_r_write <= grp_matrix_modulus_fu_1143_fft_kernel_modu_M_r_write;
        else 
            fft_kernel_modu_M_r_write <= ap_const_logic_0;
        end if; 
    end process;


    gauss_blur_M_imag_read_assign_proc : process(grp_InnerProd381_fu_1252_gauss_blur_M_imag_read, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            gauss_blur_M_imag_read <= grp_InnerProd381_fu_1252_gauss_blur_M_imag_read;
        else 
            gauss_blur_M_imag_read <= ap_const_logic_0;
        end if; 
    end process;


    gauss_blur_M_imag_write_assign_proc : process(grp_InnerProd382_fu_1268_gauss_blur_M_imag_write, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            gauss_blur_M_imag_write <= grp_InnerProd382_fu_1268_gauss_blur_M_imag_write;
        else 
            gauss_blur_M_imag_write <= ap_const_logic_0;
        end if; 
    end process;


    gauss_blur_M_real_read_assign_proc : process(grp_InnerProd381_fu_1252_gauss_blur_M_real_read, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            gauss_blur_M_real_read <= grp_InnerProd381_fu_1252_gauss_blur_M_real_read;
        else 
            gauss_blur_M_real_read <= ap_const_logic_0;
        end if; 
    end process;


    gauss_blur_M_real_write_assign_proc : process(grp_InnerProd382_fu_1268_gauss_blur_M_real_write, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            gauss_blur_M_real_write <= grp_InnerProd382_fu_1268_gauss_blur_M_real_write;
        else 
            gauss_blur_M_real_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_InnerProd381_fu_1252_ap_start <= grp_InnerProd381_fu_1252_ap_start_reg;
    grp_InnerProd382_fu_1268_ap_start <= grp_InnerProd382_fu_1268_ap_start_reg;
    grp_InnerProd_1_fu_1240_ap_start <= grp_InnerProd_1_fu_1240_ap_start_reg;
    grp_KernelMaker_fu_1232_ap_start <= grp_KernelMaker_fu_1232_ap_start_reg;
    grp_fft_top_fu_1179_ap_start <= grp_fft_top_fu_1179_ap_start_reg;

    grp_fft_top_fu_1179_direction_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state36, ap_CS_fsm_state49, ap_CS_fsm_state57, ap_CS_fsm_state82, ap_CS_fsm_state90)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            grp_fft_top_fu_1179_direction <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_fft_top_fu_1179_direction <= ap_const_logic_0;
        else 
            grp_fft_top_fu_1179_direction <= 'X';
        end if; 
    end process;


    grp_fft_top_fu_1179_in_r_dout_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state36, ap_CS_fsm_state49, ap_CS_fsm_state57, ap_CS_fsm_state82, ap_CS_fsm_state90, in1_dout, in2_dout, in3_dout, in4_dout, in5_dout, in6_dout)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            grp_fft_top_fu_1179_in_r_dout <= in6_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_fft_top_fu_1179_in_r_dout <= in5_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fft_top_fu_1179_in_r_dout <= in4_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fft_top_fu_1179_in_r_dout <= in3_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fft_top_fu_1179_in_r_dout <= in2_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fft_top_fu_1179_in_r_dout <= in1_dout;
        else 
            grp_fft_top_fu_1179_in_r_dout <= in6_dout;
        end if; 
    end process;


    grp_fft_top_fu_1179_in_r_empty_n_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state36, ap_CS_fsm_state49, ap_CS_fsm_state57, ap_CS_fsm_state82, ap_CS_fsm_state90, in1_empty_n, in2_empty_n, in3_empty_n, in4_empty_n, in5_empty_n, in6_empty_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            grp_fft_top_fu_1179_in_r_empty_n <= in6_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_fft_top_fu_1179_in_r_empty_n <= in5_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fft_top_fu_1179_in_r_empty_n <= in4_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fft_top_fu_1179_in_r_empty_n <= in3_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fft_top_fu_1179_in_r_empty_n <= in2_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fft_top_fu_1179_in_r_empty_n <= in1_empty_n;
        else 
            grp_fft_top_fu_1179_in_r_empty_n <= in6_empty_n;
        end if; 
    end process;


    grp_fft_top_fu_1179_out_r_full_n_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state36, ap_CS_fsm_state49, ap_CS_fsm_state57, ap_CS_fsm_state82, ap_CS_fsm_state90, out1_full_n, out2_full_n, out3_full_n, out4_full_n, out5_full_n, out6_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            grp_fft_top_fu_1179_out_r_full_n <= out6_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_fft_top_fu_1179_out_r_full_n <= out5_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fft_top_fu_1179_out_r_full_n <= out4_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fft_top_fu_1179_out_r_full_n <= out3_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fft_top_fu_1179_out_r_full_n <= out2_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fft_top_fu_1179_out_r_full_n <= out1_full_n;
        else 
            grp_fft_top_fu_1179_out_r_full_n <= out6_full_n;
        end if; 
    end process;


    grp_fu_1345_ce_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state30, grp_real379_fu_1320_complex_float_M_real_blk_n, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state62, ap_CS_fsm_state63, out1_empty_n, ap_CS_fsm_state26, ap_CS_fsm_state27, out2_empty_n, ap_CS_fsm_state38, ap_CS_fsm_state39, out4_empty_n, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state28, ap_CS_fsm_state40, ap_CS_fsm_state61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state60) or ((out2_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((out1_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (out4_empty_n = ap_const_logic_1)))) then 
            grp_fu_1345_ce <= ap_const_logic_1;
        else 
            grp_fu_1345_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1345_p0_assign_proc : process(out1_M_real_load_fu_1555_p1, ap_CS_fsm_state26, out1_M_imag_load_fu_1569_p1, ap_CS_fsm_state27, out2_M_real_load_fu_1613_p1, ap_CS_fsm_state38, out2_M_imag_load_fu_1627_p1, ap_CS_fsm_state39, out4_M_real_load_fu_1727_p1, ap_CS_fsm_state59, out4_M_imag_load_fu_1741_p1, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_1345_p0 <= out4_M_imag_load_fu_1741_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_1345_p0 <= out4_M_real_load_fu_1727_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_1345_p0 <= out2_M_imag_load_fu_1627_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_1345_p0 <= out2_M_real_load_fu_1613_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_1345_p0 <= out1_M_imag_load_fu_1569_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_1345_p0 <= out1_M_real_load_fu_1555_p1;
        else 
            grp_fu_1345_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1345_p1_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state59, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            grp_fu_1345_p1 <= ap_const_lv32_3F000000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            grp_fu_1345_p1 <= ap_const_lv32_3B800000;
        else 
            grp_fu_1345_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1351_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_reg_2487),32));

    grp_imag380_fu_1332_ap_start_assign_proc : process(grp_real379_fu_1320_complex_float_M_real_blk_n, ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state43, ap_CS_fsm_state52, ap_CS_fsm_state64, ap_CS_fsm_state85, ap_CS_fsm_state93)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state31) or ((grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            grp_imag380_fu_1332_ap_start <= ap_const_logic_1;
        else 
            grp_imag380_fu_1332_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_imag380_fu_1332_complex_float_M_imag_full_n_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state43, ap_CS_fsm_state52, ap_CS_fsm_state64, ap_CS_fsm_state85, ap_CS_fsm_state93, xk1_M_imag_full_n, xn1_M_imag_full_n, middle_M_imag_full_n, fft_kernel_M_imag_full_n, middle2_M_imag_full_n, xk2_M_imag_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_imag380_fu_1332_complex_float_M_imag_full_n <= xk2_M_imag_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_imag380_fu_1332_complex_float_M_imag_full_n <= middle2_M_imag_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_imag380_fu_1332_complex_float_M_imag_full_n <= fft_kernel_M_imag_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_imag380_fu_1332_complex_float_M_imag_full_n <= xk1_M_imag_full_n;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_imag380_fu_1332_complex_float_M_imag_full_n <= middle_M_imag_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_imag380_fu_1332_complex_float_M_imag_full_n <= xn1_M_imag_full_n;
        else 
            grp_imag380_fu_1332_complex_float_M_imag_full_n <= xk2_M_imag_full_n;
        end if; 
    end process;


    grp_imag380_fu_1332_p_val_assign_proc : process(reg_1354, ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state43, ap_CS_fsm_state52, ap_CS_fsm_state64, ap_CS_fsm_state85, ap_CS_fsm_state93, out3_M_imag_load_fu_1684_p1, out5_M_imag_load_fu_1796_p1, out6_M_imag_load_fu_1851_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_imag380_fu_1332_p_val <= out6_M_imag_load_fu_1851_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_imag380_fu_1332_p_val <= out5_M_imag_load_fu_1796_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_imag380_fu_1332_p_val <= out3_M_imag_load_fu_1684_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_imag380_fu_1332_p_val <= reg_1354;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_imag380_fu_1332_p_val <= ap_const_lv32_0;
        else 
            grp_imag380_fu_1332_p_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_imag_1_fu_1308_ap_start_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state35, ap_CS_fsm_state48, ap_CS_fsm_state56, ap_CS_fsm_state81, ap_CS_fsm_state89)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_imag_1_fu_1308_ap_start <= ap_const_logic_1;
        else 
            grp_imag_1_fu_1308_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_imag_1_fu_1308_complex_float_s_dout_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state35, ap_CS_fsm_state48, ap_CS_fsm_state56, ap_CS_fsm_state81, ap_CS_fsm_state89, in1_dout, in2_dout, in3_dout, in4_dout, in5_dout, in6_dout)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            grp_imag_1_fu_1308_complex_float_s_dout <= in6_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            grp_imag_1_fu_1308_complex_float_s_dout <= in5_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_imag_1_fu_1308_complex_float_s_dout <= in4_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_imag_1_fu_1308_complex_float_s_dout <= in3_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_imag_1_fu_1308_complex_float_s_dout <= in2_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_imag_1_fu_1308_complex_float_s_dout <= in1_dout;
        else 
            grp_imag_1_fu_1308_complex_float_s_dout <= in6_dout;
        end if; 
    end process;


    grp_imag_1_fu_1308_complex_float_s_empty_n_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state35, ap_CS_fsm_state48, ap_CS_fsm_state56, ap_CS_fsm_state81, ap_CS_fsm_state89, in1_empty_n, in2_empty_n, in3_empty_n, in4_empty_n, in5_empty_n, in6_empty_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            grp_imag_1_fu_1308_complex_float_s_empty_n <= in6_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            grp_imag_1_fu_1308_complex_float_s_empty_n <= in5_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_imag_1_fu_1308_complex_float_s_empty_n <= in4_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_imag_1_fu_1308_complex_float_s_empty_n <= in3_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_imag_1_fu_1308_complex_float_s_empty_n <= in2_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_imag_1_fu_1308_complex_float_s_empty_n <= in1_empty_n;
        else 
            grp_imag_1_fu_1308_complex_float_s_empty_n <= in6_empty_n;
        end if; 
    end process;


    grp_imag_1_fu_1308_complex_float_s_full_n_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state35, ap_CS_fsm_state48, ap_CS_fsm_state56, ap_CS_fsm_state81, ap_CS_fsm_state89, in1_full_n, in2_full_n, in3_full_n, in4_full_n, in5_full_n, in6_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            grp_imag_1_fu_1308_complex_float_s_full_n <= in6_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            grp_imag_1_fu_1308_complex_float_s_full_n <= in5_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_imag_1_fu_1308_complex_float_s_full_n <= in4_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_imag_1_fu_1308_complex_float_s_full_n <= in3_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_imag_1_fu_1308_complex_float_s_full_n <= in2_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_imag_1_fu_1308_complex_float_s_full_n <= in1_full_n;
        else 
            grp_imag_1_fu_1308_complex_float_s_full_n <= in6_full_n;
        end if; 
    end process;


    grp_imag_1_fu_1308_p_val_assign_proc : process(reg_1365, xn1_M_imag_read_reg_2523, kernel_M_imag_read_reg_2621, xk1_M_imag_read_reg_2709, middle2_M_imag_read_reg_2753, ap_CS_fsm_state23, ap_CS_fsm_state35, ap_CS_fsm_state48, ap_CS_fsm_state56, ap_CS_fsm_state81, ap_CS_fsm_state89)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            grp_imag_1_fu_1308_p_val <= middle2_M_imag_read_reg_2753;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            grp_imag_1_fu_1308_p_val <= xk1_M_imag_read_reg_2709;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_imag_1_fu_1308_p_val <= kernel_M_imag_read_reg_2621;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            grp_imag_1_fu_1308_p_val <= reg_1365;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_imag_1_fu_1308_p_val <= xn1_M_imag_read_reg_2523;
        else 
            grp_imag_1_fu_1308_p_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_matrix_div_1_fu_1204_ap_start <= grp_matrix_div_1_fu_1204_ap_start_reg;
    grp_matrix_div_fu_1216_ap_start <= grp_matrix_div_fu_1216_ap_start_reg;
    grp_matrix_modulus_fu_1143_ap_start <= grp_matrix_modulus_fu_1143_ap_start_reg;
    grp_matrix_plus_SNR_fu_1284_ap_start <= grp_matrix_plus_SNR_fu_1284_ap_start_reg;

    grp_real379_fu_1320_ap_start_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state42, ap_CS_fsm_state63, out3_empty_n, ap_CS_fsm_state51, out5_empty_n, ap_CS_fsm_state84, out6_empty_n, ap_CS_fsm_state92, grp_imag380_fu_1332_complex_float_M_imag_blk_n, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_imag380_fu_1332_complex_float_M_imag_blk_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state92) and (out6_empty_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state84) and (out5_empty_n = ap_const_logic_1)) or ((out3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            grp_real379_fu_1320_ap_start <= ap_const_logic_1;
        else 
            grp_real379_fu_1320_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_real379_fu_1320_complex_float_M_real_full_n_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state42, ap_CS_fsm_state63, ap_CS_fsm_state51, ap_CS_fsm_state84, ap_CS_fsm_state92, ap_CS_fsm_state19, xk1_M_real_full_n, xn1_M_real_full_n, middle_M_real_full_n, fft_kernel_M_real_full_n, middle2_M_real_full_n, xk2_M_real_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            grp_real379_fu_1320_complex_float_M_real_full_n <= xk2_M_real_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            grp_real379_fu_1320_complex_float_M_real_full_n <= middle2_M_real_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_real379_fu_1320_complex_float_M_real_full_n <= fft_kernel_M_real_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_real379_fu_1320_complex_float_M_real_full_n <= xk1_M_real_full_n;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            grp_real379_fu_1320_complex_float_M_real_full_n <= middle_M_real_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_real379_fu_1320_complex_float_M_real_full_n <= xn1_M_real_full_n;
        else 
            grp_real379_fu_1320_complex_float_M_real_full_n <= xk2_M_real_full_n;
        end if; 
    end process;


    grp_real379_fu_1320_p_val_assign_proc : process(reg_1354, ap_CS_fsm_state30, ap_CS_fsm_state42, ap_CS_fsm_state63, tmp_64_reg_2497, ap_CS_fsm_state51, ap_CS_fsm_state84, ap_CS_fsm_state92, ap_CS_fsm_state19, out3_M_real_load_fu_1670_p1, out5_M_real_load_fu_1782_p1, out6_M_real_load_fu_1837_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            grp_real379_fu_1320_p_val <= out6_M_real_load_fu_1837_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            grp_real379_fu_1320_p_val <= out5_M_real_load_fu_1782_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_real379_fu_1320_p_val <= out3_M_real_load_fu_1670_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_real379_fu_1320_p_val <= reg_1354;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_real379_fu_1320_p_val <= tmp_64_reg_2497;
        else 
            grp_real379_fu_1320_p_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_real_1_fu_1296_ap_start_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state34, ap_CS_fsm_state47, ap_CS_fsm_state55, ap_CS_fsm_state80, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_real_1_fu_1296_ap_start <= ap_const_logic_1;
        else 
            grp_real_1_fu_1296_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_real_1_fu_1296_complex_float_s_dout_assign_proc : process(in1_dout, in2_dout, in3_dout, in4_dout, in5_dout, in6_dout, ap_CS_fsm_state22, ap_CS_fsm_state34, ap_CS_fsm_state47, ap_CS_fsm_state55, ap_CS_fsm_state80, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_real_1_fu_1296_complex_float_s_dout <= in6_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            grp_real_1_fu_1296_complex_float_s_dout <= in5_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_real_1_fu_1296_complex_float_s_dout <= in4_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_real_1_fu_1296_complex_float_s_dout <= in3_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_real_1_fu_1296_complex_float_s_dout <= in2_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_real_1_fu_1296_complex_float_s_dout <= in1_dout;
        else 
            grp_real_1_fu_1296_complex_float_s_dout <= in6_dout;
        end if; 
    end process;


    grp_real_1_fu_1296_complex_float_s_empty_n_assign_proc : process(in1_empty_n, in2_empty_n, in3_empty_n, in4_empty_n, in5_empty_n, in6_empty_n, ap_CS_fsm_state22, ap_CS_fsm_state34, ap_CS_fsm_state47, ap_CS_fsm_state55, ap_CS_fsm_state80, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_real_1_fu_1296_complex_float_s_empty_n <= in6_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            grp_real_1_fu_1296_complex_float_s_empty_n <= in5_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_real_1_fu_1296_complex_float_s_empty_n <= in4_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_real_1_fu_1296_complex_float_s_empty_n <= in3_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_real_1_fu_1296_complex_float_s_empty_n <= in2_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_real_1_fu_1296_complex_float_s_empty_n <= in1_empty_n;
        else 
            grp_real_1_fu_1296_complex_float_s_empty_n <= in6_empty_n;
        end if; 
    end process;


    grp_real_1_fu_1296_complex_float_s_full_n_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state34, ap_CS_fsm_state47, ap_CS_fsm_state55, ap_CS_fsm_state80, ap_CS_fsm_state88, in1_full_n, in2_full_n, in3_full_n, in4_full_n, in5_full_n, in6_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_real_1_fu_1296_complex_float_s_full_n <= in6_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            grp_real_1_fu_1296_complex_float_s_full_n <= in5_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_real_1_fu_1296_complex_float_s_full_n <= in4_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_real_1_fu_1296_complex_float_s_full_n <= in3_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_real_1_fu_1296_complex_float_s_full_n <= in2_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_real_1_fu_1296_complex_float_s_full_n <= in1_full_n;
        else 
            grp_real_1_fu_1296_complex_float_s_full_n <= in6_full_n;
        end if; 
    end process;


    grp_real_1_fu_1296_p_val_assign_proc : process(reg_1360, xn1_M_real_read_reg_2518, kernel_M_real_read_reg_2616, xk1_M_real_read_reg_2704, middle2_M_real_read_reg_2748, ap_CS_fsm_state22, ap_CS_fsm_state34, ap_CS_fsm_state47, ap_CS_fsm_state55, ap_CS_fsm_state80, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_real_1_fu_1296_p_val <= middle2_M_real_read_reg_2748;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            grp_real_1_fu_1296_p_val <= xk1_M_real_read_reg_2704;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_real_1_fu_1296_p_val <= kernel_M_real_read_reg_2616;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_real_1_fu_1296_p_val <= reg_1360;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_real_1_fu_1296_p_val <= xn1_M_real_read_reg_2518;
        else 
            grp_real_1_fu_1296_p_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    guard_variable_for_W_1_load_fu_1370_p1 <= guard_variable_for_W;

    in1_din_assign_proc : process(grp_real_1_fu_1296_complex_float_s_din, grp_imag_1_fu_1308_complex_float_s_din, ap_CS_fsm_state23, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            in1_din <= grp_imag_1_fu_1308_complex_float_s_din;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            in1_din <= grp_real_1_fu_1296_complex_float_s_din;
        else 
            in1_din <= grp_imag_1_fu_1308_complex_float_s_din;
        end if; 
    end process;

    in1_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    in1_read_assign_proc : process(grp_fft_top_fu_1179_in_r_read, grp_real_1_fu_1296_complex_float_s_read, grp_imag_1_fu_1308_complex_float_s_read, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            in1_read <= grp_imag_1_fu_1308_complex_float_s_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            in1_read <= grp_real_1_fu_1296_complex_float_s_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            in1_read <= grp_fft_top_fu_1179_in_r_read;
        else 
            in1_read <= ap_const_logic_0;
        end if; 
    end process;


    in1_write_assign_proc : process(grp_real_1_fu_1296_complex_float_s_write, grp_imag_1_fu_1308_complex_float_s_write, ap_CS_fsm_state23, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            in1_write <= grp_imag_1_fu_1308_complex_float_s_write;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            in1_write <= grp_real_1_fu_1296_complex_float_s_write;
        else 
            in1_write <= ap_const_logic_0;
        end if; 
    end process;


    in2_din_assign_proc : process(grp_real_1_fu_1296_complex_float_s_din, grp_imag_1_fu_1308_complex_float_s_din, ap_CS_fsm_state35, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            in2_din <= grp_imag_1_fu_1308_complex_float_s_din;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            in2_din <= grp_real_1_fu_1296_complex_float_s_din;
        else 
            in2_din <= grp_imag_1_fu_1308_complex_float_s_din;
        end if; 
    end process;

    in2_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    in2_read_assign_proc : process(grp_fft_top_fu_1179_in_r_read, grp_real_1_fu_1296_complex_float_s_read, grp_imag_1_fu_1308_complex_float_s_read, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            in2_read <= grp_imag_1_fu_1308_complex_float_s_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            in2_read <= grp_real_1_fu_1296_complex_float_s_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            in2_read <= grp_fft_top_fu_1179_in_r_read;
        else 
            in2_read <= ap_const_logic_0;
        end if; 
    end process;


    in2_write_assign_proc : process(grp_real_1_fu_1296_complex_float_s_write, grp_imag_1_fu_1308_complex_float_s_write, ap_CS_fsm_state35, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            in2_write <= grp_imag_1_fu_1308_complex_float_s_write;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            in2_write <= grp_real_1_fu_1296_complex_float_s_write;
        else 
            in2_write <= ap_const_logic_0;
        end if; 
    end process;


    in3_din_assign_proc : process(grp_real_1_fu_1296_complex_float_s_din, grp_imag_1_fu_1308_complex_float_s_din, ap_CS_fsm_state48, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            in3_din <= grp_imag_1_fu_1308_complex_float_s_din;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            in3_din <= grp_real_1_fu_1296_complex_float_s_din;
        else 
            in3_din <= grp_imag_1_fu_1308_complex_float_s_din;
        end if; 
    end process;

    in3_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    in3_read_assign_proc : process(grp_fft_top_fu_1179_in_r_read, grp_real_1_fu_1296_complex_float_s_read, grp_imag_1_fu_1308_complex_float_s_read, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            in3_read <= grp_imag_1_fu_1308_complex_float_s_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            in3_read <= grp_real_1_fu_1296_complex_float_s_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            in3_read <= grp_fft_top_fu_1179_in_r_read;
        else 
            in3_read <= ap_const_logic_0;
        end if; 
    end process;


    in3_write_assign_proc : process(grp_real_1_fu_1296_complex_float_s_write, grp_imag_1_fu_1308_complex_float_s_write, ap_CS_fsm_state48, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            in3_write <= grp_imag_1_fu_1308_complex_float_s_write;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            in3_write <= grp_real_1_fu_1296_complex_float_s_write;
        else 
            in3_write <= ap_const_logic_0;
        end if; 
    end process;


    in4_din_assign_proc : process(grp_real_1_fu_1296_complex_float_s_din, grp_imag_1_fu_1308_complex_float_s_din, ap_CS_fsm_state56, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            in4_din <= grp_imag_1_fu_1308_complex_float_s_din;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            in4_din <= grp_real_1_fu_1296_complex_float_s_din;
        else 
            in4_din <= grp_imag_1_fu_1308_complex_float_s_din;
        end if; 
    end process;

    in4_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    in4_read_assign_proc : process(grp_fft_top_fu_1179_in_r_read, grp_real_1_fu_1296_complex_float_s_read, grp_imag_1_fu_1308_complex_float_s_read, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            in4_read <= grp_imag_1_fu_1308_complex_float_s_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            in4_read <= grp_real_1_fu_1296_complex_float_s_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            in4_read <= grp_fft_top_fu_1179_in_r_read;
        else 
            in4_read <= ap_const_logic_0;
        end if; 
    end process;


    in4_write_assign_proc : process(grp_real_1_fu_1296_complex_float_s_write, grp_imag_1_fu_1308_complex_float_s_write, ap_CS_fsm_state56, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            in4_write <= grp_imag_1_fu_1308_complex_float_s_write;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            in4_write <= grp_real_1_fu_1296_complex_float_s_write;
        else 
            in4_write <= ap_const_logic_0;
        end if; 
    end process;


    in5_din_assign_proc : process(grp_real_1_fu_1296_complex_float_s_din, grp_imag_1_fu_1308_complex_float_s_din, ap_CS_fsm_state81, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            in5_din <= grp_imag_1_fu_1308_complex_float_s_din;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            in5_din <= grp_real_1_fu_1296_complex_float_s_din;
        else 
            in5_din <= grp_imag_1_fu_1308_complex_float_s_din;
        end if; 
    end process;

    in5_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    in5_read_assign_proc : process(grp_fft_top_fu_1179_in_r_read, grp_real_1_fu_1296_complex_float_s_read, grp_imag_1_fu_1308_complex_float_s_read, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            in5_read <= grp_imag_1_fu_1308_complex_float_s_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            in5_read <= grp_real_1_fu_1296_complex_float_s_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            in5_read <= grp_fft_top_fu_1179_in_r_read;
        else 
            in5_read <= ap_const_logic_0;
        end if; 
    end process;


    in5_write_assign_proc : process(grp_real_1_fu_1296_complex_float_s_write, grp_imag_1_fu_1308_complex_float_s_write, ap_CS_fsm_state81, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            in5_write <= grp_imag_1_fu_1308_complex_float_s_write;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            in5_write <= grp_real_1_fu_1296_complex_float_s_write;
        else 
            in5_write <= ap_const_logic_0;
        end if; 
    end process;


    in6_din_assign_proc : process(grp_real_1_fu_1296_complex_float_s_din, grp_imag_1_fu_1308_complex_float_s_din, ap_CS_fsm_state89, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            in6_din <= grp_imag_1_fu_1308_complex_float_s_din;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            in6_din <= grp_real_1_fu_1296_complex_float_s_din;
        else 
            in6_din <= grp_imag_1_fu_1308_complex_float_s_din;
        end if; 
    end process;

    in6_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    in6_read_assign_proc : process(grp_fft_top_fu_1179_in_r_read, grp_real_1_fu_1296_complex_float_s_read, grp_imag_1_fu_1308_complex_float_s_read, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            in6_read <= grp_imag_1_fu_1308_complex_float_s_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            in6_read <= grp_real_1_fu_1296_complex_float_s_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            in6_read <= grp_fft_top_fu_1179_in_r_read;
        else 
            in6_read <= ap_const_logic_0;
        end if; 
    end process;


    in6_write_assign_proc : process(grp_real_1_fu_1296_complex_float_s_write, grp_imag_1_fu_1308_complex_float_s_write, ap_CS_fsm_state89, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            in6_write <= grp_imag_1_fu_1308_complex_float_s_write;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            in6_write <= grp_real_1_fu_1296_complex_float_s_write;
        else 
            in6_write <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_TDATA_blk_n_assign_proc : process(INPUT_data_V_0_state, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, tmp_56_reg_2447)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_56_reg_2447 = ap_const_lv1_1))) then 
            in_stream_TDATA_blk_n <= INPUT_data_V_0_state(0);
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_stream_TREADY <= INPUT_last_V_0_state(1);
    indvar_flatten_next_fu_2243_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_1114_p4) + unsigned(ap_const_lv62_1));
    isNeg_fu_1939_p3 <= sh_assign_fu_1933_p2(8 downto 8);

    kernel_M_imag_din_assign_proc : process(ap_start, ap_CS_fsm_state1, guard_variable_for_W, kernel_M_real_full_n, kernel_M_imag_full_n, guard_variable_for_W_1_reg_2401, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_KernelMaker_fu_1232_kernel_M_imag_din, ap_CS_fsm_state44)
    begin
        if (((not((((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)) or (not(((kernel_M_imag_full_n = ap_const_logic_0) or (kernel_M_real_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((ap_start = ap_const_logic_0) or ((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (guard_variable_for_W = ap_const_lv1_0)))) then 
            kernel_M_imag_din <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            kernel_M_imag_din <= grp_KernelMaker_fu_1232_kernel_M_imag_din;
        else 
            kernel_M_imag_din <= grp_KernelMaker_fu_1232_kernel_M_imag_din;
        end if; 
    end process;

    kernel_M_imag_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    kernel_M_imag_read_assign_proc : process(ap_CS_fsm_state46, kernel_M_real_empty_n, exitcond5_fu_1643_p2, kernel_M_imag_empty_n)
    begin
        if ((not((((kernel_M_imag_empty_n = ap_const_logic_0) and (exitcond5_fu_1643_p2 = ap_const_lv1_0)) or ((kernel_M_real_empty_n = ap_const_logic_0) and (exitcond5_fu_1643_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state46) and (exitcond5_fu_1643_p2 = ap_const_lv1_0))) then 
            kernel_M_imag_read <= ap_const_logic_1;
        else 
            kernel_M_imag_read <= ap_const_logic_0;
        end if; 
    end process;


    kernel_M_imag_write_assign_proc : process(ap_start, ap_CS_fsm_state1, guard_variable_for_W, kernel_M_real_full_n, kernel_M_imag_full_n, guard_variable_for_W_1_reg_2401, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_KernelMaker_fu_1232_kernel_M_imag_write, ap_CS_fsm_state44)
    begin
        if (((not((((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)) or (not(((kernel_M_imag_full_n = ap_const_logic_0) or (kernel_M_real_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((ap_start = ap_const_logic_0) or ((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (guard_variable_for_W = ap_const_lv1_0)))) then 
            kernel_M_imag_write <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            kernel_M_imag_write <= grp_KernelMaker_fu_1232_kernel_M_imag_write;
        else 
            kernel_M_imag_write <= ap_const_logic_0;
        end if; 
    end process;


    kernel_M_real_din_assign_proc : process(ap_start, ap_CS_fsm_state1, guard_variable_for_W, kernel_M_real_full_n, kernel_M_imag_full_n, guard_variable_for_W_1_reg_2401, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_KernelMaker_fu_1232_kernel_M_real_din, ap_CS_fsm_state44)
    begin
        if (((not((((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)) or (not(((kernel_M_imag_full_n = ap_const_logic_0) or (kernel_M_real_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((ap_start = ap_const_logic_0) or ((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (guard_variable_for_W = ap_const_lv1_0)))) then 
            kernel_M_real_din <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            kernel_M_real_din <= grp_KernelMaker_fu_1232_kernel_M_real_din;
        else 
            kernel_M_real_din <= grp_KernelMaker_fu_1232_kernel_M_real_din;
        end if; 
    end process;

    kernel_M_real_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    kernel_M_real_read_assign_proc : process(ap_CS_fsm_state46, kernel_M_real_empty_n, exitcond5_fu_1643_p2, kernel_M_imag_empty_n)
    begin
        if ((not((((kernel_M_imag_empty_n = ap_const_logic_0) and (exitcond5_fu_1643_p2 = ap_const_lv1_0)) or ((kernel_M_real_empty_n = ap_const_logic_0) and (exitcond5_fu_1643_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state46) and (exitcond5_fu_1643_p2 = ap_const_lv1_0))) then 
            kernel_M_real_read <= ap_const_logic_1;
        else 
            kernel_M_real_read <= ap_const_logic_0;
        end if; 
    end process;


    kernel_M_real_write_assign_proc : process(ap_start, ap_CS_fsm_state1, guard_variable_for_W, kernel_M_real_full_n, kernel_M_imag_full_n, guard_variable_for_W_1_reg_2401, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_KernelMaker_fu_1232_kernel_M_real_write, ap_CS_fsm_state44)
    begin
        if (((not((((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (guard_variable_for_W_1_reg_2401 = ap_const_lv1_0)) or (not(((kernel_M_imag_full_n = ap_const_logic_0) or (kernel_M_real_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((ap_start = ap_const_logic_0) or ((kernel_M_imag_full_n = ap_const_logic_0) and (guard_variable_for_W = ap_const_lv1_0)) or ((kernel_M_real_full_n = ap_const_logic_0) and (guard_variable_for_W = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (guard_variable_for_W = ap_const_lv1_0)))) then 
            kernel_M_real_write <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            kernel_M_real_write <= grp_KernelMaker_fu_1232_kernel_M_real_write;
        else 
            kernel_M_real_write <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_cast_fu_1871_p0 <= rows_V;
    lhs_V_cast_fu_1871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_cast_fu_1871_p0),33));
    mantissa_V_7_cast5_fu_1974_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_1965_p4),79));
    mantissa_V_fu_1965_p4 <= ((ap_const_lv1_1 & tmp_V_8_reg_2814) & ap_const_lv1_0);
    middle2_M_imag_din <= grp_imag380_fu_1332_complex_float_M_imag_din;
    middle2_M_imag_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    middle2_M_imag_read_assign_proc : process(ap_CS_fsm_state87, middle2_M_real_empty_n, exitcond18_fu_1811_p2, middle2_M_imag_empty_n)
    begin
        if ((not((((middle2_M_imag_empty_n = ap_const_logic_0) and (exitcond18_fu_1811_p2 = ap_const_lv1_0)) or ((middle2_M_real_empty_n = ap_const_logic_0) and (exitcond18_fu_1811_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state87) and (exitcond18_fu_1811_p2 = ap_const_lv1_0))) then 
            middle2_M_imag_read <= ap_const_logic_1;
        else 
            middle2_M_imag_read <= ap_const_logic_0;
        end if; 
    end process;


    middle2_M_imag_write_assign_proc : process(grp_imag380_fu_1332_complex_float_M_imag_write, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            middle2_M_imag_write <= grp_imag380_fu_1332_complex_float_M_imag_write;
        else 
            middle2_M_imag_write <= ap_const_logic_0;
        end if; 
    end process;

    middle2_M_real_din <= grp_real379_fu_1320_complex_float_M_real_din;
    middle2_M_real_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    middle2_M_real_read_assign_proc : process(ap_CS_fsm_state87, middle2_M_real_empty_n, exitcond18_fu_1811_p2, middle2_M_imag_empty_n)
    begin
        if ((not((((middle2_M_imag_empty_n = ap_const_logic_0) and (exitcond18_fu_1811_p2 = ap_const_lv1_0)) or ((middle2_M_real_empty_n = ap_const_logic_0) and (exitcond18_fu_1811_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state87) and (exitcond18_fu_1811_p2 = ap_const_lv1_0))) then 
            middle2_M_real_read <= ap_const_logic_1;
        else 
            middle2_M_real_read <= ap_const_logic_0;
        end if; 
    end process;


    middle2_M_real_write_assign_proc : process(ap_CS_fsm_state84, grp_real379_fu_1320_complex_float_M_real_write)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            middle2_M_real_write <= grp_real379_fu_1320_complex_float_M_real_write;
        else 
            middle2_M_real_write <= ap_const_logic_0;
        end if; 
    end process;

    middle_M_imag_din <= grp_imag380_fu_1332_complex_float_M_imag_din;
    middle_M_imag_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    middle_M_imag_read_assign_proc : process(ap_CS_fsm_state33, middle_M_real_empty_n, exitcond3_fu_1585_p2, middle_M_imag_empty_n, ap_CS_fsm_state54, exitcond_fu_1700_p2)
    begin
        if (((not((((middle_M_imag_empty_n = ap_const_logic_0) and (exitcond_fu_1700_p2 = ap_const_lv1_0)) or ((middle_M_real_empty_n = ap_const_logic_0) and (exitcond_fu_1700_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state54) and (exitcond_fu_1700_p2 = ap_const_lv1_0)) or (not((((middle_M_imag_empty_n = ap_const_logic_0) and (exitcond3_fu_1585_p2 = ap_const_lv1_0)) or ((middle_M_real_empty_n = ap_const_logic_0) and (exitcond3_fu_1585_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond3_fu_1585_p2 = ap_const_lv1_0)))) then 
            middle_M_imag_read <= ap_const_logic_1;
        else 
            middle_M_imag_read <= ap_const_logic_0;
        end if; 
    end process;


    middle_M_imag_write_assign_proc : process(grp_imag380_fu_1332_complex_float_M_imag_write, ap_CS_fsm_state31, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            middle_M_imag_write <= grp_imag380_fu_1332_complex_float_M_imag_write;
        else 
            middle_M_imag_write <= ap_const_logic_0;
        end if; 
    end process;

    middle_M_real_din <= grp_real379_fu_1320_complex_float_M_real_din;
    middle_M_real_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    middle_M_real_read_assign_proc : process(ap_CS_fsm_state33, middle_M_real_empty_n, exitcond3_fu_1585_p2, middle_M_imag_empty_n, ap_CS_fsm_state54, exitcond_fu_1700_p2)
    begin
        if (((not((((middle_M_imag_empty_n = ap_const_logic_0) and (exitcond_fu_1700_p2 = ap_const_lv1_0)) or ((middle_M_real_empty_n = ap_const_logic_0) and (exitcond_fu_1700_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state54) and (exitcond_fu_1700_p2 = ap_const_lv1_0)) or (not((((middle_M_imag_empty_n = ap_const_logic_0) and (exitcond3_fu_1585_p2 = ap_const_lv1_0)) or ((middle_M_real_empty_n = ap_const_logic_0) and (exitcond3_fu_1585_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond3_fu_1585_p2 = ap_const_lv1_0)))) then 
            middle_M_real_read <= ap_const_logic_1;
        else 
            middle_M_real_read <= ap_const_logic_0;
        end if; 
    end process;


    middle_M_real_write_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state51, grp_real379_fu_1320_complex_float_M_real_write)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            middle_M_real_write <= grp_real379_fu_1320_complex_float_M_real_write;
        else 
            middle_M_real_write <= ap_const_logic_0;
        end if; 
    end process;

    out1_M_imag_load_fu_1569_p1 <= out1_M_imag_load_ne_reg_2546;
    out1_M_real_load_fu_1555_p1 <= tmp_74_reg_2536;
    out1_din <= grp_fft_top_fu_1179_out_r_din;
    out1_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    out1_read_assign_proc : process(ap_CS_fsm_state25, out1_empty_n, exitcond11_fu_1540_p2, ap_CS_fsm_state26)
    begin
        if ((((out1_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or (not(((out1_empty_n = ap_const_logic_0) and (exitcond11_fu_1540_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond11_fu_1540_p2 = ap_const_lv1_0)))) then 
            out1_read <= ap_const_logic_1;
        else 
            out1_read <= ap_const_logic_0;
        end if; 
    end process;


    out1_write_assign_proc : process(grp_fft_top_fu_1179_out_r_write, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            out1_write <= grp_fft_top_fu_1179_out_r_write;
        else 
            out1_write <= ap_const_logic_0;
        end if; 
    end process;

    out2_M_imag_load_fu_1627_p1 <= out2_M_imag_load_ne_reg_2590;
    out2_M_real_load_fu_1613_p1 <= tmp_75_reg_2580;
    out2_din <= grp_fft_top_fu_1179_out_r_din;
    out2_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    out2_read_assign_proc : process(ap_CS_fsm_state37, out2_empty_n, exitcond6_fu_1597_p2, ap_CS_fsm_state38)
    begin
        if ((((out2_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or (not(((out2_empty_n = ap_const_logic_0) and (exitcond6_fu_1597_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state37) and (exitcond6_fu_1597_p2 = ap_const_lv1_0)))) then 
            out2_read <= ap_const_logic_1;
        else 
            out2_read <= ap_const_logic_0;
        end if; 
    end process;


    out2_write_assign_proc : process(grp_fft_top_fu_1179_out_r_write, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            out2_write <= grp_fft_top_fu_1179_out_r_write;
        else 
            out2_write <= ap_const_logic_0;
        end if; 
    end process;

    out3_M_imag_load_fu_1684_p1 <= out3_M_imag_load_ne_reg_2639;
    out3_M_real_load_fu_1670_p1 <= tmp_77_reg_2634;
    out3_din <= grp_fft_top_fu_1179_out_r_din;
    out3_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    out3_read_assign_proc : process(grp_real379_fu_1320_complex_float_M_real_blk_n, ap_CS_fsm_state50, out3_empty_n, exitcond14_fu_1655_p2, ap_CS_fsm_state51)
    begin
        if (((not(((out3_empty_n = ap_const_logic_0) and (exitcond14_fu_1655_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state50) and (exitcond14_fu_1655_p2 = ap_const_lv1_0)) or (not(((out3_empty_n = ap_const_logic_0) or (grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            out3_read <= ap_const_logic_1;
        else 
            out3_read <= ap_const_logic_0;
        end if; 
    end process;


    out3_write_assign_proc : process(grp_fft_top_fu_1179_out_r_write, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            out3_write <= grp_fft_top_fu_1179_out_r_write;
        else 
            out3_write <= ap_const_logic_0;
        end if; 
    end process;

    out4_M_imag_load_fu_1741_p1 <= out4_M_imag_load_ne_reg_2678;
    out4_M_real_load_fu_1727_p1 <= tmp_80_reg_2668;
    out4_din <= grp_fft_top_fu_1179_out_r_din;
    out4_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    out4_read_assign_proc : process(ap_CS_fsm_state58, out4_empty_n, exitcond17_fu_1712_p2, ap_CS_fsm_state59)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state59) and (out4_empty_n = ap_const_logic_1)) or (not(((out4_empty_n = ap_const_logic_0) and (exitcond17_fu_1712_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state58) and (exitcond17_fu_1712_p2 = ap_const_lv1_0)))) then 
            out4_read <= ap_const_logic_1;
        else 
            out4_read <= ap_const_logic_0;
        end if; 
    end process;


    out4_write_assign_proc : process(grp_fft_top_fu_1179_out_r_write, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            out4_write <= grp_fft_top_fu_1179_out_r_write;
        else 
            out4_write <= ap_const_logic_0;
        end if; 
    end process;

    out5_M_imag_load_fu_1796_p1 <= out5_M_imag_load_ne_reg_2727;
    out5_M_real_load_fu_1782_p1 <= tmp_87_reg_2722;
    out5_din <= grp_fft_top_fu_1179_out_r_din;
    out5_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    out5_read_assign_proc : process(grp_real379_fu_1320_complex_float_M_real_blk_n, ap_CS_fsm_state83, out5_empty_n, exitcond19_fu_1767_p2, ap_CS_fsm_state84)
    begin
        if (((not(((grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_0) or (out5_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state84)) or (not(((out5_empty_n = ap_const_logic_0) and (exitcond19_fu_1767_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state83) and (exitcond19_fu_1767_p2 = ap_const_lv1_0)))) then 
            out5_read <= ap_const_logic_1;
        else 
            out5_read <= ap_const_logic_0;
        end if; 
    end process;


    out5_write_assign_proc : process(grp_fft_top_fu_1179_out_r_write, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            out5_write <= grp_fft_top_fu_1179_out_r_write;
        else 
            out5_write <= ap_const_logic_0;
        end if; 
    end process;

    out6_M_imag_load_fu_1851_p1 <= out6_M_imag_load_ne_reg_2771;
    out6_M_real_load_fu_1837_p1 <= tmp_112_reg_2766;
    out6_din <= grp_fft_top_fu_1179_out_r_din;
    out6_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    out6_read_assign_proc : process(grp_real379_fu_1320_complex_float_M_real_blk_n, ap_CS_fsm_state91, out6_empty_n, exitcond21_fu_1822_p2, ap_CS_fsm_state92)
    begin
        if (((not(((grp_real379_fu_1320_complex_float_M_real_blk_n = ap_const_logic_0) or (out6_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state92)) or (not(((out6_empty_n = ap_const_logic_0) and (exitcond21_fu_1822_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state91) and (exitcond21_fu_1822_p2 = ap_const_lv1_0)))) then 
            out6_read <= ap_const_logic_1;
        else 
            out6_read <= ap_const_logic_0;
        end if; 
    end process;


    out6_write_assign_proc : process(grp_fft_top_fu_1179_out_r_write, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            out6_write <= grp_fft_top_fu_1179_out_r_write;
        else 
            out6_write <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_TDATA <= OUTPUT_data_V_1_data_out;

    out_stream_TDATA_blk_n_assign_proc : process(OUTPUT_data_V_1_state, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_flatten_reg_2857, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1, exitcond_flatten_reg_2857_pp1_iter1_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_2857_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_2857 = ap_const_lv1_0)))) then 
            out_stream_TDATA_blk_n <= OUTPUT_data_V_1_state(1);
        else 
            out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_TLAST <= OUTPUT_last_V_1_data_out;
    out_stream_TUSER <= OUTPUT_user_V_1_data_out;
    out_stream_TVALID <= OUTPUT_last_V_1_state(0);
    out_stream_last_V_tm_fu_2336_p2 <= (tmp_91_fu_2331_p2 and tmp_74_mid2_fu_2277_p3);
    out_stream_user_V_tm_fu_2325_p2 <= "1" when (tmp_89_fu_2317_p3 = ap_const_lv32_0) else "0";
    p_Result_29_fu_2347_p5 <= (((res_data_stream_0_V_dout & tmp_99_reg_2896) & tmp_96_reg_2891) & tmp_95_reg_2886);
    p_Val2_101_fu_1903_p1 <= xk2_M_real_dout;
    p_Val2_107_fu_2022_p3 <= 
        tmp_93_fu_2008_p1 when (isNeg_reg_2819(0) = '1') else 
        tmp_94_fu_2012_p4;
    p_Val2_108_fu_2035_p3 <= 
        result_V_4_fu_2029_p2 when (p_Result_s_reg_2809(0) = '1') else 
        p_Val2_107_fu_2022_p3;
    p_sum1_fu_1386_p2 <= std_logic_vector(unsigned(p_rec2_reg_834) + unsigned(ap_const_lv8_1));
    p_sum_fu_1374_p2 <= std_logic_vector(unsigned(p_rec1_reg_823) + unsigned(ap_const_lv8_1));
    packets_fu_1433_p0 <= packets_fu_1433_p00(30 - 1 downto 0);
    packets_fu_1433_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_packets_fu_1416_p4),32));
    packets_fu_1433_p1 <= rows_V;
    packets_fu_1433_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &packets_fu_1433_p0) * signed(packets_fu_1433_p1))), 32));
    r_10_fu_1637_p2 <= std_logic_vector(unsigned(r8_reg_956) + unsigned(ap_const_lv9_1));
    r_13_fu_1750_p2 <= std_logic_vector(unsigned(i_op_assign_8_reg_1022) + unsigned(ap_const_lv32_1));
    r_14_fu_1717_p2 <= std_logic_vector(unsigned(i_op_assign_7_reg_1011) + unsigned(ap_const_lv32_1));
    r_15_fu_1860_p2 <= std_logic_vector(unsigned(i_op_assign_1_reg_1088) + unsigned(ap_const_lv32_1));
    r_16_fu_1816_p2 <= std_logic_vector(unsigned(i_op_assign_11_reg_1066) + unsigned(ap_const_lv32_1));
    r_18_fu_1827_p2 <= std_logic_vector(unsigned(i_op_assign_13_reg_1077) + unsigned(ap_const_lv32_1));
    r_1_fu_2249_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_i_op_assign_12_phi_fu_1125_p4));
    r_4_fu_1447_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_phi_fu_861_p4) + unsigned(ap_const_lv31_1));
    r_5_fu_1497_p2 <= std_logic_vector(unsigned(i_op_assign_reg_868) + unsigned(ap_const_lv32_1));
    r_6_fu_1523_p2 <= std_logic_vector(unsigned(i_op_assign_3_reg_890) + unsigned(ap_const_lv32_1));
    r_7_fu_1591_p2 <= std_logic_vector(unsigned(r6_reg_934) + unsigned(ap_const_lv9_1));
    r_8_fu_1603_p2 <= std_logic_vector(unsigned(r7_reg_945) + unsigned(ap_const_lv9_1));
    r_9_fu_1706_p2 <= std_logic_vector(unsigned(r9_reg_1000) + unsigned(ap_const_lv9_1));
    r_V_42_fu_1994_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_7_cast5_fu_1974_p1),to_integer(unsigned('0' & tmp_i_i_i_438_fu_1984_p1(31-1 downto 0)))));
    r_V_fu_1988_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_1965_p4),to_integer(unsigned('0' & sh_assign_16_cast_ca_fu_1981_p1(25-1 downto 0)))));
    r_cast_fu_1438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_r_phi_fu_861_p4),32));
    res_data_stream_0_V_din <= 
        tmp_105_reg_2840 when (abscond_fu_2175_p2(0) = '1') else 
        tmp_76_fu_2180_p2;

    res_data_stream_0_V_read_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_flatten_reg_2857, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_2857 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_2857 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_2857 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_2857 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            res_data_stream_0_V_read <= ap_const_logic_1;
        else 
            res_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    res_data_stream_0_V_write_assign_proc : process(ap_CS_fsm_state97, res_data_stream_0_V_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state97) and (res_data_stream_0_V_full_n = ap_const_logic_1))) then 
            res_data_stream_0_V_write <= ap_const_logic_1;
        else 
            res_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    result_V_4_fu_2029_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_107_fu_2022_p3));
    ret_V_fu_1874_p2 <= std_logic_vector(unsigned(lhs_V_cast_fu_1871_p1) + unsigned(ap_const_lv33_1FFFFFFFF));
        sh_assign_16_cast_ca_fu_1981_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_2824),25));

        sh_assign_16_cast_fu_1978_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_2824),32));

    sh_assign_fu_1933_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast4_fu_1929_p1));

    src_bw_data_stream_0_din_assign_proc : process(tmp_56_reg_2447, tmp_3_reg_2456, tmp_5_reg_2461, tmp_7_reg_2466, tmp_61_fu_1457_p1, ap_condition_2468, ap_condition_2473, ap_condition_2478, ap_condition_2483)
    begin
        if ((tmp_56_reg_2447 = ap_const_lv1_1)) then
            if ((ap_const_boolean_1 = ap_condition_2483)) then 
                src_bw_data_stream_0_din <= tmp_7_reg_2466;
            elsif ((ap_const_boolean_1 = ap_condition_2478)) then 
                src_bw_data_stream_0_din <= tmp_5_reg_2461;
            elsif ((ap_const_boolean_1 = ap_condition_2473)) then 
                src_bw_data_stream_0_din <= tmp_3_reg_2456;
            elsif ((ap_const_boolean_1 = ap_condition_2468)) then 
                src_bw_data_stream_0_din <= tmp_61_fu_1457_p1;
            else 
                src_bw_data_stream_0_din <= "XXXXXXXX";
            end if;
        else 
            src_bw_data_stream_0_din <= "XXXXXXXX";
        end if; 
    end process;


    src_bw_data_stream_0_read_assign_proc : process(ap_CS_fsm_state12, src_bw_data_stream_0_empty_n, exitcond9_fu_1503_p2)
    begin
        if ((not(((src_bw_data_stream_0_empty_n = ap_const_logic_0) and (exitcond9_fu_1503_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond9_fu_1503_p2 = ap_const_lv1_0))) then 
            src_bw_data_stream_0_read <= ap_const_logic_1;
        else 
            src_bw_data_stream_0_read <= ap_const_logic_0;
        end if; 
    end process;


    src_bw_data_stream_0_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_56_reg_2447, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_56_reg_2447 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (tmp_56_reg_2447 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_56_reg_2447 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_56_reg_2447 = ap_const_lv1_1)))) then 
            src_bw_data_stream_0_write <= ap_const_logic_1;
        else 
            src_bw_data_stream_0_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_104_fu_2000_p3 <= r_V_fu_1988_p2(24 downto 24);
    tmp_105_fu_2042_p1 <= p_Val2_108_fu_2035_p3(8 - 1 downto 0);
    tmp_112_fu_1833_p1 <= out6_dout(32 - 1 downto 0);
    tmp_127_cast_fu_2229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_12_phi_fu_1125_p4),33));
    tmp_127_cast_mid1_fu_2268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_1_fu_2249_p2),33));
    tmp_53_fu_1392_p2 <= std_logic_vector(unsigned(tmp_52_reg_846) + unsigned(ap_const_lv8_1));
    tmp_54_fu_1398_p2 <= "1" when (tmp_52_reg_846 = ap_const_lv8_FF) else "0";
    tmp_55_fu_1404_p2 <= "1" when (p_rec2_reg_834 = ap_const_lv8_FE) else "0";
    tmp_56_fu_1442_p2 <= "1" when (signed(r_cast_fu_1438_p1) < signed(packets_fu_1433_p2)) else "0";
    tmp_61_fu_1457_p1 <= INPUT_data_V_0_data_out(8 - 1 downto 0);
    tmp_71_fu_1866_p2 <= std_logic_vector(unsigned(col_packets_cast_fu_1429_p1) + unsigned(ap_const_lv31_7FFFFFFF));
    tmp_72_fu_2233_p2 <= "1" when (tmp_127_cast_fu_2229_p1 = ret_V_fu_1874_p2) else "0";
    tmp_74_fu_1551_p1 <= out1_dout(32 - 1 downto 0);
    tmp_74_mid1_fu_2272_p2 <= "1" when (tmp_127_cast_mid1_fu_2268_p1 = ret_V_fu_1874_p2) else "0";
    tmp_74_mid2_fu_2277_p3 <= 
        tmp_72_fu_2233_p2 when (tmp_90_fu_2255_p2(0) = '1') else 
        tmp_74_mid1_fu_2272_p2;
    tmp_75_fu_1609_p1 <= out2_dout(32 - 1 downto 0);
    tmp_76_fu_2180_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_105_reg_2840));
    tmp_77_fu_1666_p1 <= out3_dout(32 - 1 downto 0);
    tmp_80_fu_1723_p1 <= out4_dout(32 - 1 downto 0);
    tmp_86_fu_2301_p2 <= (tmp_92_fu_2293_p1 or c14_mid2_fu_2260_p3);
    tmp_87_fu_1778_p1 <= out5_dout(32 - 1 downto 0);
    tmp_87_mid2_v_fu_2285_p3 <= 
        ap_phi_mux_i_op_assign_12_phi_fu_1125_p4 when (tmp_90_fu_2255_p2(0) = '1') else 
        r_1_fu_2249_p2;
    tmp_88_fu_2307_p4 <= tmp_87_mid2_v_fu_2285_p3(31 downto 30);
    tmp_89_fu_2317_p3 <= (tmp_88_fu_2307_p4 & tmp_86_fu_2301_p2);
    tmp_90_fu_2255_p2 <= "1" when (unsigned(ap_phi_mux_c12_phi_fu_1136_p4) < unsigned(col_packets_fu_1416_p4)) else "0";
    tmp_91_fu_2331_p2 <= "1" when (c14_cast_mid2_cast_fu_2297_p1 = tmp_71_fu_1866_p2) else "0";
    tmp_92_fu_2293_p1 <= tmp_87_mid2_v_fu_2285_p3(30 - 1 downto 0);
    tmp_93_fu_2008_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_104_fu_2000_p3),32));
    tmp_94_fu_2012_p4 <= r_V_42_fu_1994_p2(55 downto 24);
    tmp_V_8_fu_1925_p1 <= p_Val2_101_fu_1903_p1(23 - 1 downto 0);
    tmp_V_fu_1915_p4 <= p_Val2_101_fu_1903_p1(30 downto 23);
    tmp_i_i_i_438_fu_1984_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_16_cast_fu_1978_p1),79));
        tmp_i_i_i_cast_fu_1953_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i_fu_1947_p2),9));

    tmp_i_i_i_fu_1947_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_1915_p4));
    tmp_i_i_i_i_cast4_fu_1929_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_1915_p4),9));
    tmp_s_fu_1380_p2 <= "1" when (p_rec1_reg_823 = ap_const_lv8_FE) else "0";
    ush_fu_1957_p3 <= 
        tmp_i_i_i_cast_fu_1953_p1 when (isNeg_fu_1939_p3(0) = '1') else 
        sh_assign_fu_1933_p2;

    xk1_M_imag_din_assign_proc : process(grp_InnerProd381_fu_1252_xk1_M_imag_din, grp_imag380_fu_1332_complex_float_M_imag_din, ap_CS_fsm_state43, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            xk1_M_imag_din <= grp_imag380_fu_1332_complex_float_M_imag_din;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            xk1_M_imag_din <= grp_InnerProd381_fu_1252_xk1_M_imag_din;
        else 
            xk1_M_imag_din <= grp_imag380_fu_1332_complex_float_M_imag_din;
        end if; 
    end process;

    xk1_M_imag_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    xk1_M_imag_read_assign_proc : process(ap_CS_fsm_state79, xk1_M_real_empty_n, exitcond16_fu_1756_p2, xk1_M_imag_empty_n, grp_InnerProd382_fu_1268_xk1_M_imag_read, ap_CS_fsm_state65)
    begin
        if ((not((((xk1_M_imag_empty_n = ap_const_logic_0) and (exitcond16_fu_1756_p2 = ap_const_lv1_0)) or ((xk1_M_real_empty_n = ap_const_logic_0) and (exitcond16_fu_1756_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state79) and (exitcond16_fu_1756_p2 = ap_const_lv1_0))) then 
            xk1_M_imag_read <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            xk1_M_imag_read <= grp_InnerProd382_fu_1268_xk1_M_imag_read;
        else 
            xk1_M_imag_read <= ap_const_logic_0;
        end if; 
    end process;


    xk1_M_imag_write_assign_proc : process(grp_InnerProd381_fu_1252_xk1_M_imag_write, grp_imag380_fu_1332_complex_float_M_imag_write, ap_CS_fsm_state43, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            xk1_M_imag_write <= grp_imag380_fu_1332_complex_float_M_imag_write;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            xk1_M_imag_write <= grp_InnerProd381_fu_1252_xk1_M_imag_write;
        else 
            xk1_M_imag_write <= ap_const_logic_0;
        end if; 
    end process;


    xk1_M_real_din_assign_proc : process(ap_CS_fsm_state42, grp_InnerProd381_fu_1252_xk1_M_real_din, grp_real379_fu_1320_complex_float_M_real_din, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            xk1_M_real_din <= grp_real379_fu_1320_complex_float_M_real_din;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            xk1_M_real_din <= grp_InnerProd381_fu_1252_xk1_M_real_din;
        else 
            xk1_M_real_din <= grp_real379_fu_1320_complex_float_M_real_din;
        end if; 
    end process;

    xk1_M_real_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    xk1_M_real_read_assign_proc : process(ap_CS_fsm_state79, xk1_M_real_empty_n, exitcond16_fu_1756_p2, xk1_M_imag_empty_n, grp_InnerProd382_fu_1268_xk1_M_real_read, ap_CS_fsm_state65)
    begin
        if ((not((((xk1_M_imag_empty_n = ap_const_logic_0) and (exitcond16_fu_1756_p2 = ap_const_lv1_0)) or ((xk1_M_real_empty_n = ap_const_logic_0) and (exitcond16_fu_1756_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state79) and (exitcond16_fu_1756_p2 = ap_const_lv1_0))) then 
            xk1_M_real_read <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            xk1_M_real_read <= grp_InnerProd382_fu_1268_xk1_M_real_read;
        else 
            xk1_M_real_read <= ap_const_logic_0;
        end if; 
    end process;


    xk1_M_real_write_assign_proc : process(ap_CS_fsm_state42, grp_InnerProd381_fu_1252_xk1_M_real_write, grp_real379_fu_1320_complex_float_M_real_write, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            xk1_M_real_write <= grp_real379_fu_1320_complex_float_M_real_write;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            xk1_M_real_write <= grp_InnerProd381_fu_1252_xk1_M_real_write;
        else 
            xk1_M_real_write <= ap_const_logic_0;
        end if; 
    end process;

    xk2_M_imag_din <= grp_imag380_fu_1332_complex_float_M_imag_din;
    xk2_M_imag_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    xk2_M_imag_read_assign_proc : process(ap_CS_fsm_state95, xk2_M_real_empty_n, exitcond20_fu_1892_p2, xk2_M_imag_empty_n)
    begin
        if ((not((((xk2_M_imag_empty_n = ap_const_logic_0) and (exitcond20_fu_1892_p2 = ap_const_lv1_0)) or ((xk2_M_real_empty_n = ap_const_logic_0) and (exitcond20_fu_1892_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state95) and (exitcond20_fu_1892_p2 = ap_const_lv1_0))) then 
            xk2_M_imag_read <= ap_const_logic_1;
        else 
            xk2_M_imag_read <= ap_const_logic_0;
        end if; 
    end process;


    xk2_M_imag_write_assign_proc : process(grp_imag380_fu_1332_complex_float_M_imag_write, ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            xk2_M_imag_write <= grp_imag380_fu_1332_complex_float_M_imag_write;
        else 
            xk2_M_imag_write <= ap_const_logic_0;
        end if; 
    end process;

    xk2_M_real_din <= grp_real379_fu_1320_complex_float_M_real_din;
    xk2_M_real_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    xk2_M_real_read_assign_proc : process(ap_CS_fsm_state95, xk2_M_real_empty_n, exitcond20_fu_1892_p2, xk2_M_imag_empty_n)
    begin
        if ((not((((xk2_M_imag_empty_n = ap_const_logic_0) and (exitcond20_fu_1892_p2 = ap_const_lv1_0)) or ((xk2_M_real_empty_n = ap_const_logic_0) and (exitcond20_fu_1892_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state95) and (exitcond20_fu_1892_p2 = ap_const_lv1_0))) then 
            xk2_M_real_read <= ap_const_logic_1;
        else 
            xk2_M_real_read <= ap_const_logic_0;
        end if; 
    end process;


    xk2_M_real_write_assign_proc : process(ap_CS_fsm_state92, grp_real379_fu_1320_complex_float_M_real_write)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            xk2_M_real_write <= grp_real379_fu_1320_complex_float_M_real_write;
        else 
            xk2_M_real_write <= ap_const_logic_0;
        end if; 
    end process;

    xn1_M_imag_din <= grp_imag380_fu_1332_complex_float_M_imag_din;
    xn1_M_imag_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    xn1_M_imag_read_assign_proc : process(ap_CS_fsm_state21, xn1_M_real_empty_n, exitcond10_fu_1529_p2, xn1_M_imag_empty_n)
    begin
        if ((not((((xn1_M_imag_empty_n = ap_const_logic_0) and (exitcond10_fu_1529_p2 = ap_const_lv1_0)) or ((xn1_M_real_empty_n = ap_const_logic_0) and (exitcond10_fu_1529_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond10_fu_1529_p2 = ap_const_lv1_0))) then 
            xn1_M_imag_read <= ap_const_logic_1;
        else 
            xn1_M_imag_read <= ap_const_logic_0;
        end if; 
    end process;


    xn1_M_imag_write_assign_proc : process(grp_imag380_fu_1332_complex_float_M_imag_write, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            xn1_M_imag_write <= grp_imag380_fu_1332_complex_float_M_imag_write;
        else 
            xn1_M_imag_write <= ap_const_logic_0;
        end if; 
    end process;

    xn1_M_real_din <= grp_real379_fu_1320_complex_float_M_real_din;
    xn1_M_real_fifo_U_ap_dummy_ce <= ap_const_logic_1;

    xn1_M_real_read_assign_proc : process(ap_CS_fsm_state21, xn1_M_real_empty_n, exitcond10_fu_1529_p2, xn1_M_imag_empty_n)
    begin
        if ((not((((xn1_M_imag_empty_n = ap_const_logic_0) and (exitcond10_fu_1529_p2 = ap_const_lv1_0)) or ((xn1_M_real_empty_n = ap_const_logic_0) and (exitcond10_fu_1529_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond10_fu_1529_p2 = ap_const_lv1_0))) then 
            xn1_M_real_read <= ap_const_logic_1;
        else 
            xn1_M_real_read <= ap_const_logic_0;
        end if; 
    end process;


    xn1_M_real_write_assign_proc : process(grp_real379_fu_1320_complex_float_M_real_write, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            xn1_M_real_write <= grp_real379_fu_1320_complex_float_M_real_write;
        else 
            xn1_M_real_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
