-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dummy_proc_middle_1394 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    st_in_data_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
    out_r_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_r_full_n : IN STD_LOGIC;
    out_r_write : OUT STD_LOGIC;
    xk1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    xk1_empty_n : IN STD_LOGIC;
    xk1_read : OUT STD_LOGIC );
end;


architecture behav of dummy_proc_middle_1394 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_r_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal xk1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_577 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_166_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_586 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal p_Val2_s_fu_172_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_591 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_91_reg_596 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_5_fu_196_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_5_reg_601 : STD_LOGIC_VECTOR (22 downto 0);
    signal notlhs_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_607 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_612 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_fu_224_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_617 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_fu_242_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_622 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_V_7_reg_628 : STD_LOGIC_VECTOR (22 downto 0);
    signal notlhs2_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_27_reg_639 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_1_fu_294_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_1_reg_644 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_1_fu_312_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_1_reg_649 : STD_LOGIC_VECTOR (8 downto 0);
    signal re_1_fu_320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal re_1_reg_655 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal im_1_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal im_1_reg_661 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_97_fu_428_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_97_reg_667 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp1_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_reg_672 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_99_fu_538_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_99_reg_677 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp4_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_reg_682 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_124_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_687 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_127_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_reg_692 : STD_LOGIC_VECTOR (31 downto 0);
    signal re_2_fu_550_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal re_2_reg_697 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal im_2_fu_556_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal im_2_reg_702 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_105 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ovflw_fu_150_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_186_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i_cast3_fu_214_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_218_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_i_i_fu_232_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_cast_fu_238_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_V_6_fu_250_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i9_cast1_fu_284_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_fu_288_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_i_i2_fu_302_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i2_cast_fu_308_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal notrhs_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_demorgan_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mantissa_V_fu_358_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_assign_11_cast_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_11_cast_ca_fu_374_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal mantissa_V_4_cast4_fu_367_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_i_i_i_72_fu_377_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_381_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_fu_393_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_39_fu_387_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_46_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_fu_405_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_96_fu_415_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs2_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_demorgan_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mantissa_V_1_fu_468_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_assign_14_cast_fu_481_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_14_cast_ca_fu_484_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal mantissa_V_6_cast2_fu_477_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_i_i_i2_73_fu_487_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_40_fu_491_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_57_fu_503_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_41_fu_497_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_50_fu_511_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_515_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_98_fu_525_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_3_fu_532_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond2_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_116_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_i_assign_toint_fu_565_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_assign_toint_fu_562_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component WienerDeblur_fsubbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WienerDeblur_sitocud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WienerDeblur_fcmpdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    WienerDeblur_fsubbkb_U13 : component WienerDeblur_fsubbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => re_1_reg_655,
        din1 => tmp_s_reg_687,
        ce => ap_const_logic_1,
        dout => grp_fu_116_p2);

    WienerDeblur_fsubbkb_U14 : component WienerDeblur_fsubbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => im_1_reg_661,
        din1 => tmp_51_reg_692,
        ce => ap_const_logic_1,
        dout => grp_fu_120_p2);

    WienerDeblur_sitocud_U15 : component WienerDeblur_sitocud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_Val2_97_reg_667,
        ce => ap_const_logic_1,
        dout => grp_fu_124_p1);

    WienerDeblur_sitocud_U16 : component WienerDeblur_sitocud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_Val2_99_reg_677,
        ce => ap_const_logic_1,
        dout => grp_fu_127_p1);

    WienerDeblur_fcmpdEe_U17 : component WienerDeblur_fcmpdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => re_1_fu_320_p1,
        din1 => ap_const_lv32_BF800000,
        opcode => ap_const_lv5_4,
        dout => tmp_34_fu_130_p2);

    WienerDeblur_fcmpdEe_U18 : component WienerDeblur_fcmpdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => re_1_fu_320_p1,
        din1 => ap_const_lv32_3F800000,
        opcode => ap_const_lv5_3,
        dout => tmp_39_fu_135_p2);

    WienerDeblur_fcmpdEe_U19 : component WienerDeblur_fcmpdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => im_1_fu_325_p1,
        din1 => ap_const_lv32_BF800000,
        opcode => ap_const_lv5_4,
        dout => tmp_44_fu_140_p2);

    WienerDeblur_fcmpdEe_U20 : component WienerDeblur_fcmpdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => im_1_fu_325_p1,
        din1 => ap_const_lv32_3F800000,
        opcode => ap_const_lv5_3,
        dout => tmp_48_fu_145_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((out_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i_reg_105 <= i_1_reg_586;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_105 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_fu_160_p2 = ap_const_lv1_0) and (xk1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_1_reg_586 <= i_1_fu_166_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                im_1_reg_661 <= im_1_fu_325_p1;
                p_Val2_97_reg_667 <= p_Val2_97_fu_428_p3;
                p_Val2_99_reg_677 <= p_Val2_99_fu_538_p3;
                re_1_reg_655 <= re_1_fu_320_p1;
                sel_tmp1_reg_672 <= sel_tmp1_fu_435_p2;
                sel_tmp4_reg_682 <= sel_tmp4_fu_545_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                im_2_reg_702 <= im_2_fu_556_p3;
                re_2_reg_697 <= re_2_fu_550_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_fu_160_p2 = ap_const_lv1_0) and (xk1_empty_n = ap_const_logic_0))) and (exitcond_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                isNeg_1_reg_644 <= sh_assign_3_fu_288_p2(8 downto 8);
                isNeg_reg_617 <= sh_assign_fu_218_p2(8 downto 8);
                notlhs2_reg_634 <= notlhs2_fu_270_p2;
                notlhs_reg_607 <= notlhs_fu_200_p2;
                p_Result_27_reg_639 <= xk1_dout(63 downto 63);
                p_Result_s_reg_612 <= xk1_dout(31 downto 31);
                p_Val2_91_reg_596 <= xk1_dout(63 downto 32);
                p_Val2_s_reg_591 <= p_Val2_s_fu_172_p1;
                tmp_V_5_reg_601 <= tmp_V_5_fu_196_p1;
                tmp_V_7_reg_628 <= xk1_dout(54 downto 32);
                ush_1_reg_649 <= ush_1_fu_312_p3;
                ush_reg_622 <= ush_fu_242_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                sel_tmp_reg_577 <= sel_tmp_fu_154_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp4_reg_682 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                tmp_51_reg_692 <= grp_fu_127_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp1_reg_672 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                tmp_s_reg_687 <= grp_fu_124_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, out_r_full_n, xk1_empty_n, ap_CS_fsm_state15, ap_CS_fsm_state2, exitcond_fu_160_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((exitcond_fu_160_p2 = ap_const_lv1_0) and (xk1_empty_n = ap_const_logic_0))) and (exitcond_fu_160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((exitcond_fu_160_p2 = ap_const_lv1_0) and (xk1_empty_n = ap_const_logic_0))) and (exitcond_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((out_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state2_assign_proc : process(xk1_empty_n, exitcond_fu_160_p2)
    begin
                ap_block_state2 <= ((exitcond_fu_160_p2 = ap_const_lv1_0) and (xk1_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, xk1_empty_n, ap_CS_fsm_state2, exitcond_fu_160_p2)
    begin
        if (((not(((exitcond_fu_160_p2 = ap_const_lv1_0) and (xk1_empty_n = ap_const_logic_0))) and (exitcond_fu_160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(xk1_empty_n, ap_CS_fsm_state2, exitcond_fu_160_p2)
    begin
        if ((not(((exitcond_fu_160_p2 = ap_const_lv1_0) and (xk1_empty_n = ap_const_logic_0))) and (exitcond_fu_160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_160_p2 <= "1" when (i_reg_105 = ap_const_lv9_100) else "0";
    i_1_fu_166_p2 <= std_logic_vector(unsigned(i_reg_105) + unsigned(ap_const_lv9_1));
    im_1_fu_325_p1 <= p_Val2_91_reg_596;
    im_2_fu_556_p3 <= 
        im_1_reg_661 when (sel_tmp4_reg_682(0) = '1') else 
        grp_fu_120_p2;
    isNeg_1_fu_294_p3 <= sh_assign_3_fu_288_p2(8 downto 8);
    isNeg_fu_224_p3 <= sh_assign_fu_218_p2(8 downto 8);
    mantissa_V_1_fu_468_p4 <= ((ap_const_lv1_1 & tmp_V_7_reg_628) & ap_const_lv1_0);
    mantissa_V_4_cast4_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_358_p4),79));
    mantissa_V_6_cast2_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_1_fu_468_p4),79));
    mantissa_V_fu_358_p4 <= ((ap_const_lv1_1 & tmp_V_5_reg_601) & ap_const_lv1_0);
    notlhs2_fu_270_p2 <= "0" when (tmp_V_6_fu_250_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_200_p2 <= "0" when (tmp_V_fu_186_p4 = ap_const_lv8_FF) else "1";
    notrhs2_fu_440_p2 <= "1" when (tmp_V_7_reg_628 = ap_const_lv23_0) else "0";
    notrhs_fu_330_p2 <= "1" when (tmp_V_5_reg_601 = ap_const_lv23_0) else "0";
    or_cond2_demorgan_fu_456_p2 <= (tmp_49_fu_450_p2 and tmp_43_fu_445_p2);
    or_cond2_fu_462_p2 <= (or_cond2_demorgan_fu_456_p2 xor ap_const_lv1_1);
    or_cond_demorgan_fu_346_p2 <= (tmp_45_fu_340_p2 and tmp_33_fu_335_p2);
    or_cond_fu_352_p2 <= (or_cond_demorgan_fu_346_p2 xor ap_const_lv1_1);

    out_r_blk_n_assign_proc : process(out_r_full_n, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_r_blk_n <= out_r_full_n;
        else 
            out_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_din <= (p_i_assign_toint_fu_565_p1 & p_r_assign_toint_fu_562_p1);

    out_r_write_assign_proc : process(out_r_full_n, ap_CS_fsm_state15)
    begin
        if (((out_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            out_r_write <= ap_const_logic_1;
        else 
            out_r_write <= ap_const_logic_0;
        end if; 
    end process;

    ovflw_fu_150_p1 <= st_in_data_V_read(1 - 1 downto 0);
    p_Val2_96_fu_415_p3 <= 
        tmp_46_fu_401_p1 when (isNeg_reg_617(0) = '1') else 
        tmp_47_fu_405_p4;
    p_Val2_97_fu_428_p3 <= 
        result_V_1_fu_422_p2 when (p_Result_s_reg_612(0) = '1') else 
        p_Val2_96_fu_415_p3;
    p_Val2_98_fu_525_p3 <= 
        tmp_50_fu_511_p1 when (isNeg_1_reg_644(0) = '1') else 
        tmp_52_fu_515_p4;
    p_Val2_99_fu_538_p3 <= 
        result_V_3_fu_532_p2 when (p_Result_27_reg_639(0) = '1') else 
        p_Val2_98_fu_525_p3;
    p_Val2_s_fu_172_p1 <= xk1_dout(32 - 1 downto 0);
    p_i_assign_toint_fu_565_p1 <= im_2_reg_702;
    p_r_assign_toint_fu_562_p1 <= re_2_reg_697;
    r_V_39_fu_387_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_4_cast4_fu_367_p1),to_integer(unsigned('0' & tmp_i_i_i_72_fu_377_p1(31-1 downto 0)))));
    r_V_40_fu_491_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_1_fu_468_p4),to_integer(unsigned('0' & sh_assign_14_cast_ca_fu_484_p1(25-1 downto 0)))));
    r_V_41_fu_497_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_6_cast2_fu_477_p1),to_integer(unsigned('0' & tmp_i_i_i2_73_fu_487_p1(31-1 downto 0)))));
    r_V_fu_381_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_358_p4),to_integer(unsigned('0' & sh_assign_11_cast_ca_fu_374_p1(25-1 downto 0)))));
    re_1_fu_320_p1 <= p_Val2_s_reg_591;
    re_2_fu_550_p3 <= 
        re_1_reg_655 when (sel_tmp1_reg_672(0) = '1') else 
        grp_fu_116_p2;
    result_V_1_fu_422_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_96_fu_415_p3));
    result_V_3_fu_532_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_98_fu_525_p3));
    sel_tmp1_fu_435_p2 <= (sel_tmp_reg_577 or or_cond_fu_352_p2);
    sel_tmp4_fu_545_p2 <= (sel_tmp_reg_577 or or_cond2_fu_462_p2);
    sel_tmp_fu_154_p2 <= (ovflw_fu_150_p1 xor ap_const_lv1_1);
        sh_assign_11_cast_ca_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_622),25));

        sh_assign_11_cast_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_622),32));

        sh_assign_14_cast_ca_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_reg_649),25));

        sh_assign_14_cast_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_reg_649),32));

    sh_assign_3_fu_288_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i9_cast1_fu_284_p1));
    sh_assign_fu_218_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast3_fu_214_p1));
    tmp_33_fu_335_p2 <= (notrhs_fu_330_p2 or notlhs_reg_607);
    tmp_43_fu_445_p2 <= (notrhs2_fu_440_p2 or notlhs2_reg_634);
    tmp_45_fu_340_p2 <= (tmp_39_fu_135_p2 or tmp_34_fu_130_p2);
    tmp_46_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_393_p3),32));
    tmp_47_fu_405_p4 <= r_V_39_fu_387_p2(55 downto 24);
    tmp_49_fu_450_p2 <= (tmp_48_fu_145_p2 or tmp_44_fu_140_p2);
    tmp_50_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_503_p3),32));
    tmp_52_fu_515_p4 <= r_V_41_fu_497_p2(55 downto 24);
    tmp_57_fu_503_p3 <= r_V_40_fu_491_p2(24 downto 24);
    tmp_V_5_fu_196_p1 <= xk1_dout(23 - 1 downto 0);
    tmp_V_6_fu_250_p4 <= xk1_dout(62 downto 55);
    tmp_V_fu_186_p4 <= xk1_dout(30 downto 23);
    tmp_fu_393_p3 <= r_V_fu_381_p2(24 downto 24);
    tmp_i_i_i2_73_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_14_cast_fu_481_p1),79));
        tmp_i_i_i2_cast_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i2_fu_302_p2),9));

    tmp_i_i_i2_fu_302_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_6_fu_250_p4));
    tmp_i_i_i_72_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_11_cast_fu_371_p1),79));
        tmp_i_i_i_cast_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i_fu_232_p2),9));

    tmp_i_i_i_fu_232_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_186_p4));
    tmp_i_i_i_i9_cast1_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_6_fu_250_p4),9));
    tmp_i_i_i_i_cast3_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_186_p4),9));
    ush_1_fu_312_p3 <= 
        tmp_i_i_i2_cast_fu_308_p1 when (isNeg_1_fu_294_p3(0) = '1') else 
        sh_assign_3_fu_288_p2;
    ush_fu_242_p3 <= 
        tmp_i_i_i_cast_fu_238_p1 when (isNeg_fu_224_p3(0) = '1') else 
        sh_assign_fu_218_p2;

    xk1_blk_n_assign_proc : process(xk1_empty_n, ap_CS_fsm_state2, exitcond_fu_160_p2)
    begin
        if (((exitcond_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            xk1_blk_n <= xk1_empty_n;
        else 
            xk1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    xk1_read_assign_proc : process(xk1_empty_n, ap_CS_fsm_state2, exitcond_fu_160_p2)
    begin
        if ((not(((exitcond_fu_160_p2 = ap_const_lv1_0) and (xk1_empty_n = ap_const_logic_0))) and (exitcond_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            xk1_read <= ap_const_logic_1;
        else 
            xk1_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
