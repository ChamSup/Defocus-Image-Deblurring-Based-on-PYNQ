-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity operator_float_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fft_kernel_modu_M_r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    fft_kernel_modu_M_r_empty_n : IN STD_LOGIC;
    fft_kernel_modu_M_r_read : OUT STD_LOGIC;
    fft_kernel_modu_M_i_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    fft_kernel_modu_M_i_empty_n : IN STD_LOGIC;
    fft_kernel_modu_M_i_read : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fft_kernel_modu_M_r_blk_n : OUT STD_LOGIC;
    fft_kernel_modu_M_i_blk_n : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC );
end;


architecture behav of operator_float_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_operator_mul_assign_float_fu_30_p_z_M_real_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_operator_mul_assign_float_fu_30_p_z_M_imag_blk_n : STD_LOGIC;
    signal p_r_M_real_reg_40 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_r_M_imag_reg_45 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_assign_float_fu_30_ap_start : STD_LOGIC;
    signal grp_operator_mul_assign_float_fu_30_ap_done : STD_LOGIC;
    signal grp_operator_mul_assign_float_fu_30_ap_idle : STD_LOGIC;
    signal grp_operator_mul_assign_float_fu_30_ap_ready : STD_LOGIC;
    signal grp_operator_mul_assign_float_fu_30_p_z_M_real_read : STD_LOGIC;
    signal grp_operator_mul_assign_float_fu_30_p_z_M_imag_read : STD_LOGIC;
    signal grp_operator_mul_assign_float_fu_30_ap_ce : STD_LOGIC;
    signal grp_operator_mul_assign_float_fu_30_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_assign_float_fu_30_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_operator_mul_assign_float_fu_30_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm_state2 : STD_LOGIC;

    component operator_mul_assign_float IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_z_M_real_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_z_M_real_empty_n : IN STD_LOGIC;
        p_z_M_real_read : OUT STD_LOGIC;
        p_z_M_imag_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_z_M_imag_empty_n : IN STD_LOGIC;
        p_z_M_imag_read : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        complex_float_M_real_read : IN STD_LOGIC_VECTOR (31 downto 0);
        complex_float_M_imag_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_z_M_real_blk_n : OUT STD_LOGIC;
        p_z_M_imag_blk_n : OUT STD_LOGIC );
    end component;



begin
    grp_operator_mul_assign_float_fu_30 : component operator_mul_assign_float
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_operator_mul_assign_float_fu_30_ap_start,
        ap_done => grp_operator_mul_assign_float_fu_30_ap_done,
        ap_idle => grp_operator_mul_assign_float_fu_30_ap_idle,
        ap_ready => grp_operator_mul_assign_float_fu_30_ap_ready,
        p_z_M_real_dout => fft_kernel_modu_M_r_dout,
        p_z_M_real_empty_n => fft_kernel_modu_M_r_empty_n,
        p_z_M_real_read => grp_operator_mul_assign_float_fu_30_p_z_M_real_read,
        p_z_M_imag_dout => fft_kernel_modu_M_i_dout,
        p_z_M_imag_empty_n => fft_kernel_modu_M_i_empty_n,
        p_z_M_imag_read => grp_operator_mul_assign_float_fu_30_p_z_M_imag_read,
        ap_ce => grp_operator_mul_assign_float_fu_30_ap_ce,
        complex_float_M_real_read => p_r_M_real_reg_40,
        complex_float_M_imag_read => p_r_M_imag_reg_45,
        ap_return_0 => grp_operator_mul_assign_float_fu_30_ap_return_0,
        ap_return_1 => grp_operator_mul_assign_float_fu_30_ap_return_1,
        p_z_M_real_blk_n => grp_operator_mul_assign_float_fu_30_p_z_M_real_blk_n,
        p_z_M_imag_blk_n => grp_operator_mul_assign_float_fu_30_p_z_M_imag_blk_n);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_operator_mul_assign_float_fu_30_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_operator_mul_assign_float_fu_30_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_NS_fsm_state2))) then 
                    grp_operator_mul_assign_float_fu_30_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_operator_mul_assign_float_fu_30_ap_ready = ap_const_logic_1)) then 
                    grp_operator_mul_assign_float_fu_30_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((fft_kernel_modu_M_i_empty_n = ap_const_logic_0) or (fft_kernel_modu_M_r_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_r_M_imag_reg_45 <= fft_kernel_modu_M_i_dout;
                p_r_M_real_reg_40 <= fft_kernel_modu_M_r_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, fft_kernel_modu_M_r_empty_n, fft_kernel_modu_M_i_empty_n, grp_operator_mul_assign_float_fu_30_p_z_M_real_blk_n, ap_CS_fsm_state2, grp_operator_mul_assign_float_fu_30_p_z_M_imag_blk_n, ap_ce, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((fft_kernel_modu_M_i_empty_n = ap_const_logic_0) or (fft_kernel_modu_M_r_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((grp_operator_mul_assign_float_fu_30_p_z_M_imag_blk_n = ap_const_logic_0) or (grp_operator_mul_assign_float_fu_30_p_z_M_real_blk_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state2 <= ap_NS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, fft_kernel_modu_M_r_empty_n, fft_kernel_modu_M_i_empty_n)
    begin
                ap_block_state1 <= ((fft_kernel_modu_M_i_empty_n = ap_const_logic_0) or (fft_kernel_modu_M_r_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(grp_operator_mul_assign_float_fu_30_p_z_M_real_blk_n, grp_operator_mul_assign_float_fu_30_p_z_M_imag_blk_n)
    begin
                ap_block_state2 <= ((grp_operator_mul_assign_float_fu_30_p_z_M_imag_blk_n = ap_const_logic_0) or (grp_operator_mul_assign_float_fu_30_p_z_M_real_blk_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state11)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= grp_operator_mul_assign_float_fu_30_ap_return_0;
    ap_return_1 <= grp_operator_mul_assign_float_fu_30_ap_return_1;

    fft_kernel_modu_M_i_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, fft_kernel_modu_M_i_empty_n, ap_CS_fsm_state2, grp_operator_mul_assign_float_fu_30_p_z_M_imag_blk_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fft_kernel_modu_M_i_blk_n <= grp_operator_mul_assign_float_fu_30_p_z_M_imag_blk_n;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            fft_kernel_modu_M_i_blk_n <= fft_kernel_modu_M_i_empty_n;
        else 
            fft_kernel_modu_M_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fft_kernel_modu_M_i_read_assign_proc : process(ap_start, ap_CS_fsm_state1, fft_kernel_modu_M_r_empty_n, fft_kernel_modu_M_i_empty_n, ap_CS_fsm_state2, ap_ce, grp_operator_mul_assign_float_fu_30_p_z_M_imag_read)
    begin
        if ((not(((fft_kernel_modu_M_i_empty_n = ap_const_logic_0) or (fft_kernel_modu_M_r_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fft_kernel_modu_M_i_read <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fft_kernel_modu_M_i_read <= grp_operator_mul_assign_float_fu_30_p_z_M_imag_read;
        else 
            fft_kernel_modu_M_i_read <= ap_const_logic_0;
        end if; 
    end process;


    fft_kernel_modu_M_r_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, fft_kernel_modu_M_r_empty_n, grp_operator_mul_assign_float_fu_30_p_z_M_real_blk_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fft_kernel_modu_M_r_blk_n <= grp_operator_mul_assign_float_fu_30_p_z_M_real_blk_n;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            fft_kernel_modu_M_r_blk_n <= fft_kernel_modu_M_r_empty_n;
        else 
            fft_kernel_modu_M_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fft_kernel_modu_M_r_read_assign_proc : process(ap_start, ap_CS_fsm_state1, fft_kernel_modu_M_r_empty_n, fft_kernel_modu_M_i_empty_n, ap_CS_fsm_state2, ap_ce, grp_operator_mul_assign_float_fu_30_p_z_M_real_read)
    begin
        if ((not(((fft_kernel_modu_M_i_empty_n = ap_const_logic_0) or (fft_kernel_modu_M_r_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fft_kernel_modu_M_r_read <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fft_kernel_modu_M_r_read <= grp_operator_mul_assign_float_fu_30_p_z_M_real_read;
        else 
            fft_kernel_modu_M_r_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_operator_mul_assign_float_fu_30_ap_ce_assign_proc : process(ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_const_logic_0 = ap_ce) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_operator_mul_assign_float_fu_30_ap_ce <= ap_const_logic_0;
        else 
            grp_operator_mul_assign_float_fu_30_ap_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_operator_mul_assign_float_fu_30_ap_start <= grp_operator_mul_assign_float_fu_30_ap_start_reg;
end behav;
