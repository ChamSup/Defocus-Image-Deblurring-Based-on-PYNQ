// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module operator_float_397 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xk1_M_real_dout,
        xk1_M_real_empty_n,
        xk1_M_real_read,
        xk1_M_imag_dout,
        xk1_M_imag_empty_n,
        xk1_M_imag_read,
        ap_ce,
        fft_kernel_M_real_dout,
        fft_kernel_M_real_empty_n,
        fft_kernel_M_real_read,
        fft_kernel_M_imag_dout,
        fft_kernel_M_imag_empty_n,
        fft_kernel_M_imag_read,
        ap_return_0,
        ap_return_1,
        xk1_M_real_blk_n,
        xk1_M_imag_blk_n,
        fft_kernel_M_real_blk_n,
        fft_kernel_M_imag_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] xk1_M_real_dout;
input   xk1_M_real_empty_n;
output   xk1_M_real_read;
input  [31:0] xk1_M_imag_dout;
input   xk1_M_imag_empty_n;
output   xk1_M_imag_read;
input   ap_ce;
input  [31:0] fft_kernel_M_real_dout;
input   fft_kernel_M_real_empty_n;
output   fft_kernel_M_real_read;
input  [31:0] fft_kernel_M_imag_dout;
input   fft_kernel_M_imag_empty_n;
output   fft_kernel_M_imag_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output   xk1_M_real_blk_n;
output   xk1_M_imag_blk_n;
output   fft_kernel_M_real_blk_n;
output   fft_kernel_M_imag_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg xk1_M_real_read;
reg xk1_M_imag_read;
reg fft_kernel_M_real_read;
reg fft_kernel_M_imag_read;
reg xk1_M_real_blk_n;
reg xk1_M_imag_blk_n;
reg fft_kernel_M_real_blk_n;
reg fft_kernel_M_imag_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    grp_operator_float_398_fu_34_fft_kernel_M_real_blk_n;
wire    grp_operator_float_398_fu_34_fft_kernel_M_imag_blk_n;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage0_subdone;
reg    grp_operator_float_398_fu_34_ap_start;
wire    grp_operator_float_398_fu_34_ap_done;
wire    grp_operator_float_398_fu_34_ap_idle;
wire    grp_operator_float_398_fu_34_ap_ready;
wire    grp_operator_float_398_fu_34_fft_kernel_M_real_read;
wire    grp_operator_float_398_fu_34_fft_kernel_M_imag_read;
reg    grp_operator_float_398_fu_34_ap_ce;
wire   [31:0] grp_operator_float_398_fu_34_ap_return_0;
wire   [31:0] grp_operator_float_398_fu_34_ap_return_1;
reg    ap_block_state1_pp0_stage0_iter0_ignore_call4;
wire    ap_block_state2_pp0_stage0_iter1_ignore_call4;
wire    ap_block_state3_pp0_stage0_iter2_ignore_call4;
wire    ap_block_state4_pp0_stage0_iter3_ignore_call4;
wire    ap_block_state5_pp0_stage0_iter4_ignore_call4;
wire    ap_block_state6_pp0_stage0_iter5_ignore_call4;
wire    ap_block_state7_pp0_stage0_iter6_ignore_call4;
wire    ap_block_state8_pp0_stage0_iter7_ignore_call4;
wire    ap_block_state9_pp0_stage0_iter8_ignore_call4;
wire    ap_block_state10_pp0_stage0_iter9_ignore_call4;
reg    ap_block_pp0_stage0_11001_ignoreCallOp13;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to8;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
end

operator_float_398 grp_operator_float_398_fu_34(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_operator_float_398_fu_34_ap_start),
    .ap_done(grp_operator_float_398_fu_34_ap_done),
    .ap_idle(grp_operator_float_398_fu_34_ap_idle),
    .ap_ready(grp_operator_float_398_fu_34_ap_ready),
    .fft_kernel_M_real_dout(fft_kernel_M_real_dout),
    .fft_kernel_M_real_empty_n(fft_kernel_M_real_empty_n),
    .fft_kernel_M_real_read(grp_operator_float_398_fu_34_fft_kernel_M_real_read),
    .fft_kernel_M_imag_dout(fft_kernel_M_imag_dout),
    .fft_kernel_M_imag_empty_n(fft_kernel_M_imag_empty_n),
    .fft_kernel_M_imag_read(grp_operator_float_398_fu_34_fft_kernel_M_imag_read),
    .ap_ce(grp_operator_float_398_fu_34_ap_ce),
    .complex_float_M_real_read(xk1_M_real_dout),
    .complex_float_M_imag_read(xk1_M_imag_dout),
    .ap_return_0(grp_operator_float_398_fu_34_ap_return_0),
    .ap_return_1(grp_operator_float_398_fu_34_ap_return_1),
    .fft_kernel_M_real_blk_n(grp_operator_float_398_fu_34_fft_kernel_M_real_blk_n),
    .fft_kernel_M_imag_blk_n(grp_operator_float_398_fu_34_fft_kernel_M_imag_blk_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to8 = 1'b1;
    end else begin
        ap_idle_pp0_0to8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to8 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fft_kernel_M_imag_blk_n = grp_operator_float_398_fu_34_fft_kernel_M_imag_blk_n;
    end else begin
        fft_kernel_M_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fft_kernel_M_imag_read = grp_operator_float_398_fu_34_fft_kernel_M_imag_read;
    end else begin
        fft_kernel_M_imag_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fft_kernel_M_real_blk_n = grp_operator_float_398_fu_34_fft_kernel_M_real_blk_n;
    end else begin
        fft_kernel_M_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fft_kernel_M_real_read = grp_operator_float_398_fu_34_fft_kernel_M_real_read;
    end else begin
        fft_kernel_M_real_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp13))) begin
        grp_operator_float_398_fu_34_ap_ce = 1'b1;
    end else begin
        grp_operator_float_398_fu_34_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_operator_float_398_fu_34_ap_start = 1'b1;
    end else begin
        grp_operator_float_398_fu_34_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xk1_M_imag_blk_n = xk1_M_imag_empty_n;
    end else begin
        xk1_M_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xk1_M_imag_read = 1'b1;
    end else begin
        xk1_M_imag_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xk1_M_real_blk_n = xk1_M_real_empty_n;
    end else begin
        xk1_M_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xk1_M_real_read = 1'b1;
    end else begin
        xk1_M_real_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b1) & ((grp_operator_float_398_fu_34_fft_kernel_M_imag_blk_n == 1'b0) | (grp_operator_float_398_fu_34_fft_kernel_M_real_blk_n == 1'b0) | (xk1_M_imag_empty_n == 1'b0) | (xk1_M_real_empty_n == 1'b0) | (ap_start == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp13 = ((ap_start == 1'b1) & ((xk1_M_imag_empty_n == 1'b0) | (xk1_M_real_empty_n == 1'b0) | (ap_start == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b1) & ((grp_operator_float_398_fu_34_fft_kernel_M_imag_blk_n == 1'b0) | (grp_operator_float_398_fu_34_fft_kernel_M_real_blk_n == 1'b0) | (xk1_M_imag_empty_n == 1'b0) | (xk1_M_real_empty_n == 1'b0) | (ap_start == 1'b0))));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9_ignore_call4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((grp_operator_float_398_fu_34_fft_kernel_M_imag_blk_n == 1'b0) | (grp_operator_float_398_fu_34_fft_kernel_M_real_blk_n == 1'b0) | (xk1_M_imag_empty_n == 1'b0) | (xk1_M_real_empty_n == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0_ignore_call4 = ((xk1_M_imag_empty_n == 1'b0) | (xk1_M_real_empty_n == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1_ignore_call4 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2_ignore_call4 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3_ignore_call4 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4_ignore_call4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5_ignore_call4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6_ignore_call4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7_ignore_call4 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8_ignore_call4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = grp_operator_float_398_fu_34_ap_return_0;

assign ap_return_1 = grp_operator_float_398_fu_34_ap_return_1;

endmodule //operator_float_397
