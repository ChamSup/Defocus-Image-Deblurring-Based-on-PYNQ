// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module matrix_plus_SNR (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fft_kernel_modu2_M_s_dout,
        fft_kernel_modu2_M_s_empty_n,
        fft_kernel_modu2_M_s_read,
        G1_M_real_din,
        G1_M_real_full_n,
        G1_M_real_write,
        fft_kernel_modu2_M_1_dout,
        fft_kernel_modu2_M_1_empty_n,
        fft_kernel_modu2_M_1_read,
        G1_M_imag_din,
        G1_M_imag_full_n,
        G1_M_imag_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] fft_kernel_modu2_M_s_dout;
input   fft_kernel_modu2_M_s_empty_n;
output   fft_kernel_modu2_M_s_read;
output  [31:0] G1_M_real_din;
input   G1_M_real_full_n;
output   G1_M_real_write;
input  [31:0] fft_kernel_modu2_M_1_dout;
input   fft_kernel_modu2_M_1_empty_n;
output   fft_kernel_modu2_M_1_read;
output  [31:0] G1_M_imag_din;
input   G1_M_imag_full_n;
output   G1_M_imag_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fft_kernel_modu2_M_s_read;
reg G1_M_real_write;
reg fft_kernel_modu2_M_1_read;
reg G1_M_imag_write;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fft_kernel_modu2_M_s_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_102_p2;
wire    StgValue_33_real379_fu_77_complex_float_M_real_blk_n;
reg    G1_M_real_blk_n;
wire    ap_CS_fsm_state8;
reg    fft_kernel_modu2_M_1_blk_n;
wire    StgValue_28_imag380_fu_70_complex_float_M_imag_blk_n;
reg    G1_M_imag_blk_n;
wire    ap_CS_fsm_state4;
wire   [8:0] r_1_fu_96_p2;
reg   [8:0] r_1_reg_117;
wire    ap_CS_fsm_state2;
wire   [8:0] c_1_fu_108_p2;
reg   [8:0] c_1_reg_125;
reg    ap_block_state3;
reg   [31:0] fft_kernel_modu2_M_2_reg_130;
reg   [31:0] fft_kernel_modu2_M_3_reg_135;
reg    StgValue_28_imag380_fu_70_ap_start;
wire    StgValue_28_imag380_fu_70_ap_done;
wire    StgValue_28_imag380_fu_70_ap_idle;
wire    StgValue_28_imag380_fu_70_ap_ready;
wire   [31:0] StgValue_28_imag380_fu_70_complex_float_M_imag_din;
wire    StgValue_28_imag380_fu_70_complex_float_M_imag_write;
reg    StgValue_33_real379_fu_77_ap_start;
wire    StgValue_33_real379_fu_77_ap_done;
wire    StgValue_33_real379_fu_77_ap_idle;
wire    StgValue_33_real379_fu_77_ap_ready;
wire   [31:0] StgValue_33_real379_fu_77_complex_float_M_real_din;
wire    StgValue_33_real379_fu_77_complex_float_M_real_write;
reg   [8:0] r_reg_48;
reg   [8:0] c_reg_59;
wire   [0:0] exitcond1_fu_90_p2;
wire   [31:0] grp_fu_84_p2;
reg    grp_fu_84_ce;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

imag380 StgValue_28_imag380_fu_70(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(StgValue_28_imag380_fu_70_ap_start),
    .ap_done(StgValue_28_imag380_fu_70_ap_done),
    .ap_idle(StgValue_28_imag380_fu_70_ap_idle),
    .ap_ready(StgValue_28_imag380_fu_70_ap_ready),
    .complex_float_M_imag_din(StgValue_28_imag380_fu_70_complex_float_M_imag_din),
    .complex_float_M_imag_full_n(G1_M_imag_full_n),
    .complex_float_M_imag_write(StgValue_28_imag380_fu_70_complex_float_M_imag_write),
    .p_val(fft_kernel_modu2_M_3_reg_135),
    .complex_float_M_imag_blk_n(StgValue_28_imag380_fu_70_complex_float_M_imag_blk_n)
);

real379 StgValue_33_real379_fu_77(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(StgValue_33_real379_fu_77_ap_start),
    .ap_done(StgValue_33_real379_fu_77_ap_done),
    .ap_idle(StgValue_33_real379_fu_77_ap_idle),
    .ap_ready(StgValue_33_real379_fu_77_ap_ready),
    .complex_float_M_real_din(StgValue_33_real379_fu_77_complex_float_M_real_din),
    .complex_float_M_real_full_n(G1_M_real_full_n),
    .complex_float_M_real_write(StgValue_33_real379_fu_77_complex_float_M_real_write),
    .p_val(grp_fu_84_p2),
    .complex_float_M_real_blk_n(StgValue_33_real379_fu_77_complex_float_M_real_blk_n)
);

WienerDeblur_faddibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
WienerDeblur_faddibs_U136(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(fft_kernel_modu2_M_2_reg_130),
    .din1(32'd0),
    .ce(grp_fu_84_ce),
    .dout(grp_fu_84_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_90_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_reg_59 <= 9'd0;
    end else if (((1'b1 == StgValue_33_real379_fu_77_complex_float_M_real_blk_n) & (1'b1 == ap_CS_fsm_state8))) begin
        c_reg_59 <= c_1_reg_125;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond_fu_102_p2 == 1'd0) & (fft_kernel_modu2_M_1_empty_n == 1'b0)) | ((exitcond_fu_102_p2 == 1'd0) & (fft_kernel_modu2_M_s_empty_n == 1'b0))) & (exitcond_fu_102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_reg_48 <= r_1_reg_117;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_reg_48 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond_fu_102_p2 == 1'd0) & (fft_kernel_modu2_M_1_empty_n == 1'b0)) | ((exitcond_fu_102_p2 == 1'd0) & (fft_kernel_modu2_M_s_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state3))) begin
        c_1_reg_125 <= c_1_fu_108_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond_fu_102_p2 == 1'd0) & (fft_kernel_modu2_M_1_empty_n == 1'b0)) | ((exitcond_fu_102_p2 == 1'd0) & (fft_kernel_modu2_M_s_empty_n == 1'b0))) & (exitcond_fu_102_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        fft_kernel_modu2_M_2_reg_130 <= fft_kernel_modu2_M_s_dout;
        fft_kernel_modu2_M_3_reg_135 <= fft_kernel_modu2_M_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_1_reg_117 <= r_1_fu_96_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        G1_M_imag_blk_n = StgValue_28_imag380_fu_70_complex_float_M_imag_blk_n;
    end else begin
        G1_M_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        G1_M_imag_write = StgValue_28_imag380_fu_70_complex_float_M_imag_write;
    end else begin
        G1_M_imag_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        G1_M_real_blk_n = StgValue_33_real379_fu_77_complex_float_M_real_blk_n;
    end else begin
        G1_M_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        G1_M_real_write = StgValue_33_real379_fu_77_complex_float_M_real_write;
    end else begin
        G1_M_real_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        StgValue_28_imag380_fu_70_ap_start = 1'b1;
    end else begin
        StgValue_28_imag380_fu_70_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        StgValue_33_real379_fu_77_ap_start = 1'b1;
    end else begin
        StgValue_33_real379_fu_77_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_90_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_90_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_102_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        fft_kernel_modu2_M_1_blk_n = fft_kernel_modu2_M_1_empty_n;
    end else begin
        fft_kernel_modu2_M_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_102_p2 == 1'd0) & (fft_kernel_modu2_M_1_empty_n == 1'b0)) | ((exitcond_fu_102_p2 == 1'd0) & (fft_kernel_modu2_M_s_empty_n == 1'b0))) & (exitcond_fu_102_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        fft_kernel_modu2_M_1_read = 1'b1;
    end else begin
        fft_kernel_modu2_M_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_102_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        fft_kernel_modu2_M_s_blk_n = fft_kernel_modu2_M_s_empty_n;
    end else begin
        fft_kernel_modu2_M_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_102_p2 == 1'd0) & (fft_kernel_modu2_M_1_empty_n == 1'b0)) | ((exitcond_fu_102_p2 == 1'd0) & (fft_kernel_modu2_M_s_empty_n == 1'b0))) & (exitcond_fu_102_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        fft_kernel_modu2_M_s_read = 1'b1;
    end else begin
        fft_kernel_modu2_M_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == StgValue_28_imag380_fu_70_complex_float_M_imag_blk_n) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == StgValue_33_real379_fu_77_complex_float_M_real_blk_n) & (1'b1 == ap_CS_fsm_state8)))) begin
        grp_fu_84_ce = 1'b1;
    end else begin
        grp_fu_84_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_90_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~(((exitcond_fu_102_p2 == 1'd0) & (fft_kernel_modu2_M_1_empty_n == 1'b0)) | ((exitcond_fu_102_p2 == 1'd0) & (fft_kernel_modu2_M_s_empty_n == 1'b0))) & (exitcond_fu_102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(((exitcond_fu_102_p2 == 1'd0) & (fft_kernel_modu2_M_1_empty_n == 1'b0)) | ((exitcond_fu_102_p2 == 1'd0) & (fft_kernel_modu2_M_s_empty_n == 1'b0))) & (exitcond_fu_102_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == StgValue_28_imag380_fu_70_complex_float_M_imag_blk_n) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == StgValue_33_real379_fu_77_complex_float_M_real_blk_n) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign G1_M_imag_din = StgValue_28_imag380_fu_70_complex_float_M_imag_din;

assign G1_M_real_din = StgValue_33_real379_fu_77_complex_float_M_real_din;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state3 = (((exitcond_fu_102_p2 == 1'd0) & (fft_kernel_modu2_M_1_empty_n == 1'b0)) | ((exitcond_fu_102_p2 == 1'd0) & (fft_kernel_modu2_M_s_empty_n == 1'b0)));
end

assign c_1_fu_108_p2 = (c_reg_59 + 9'd1);

assign exitcond1_fu_90_p2 = ((r_reg_48 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond_fu_102_p2 = ((c_reg_59 == 9'd256) ? 1'b1 : 1'b0);

assign r_1_fu_96_p2 = (r_reg_48 + 9'd1);

endmodule //matrix_plus_SNR
