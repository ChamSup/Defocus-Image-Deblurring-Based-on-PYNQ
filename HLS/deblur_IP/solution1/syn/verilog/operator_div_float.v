// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module operator_div_float (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_x_M_real_dout,
        p_x_M_real_empty_n,
        p_x_M_real_read,
        p_x_M_imag_dout,
        p_x_M_imag_empty_n,
        p_x_M_imag_read,
        p_y_M_real_dout,
        p_y_M_real_empty_n,
        p_y_M_real_read,
        p_y_M_imag_dout,
        p_y_M_imag_empty_n,
        p_y_M_imag_read,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] p_x_M_real_dout;
input   p_x_M_real_empty_n;
output   p_x_M_real_read;
input  [31:0] p_x_M_imag_dout;
input   p_x_M_imag_empty_n;
output   p_x_M_imag_read;
input  [31:0] p_y_M_real_dout;
input   p_y_M_real_empty_n;
output   p_y_M_real_read;
input  [31:0] p_y_M_imag_dout;
input   p_y_M_imag_empty_n;
output   p_y_M_imag_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_x_M_real_read;
reg p_x_M_imag_read;
reg p_y_M_real_read;
reg p_y_M_imag_read;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_x_M_real_blk_n;
reg    p_x_M_imag_blk_n;
reg   [31:0] p_r_M_real_reg_44;
reg    ap_block_state1;
reg   [31:0] p_r_M_imag_reg_49;
wire    grp_operator_div_assign_float_fu_34_ap_start;
wire    grp_operator_div_assign_float_fu_34_ap_done;
wire    grp_operator_div_assign_float_fu_34_ap_idle;
wire    grp_operator_div_assign_float_fu_34_ap_ready;
wire    grp_operator_div_assign_float_fu_34_p_z_M_real_read;
wire    grp_operator_div_assign_float_fu_34_p_z_M_imag_read;
wire   [31:0] grp_operator_div_assign_float_fu_34_ap_return_0;
wire   [31:0] grp_operator_div_assign_float_fu_34_ap_return_1;
reg    grp_operator_div_assign_float_fu_34_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_operator_div_assign_float_fu_34_ap_start_reg = 1'b0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
end

operator_div_assign_float grp_operator_div_assign_float_fu_34(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_operator_div_assign_float_fu_34_ap_start),
    .ap_done(grp_operator_div_assign_float_fu_34_ap_done),
    .ap_idle(grp_operator_div_assign_float_fu_34_ap_idle),
    .ap_ready(grp_operator_div_assign_float_fu_34_ap_ready),
    .complex_float_M_real_read(p_r_M_real_reg_44),
    .complex_float_M_imag_read(p_r_M_imag_reg_49),
    .p_z_M_real_dout(p_y_M_real_dout),
    .p_z_M_real_empty_n(p_y_M_real_empty_n),
    .p_z_M_real_read(grp_operator_div_assign_float_fu_34_p_z_M_real_read),
    .p_z_M_imag_dout(p_y_M_imag_dout),
    .p_z_M_imag_empty_n(p_y_M_imag_empty_n),
    .p_z_M_imag_read(grp_operator_div_assign_float_fu_34_p_z_M_imag_read),
    .ap_return_0(grp_operator_div_assign_float_fu_34_ap_return_0),
    .ap_return_1(grp_operator_div_assign_float_fu_34_ap_return_1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if (((grp_operator_div_assign_float_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_return_0_preg <= grp_operator_div_assign_float_fu_34_ap_return_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if (((grp_operator_div_assign_float_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_return_1_preg <= grp_operator_div_assign_float_fu_34_ap_return_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_operator_div_assign_float_fu_34_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_operator_div_assign_float_fu_34_ap_start_reg <= 1'b1;
        end else if ((grp_operator_div_assign_float_fu_34_ap_ready == 1'b1)) begin
            grp_operator_div_assign_float_fu_34_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (p_x_M_imag_empty_n == 1'b0) | (p_x_M_real_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_r_M_imag_reg_49 <= p_x_M_imag_dout;
        p_r_M_real_reg_44 <= p_x_M_real_dout;
    end
end

always @ (*) begin
    if ((((grp_operator_div_assign_float_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_operator_div_assign_float_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((grp_operator_div_assign_float_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_return_0 = grp_operator_div_assign_float_fu_34_ap_return_0;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((grp_operator_div_assign_float_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_return_1 = grp_operator_div_assign_float_fu_34_ap_return_1;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_x_M_imag_blk_n = p_x_M_imag_empty_n;
    end else begin
        p_x_M_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_x_M_imag_empty_n == 1'b0) | (p_x_M_real_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_x_M_imag_read = 1'b1;
    end else begin
        p_x_M_imag_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_x_M_real_blk_n = p_x_M_real_empty_n;
    end else begin
        p_x_M_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_x_M_imag_empty_n == 1'b0) | (p_x_M_real_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_x_M_real_read = 1'b1;
    end else begin
        p_x_M_real_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_y_M_imag_read = grp_operator_div_assign_float_fu_34_p_z_M_imag_read;
    end else begin
        p_y_M_imag_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_y_M_real_read = grp_operator_div_assign_float_fu_34_p_z_M_real_read;
    end else begin
        p_y_M_real_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (p_x_M_imag_empty_n == 1'b0) | (p_x_M_real_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_operator_div_assign_float_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (p_x_M_imag_empty_n == 1'b0) | (p_x_M_real_empty_n == 1'b0));
end

assign grp_operator_div_assign_float_fu_34_ap_start = grp_operator_div_assign_float_fu_34_ap_start_reg;

endmodule //operator_div_float
