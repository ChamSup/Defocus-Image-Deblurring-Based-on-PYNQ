// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dummy_proc_middle_1394 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        st_in_data_V_read,
        out_r_din,
        out_r_full_n,
        out_r_write,
        xk1_dout,
        xk1_empty_n,
        xk1_read
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] st_in_data_V_read;
output  [63:0] out_r_din;
input   out_r_full_n;
output   out_r_write;
input  [63:0] xk1_dout;
input   xk1_empty_n;
output   xk1_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_r_write;
reg xk1_read;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    out_r_blk_n;
wire    ap_CS_fsm_state15;
reg    xk1_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_160_p2;
wire   [0:0] sel_tmp_fu_154_p2;
reg   [0:0] sel_tmp_reg_577;
wire   [8:0] i_1_fu_166_p2;
reg   [8:0] i_1_reg_586;
reg    ap_block_state2;
wire   [31:0] p_Val2_s_fu_172_p1;
reg   [31:0] p_Val2_s_reg_591;
reg   [31:0] p_Val2_91_reg_596;
wire   [22:0] tmp_V_5_fu_196_p1;
reg   [22:0] tmp_V_5_reg_601;
wire   [0:0] notlhs_fu_200_p2;
reg   [0:0] notlhs_reg_607;
reg   [0:0] p_Result_s_reg_612;
wire   [0:0] isNeg_fu_224_p3;
reg   [0:0] isNeg_reg_617;
wire  signed [8:0] ush_fu_242_p3;
reg  signed [8:0] ush_reg_622;
reg   [22:0] tmp_V_7_reg_628;
wire   [0:0] notlhs2_fu_270_p2;
reg   [0:0] notlhs2_reg_634;
reg   [0:0] p_Result_27_reg_639;
wire   [0:0] isNeg_1_fu_294_p3;
reg   [0:0] isNeg_1_reg_644;
wire  signed [8:0] ush_1_fu_312_p3;
reg  signed [8:0] ush_1_reg_649;
wire   [31:0] re_1_fu_320_p1;
reg   [31:0] re_1_reg_655;
wire    ap_CS_fsm_state3;
wire   [31:0] im_1_fu_325_p1;
reg   [31:0] im_1_reg_661;
wire   [31:0] p_Val2_97_fu_428_p3;
reg   [31:0] p_Val2_97_reg_667;
wire   [0:0] sel_tmp1_fu_435_p2;
reg   [0:0] sel_tmp1_reg_672;
wire   [31:0] p_Val2_99_fu_538_p3;
reg   [31:0] p_Val2_99_reg_677;
wire   [0:0] sel_tmp4_fu_545_p2;
reg   [0:0] sel_tmp4_reg_682;
wire   [31:0] grp_fu_124_p1;
reg   [31:0] tmp_s_reg_687;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_127_p1;
reg   [31:0] tmp_51_reg_692;
wire   [31:0] re_2_fu_550_p3;
reg   [31:0] re_2_reg_697;
wire    ap_CS_fsm_state14;
wire   [31:0] im_2_fu_556_p3;
reg   [31:0] im_2_reg_702;
reg   [8:0] i_reg_105;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state4;
wire   [0:0] ovflw_fu_150_p1;
wire   [7:0] tmp_V_fu_186_p4;
wire   [8:0] tmp_i_i_i_i_cast3_fu_214_p1;
wire   [8:0] sh_assign_fu_218_p2;
wire   [7:0] tmp_i_i_i_fu_232_p2;
wire  signed [8:0] tmp_i_i_i_cast_fu_238_p1;
wire   [7:0] tmp_V_6_fu_250_p4;
wire   [8:0] tmp_i_i_i_i9_cast1_fu_284_p1;
wire   [8:0] sh_assign_3_fu_288_p2;
wire   [7:0] tmp_i_i_i2_fu_302_p2;
wire  signed [8:0] tmp_i_i_i2_cast_fu_308_p1;
wire   [0:0] notrhs_fu_330_p2;
wire   [0:0] tmp_34_fu_130_p2;
wire   [0:0] tmp_39_fu_135_p2;
wire   [0:0] tmp_33_fu_335_p2;
wire   [0:0] tmp_45_fu_340_p2;
wire   [0:0] or_cond_demorgan_fu_346_p2;
wire   [24:0] mantissa_V_fu_358_p4;
wire  signed [31:0] sh_assign_11_cast_fu_371_p1;
wire  signed [24:0] sh_assign_11_cast_ca_fu_374_p1;
wire   [78:0] mantissa_V_4_cast4_fu_367_p1;
wire   [78:0] tmp_i_i_i_72_fu_377_p1;
wire   [24:0] r_V_fu_381_p2;
wire   [0:0] tmp_fu_393_p3;
wire   [78:0] r_V_39_fu_387_p2;
wire   [31:0] tmp_46_fu_401_p1;
wire   [31:0] tmp_47_fu_405_p4;
wire   [31:0] p_Val2_96_fu_415_p3;
wire   [31:0] result_V_1_fu_422_p2;
wire   [0:0] or_cond_fu_352_p2;
wire   [0:0] notrhs2_fu_440_p2;
wire   [0:0] tmp_44_fu_140_p2;
wire   [0:0] tmp_48_fu_145_p2;
wire   [0:0] tmp_43_fu_445_p2;
wire   [0:0] tmp_49_fu_450_p2;
wire   [0:0] or_cond2_demorgan_fu_456_p2;
wire   [24:0] mantissa_V_1_fu_468_p4;
wire  signed [31:0] sh_assign_14_cast_fu_481_p1;
wire  signed [24:0] sh_assign_14_cast_ca_fu_484_p1;
wire   [78:0] mantissa_V_6_cast2_fu_477_p1;
wire   [78:0] tmp_i_i_i2_73_fu_487_p1;
wire   [24:0] r_V_40_fu_491_p2;
wire   [0:0] tmp_57_fu_503_p3;
wire   [78:0] r_V_41_fu_497_p2;
wire   [31:0] tmp_50_fu_511_p1;
wire   [31:0] tmp_52_fu_515_p4;
wire   [31:0] p_Val2_98_fu_525_p3;
wire   [31:0] result_V_3_fu_532_p2;
wire   [0:0] or_cond2_fu_462_p2;
wire   [31:0] grp_fu_116_p2;
wire   [31:0] grp_fu_120_p2;
wire   [31:0] p_i_assign_toint_fu_565_p1;
wire   [31:0] p_r_assign_toint_fu_562_p1;
reg   [14:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

WienerDeblur_fsubbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
WienerDeblur_fsubbkb_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(re_1_reg_655),
    .din1(tmp_s_reg_687),
    .ce(1'b1),
    .dout(grp_fu_116_p2)
);

WienerDeblur_fsubbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
WienerDeblur_fsubbkb_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(im_1_reg_661),
    .din1(tmp_51_reg_692),
    .ce(1'b1),
    .dout(grp_fu_120_p2)
);

WienerDeblur_sitocud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
WienerDeblur_sitocud_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_Val2_97_reg_667),
    .ce(1'b1),
    .dout(grp_fu_124_p1)
);

WienerDeblur_sitocud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
WienerDeblur_sitocud_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_Val2_99_reg_677),
    .ce(1'b1),
    .dout(grp_fu_127_p1)
);

WienerDeblur_fcmpdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
WienerDeblur_fcmpdEe_U17(
    .din0(re_1_fu_320_p1),
    .din1(32'd3212836864),
    .opcode(5'd4),
    .dout(tmp_34_fu_130_p2)
);

WienerDeblur_fcmpdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
WienerDeblur_fcmpdEe_U18(
    .din0(re_1_fu_320_p1),
    .din1(32'd1065353216),
    .opcode(5'd3),
    .dout(tmp_39_fu_135_p2)
);

WienerDeblur_fcmpdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
WienerDeblur_fcmpdEe_U19(
    .din0(im_1_fu_325_p1),
    .din1(32'd3212836864),
    .opcode(5'd4),
    .dout(tmp_44_fu_140_p2)
);

WienerDeblur_fcmpdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
WienerDeblur_fcmpdEe_U20(
    .din0(im_1_fu_325_p1),
    .din1(32'd1065353216),
    .opcode(5'd3),
    .dout(tmp_48_fu_145_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((out_r_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        i_reg_105 <= i_1_reg_586;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_105 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_fu_160_p2 == 1'd0) & (xk1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_586 <= i_1_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        im_1_reg_661 <= im_1_fu_325_p1;
        p_Val2_97_reg_667 <= p_Val2_97_fu_428_p3;
        p_Val2_99_reg_677 <= p_Val2_99_fu_538_p3;
        re_1_reg_655 <= re_1_fu_320_p1;
        sel_tmp1_reg_672 <= sel_tmp1_fu_435_p2;
        sel_tmp4_reg_682 <= sel_tmp4_fu_545_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        im_2_reg_702 <= im_2_fu_556_p3;
        re_2_reg_697 <= re_2_fu_550_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_fu_160_p2 == 1'd0) & (xk1_empty_n == 1'b0)) & (exitcond_fu_160_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        isNeg_1_reg_644 <= sh_assign_3_fu_288_p2[32'd8];
        isNeg_reg_617 <= sh_assign_fu_218_p2[32'd8];
        notlhs2_reg_634 <= notlhs2_fu_270_p2;
        notlhs_reg_607 <= notlhs_fu_200_p2;
        p_Result_27_reg_639 <= xk1_dout[32'd63];
        p_Result_s_reg_612 <= xk1_dout[32'd31];
        p_Val2_91_reg_596 <= {{xk1_dout[63:32]}};
        p_Val2_s_reg_591 <= p_Val2_s_fu_172_p1;
        tmp_V_5_reg_601 <= tmp_V_5_fu_196_p1;
        tmp_V_7_reg_628 <= {{xk1_dout[54:32]}};
        ush_1_reg_649 <= ush_1_fu_312_p3;
        ush_reg_622 <= ush_fu_242_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sel_tmp_reg_577 <= sel_tmp_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp4_reg_682 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_51_reg_692 <= grp_fu_127_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp1_reg_672 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_s_reg_687 <= grp_fu_124_p1;
    end
end

always @ (*) begin
    if (((~((exitcond_fu_160_p2 == 1'd0) & (xk1_empty_n == 1'b0)) & (exitcond_fu_160_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_160_p2 == 1'd0) & (xk1_empty_n == 1'b0)) & (exitcond_fu_160_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        out_r_blk_n = out_r_full_n;
    end else begin
        out_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_r_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        out_r_write = 1'b1;
    end else begin
        out_r_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_160_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        xk1_blk_n = xk1_empty_n;
    end else begin
        xk1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_160_p2 == 1'd0) & (xk1_empty_n == 1'b0)) & (exitcond_fu_160_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        xk1_read = 1'b1;
    end else begin
        xk1_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((exitcond_fu_160_p2 == 1'd0) & (xk1_empty_n == 1'b0)) & (exitcond_fu_160_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((exitcond_fu_160_p2 == 1'd0) & (xk1_empty_n == 1'b0)) & (exitcond_fu_160_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((out_r_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2 = ((exitcond_fu_160_p2 == 1'd0) & (xk1_empty_n == 1'b0));
end

assign exitcond_fu_160_p2 = ((i_reg_105 == 9'd256) ? 1'b1 : 1'b0);

assign i_1_fu_166_p2 = (i_reg_105 + 9'd1);

assign im_1_fu_325_p1 = p_Val2_91_reg_596;

assign im_2_fu_556_p3 = ((sel_tmp4_reg_682[0:0] === 1'b1) ? im_1_reg_661 : grp_fu_120_p2);

assign isNeg_1_fu_294_p3 = sh_assign_3_fu_288_p2[32'd8];

assign isNeg_fu_224_p3 = sh_assign_fu_218_p2[32'd8];

assign mantissa_V_1_fu_468_p4 = {{{{1'd1}, {tmp_V_7_reg_628}}}, {1'd0}};

assign mantissa_V_4_cast4_fu_367_p1 = mantissa_V_fu_358_p4;

assign mantissa_V_6_cast2_fu_477_p1 = mantissa_V_1_fu_468_p4;

assign mantissa_V_fu_358_p4 = {{{{1'd1}, {tmp_V_5_reg_601}}}, {1'd0}};

assign notlhs2_fu_270_p2 = ((tmp_V_6_fu_250_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_200_p2 = ((tmp_V_fu_186_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs2_fu_440_p2 = ((tmp_V_7_reg_628 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_330_p2 = ((tmp_V_5_reg_601 == 23'd0) ? 1'b1 : 1'b0);

assign or_cond2_demorgan_fu_456_p2 = (tmp_49_fu_450_p2 & tmp_43_fu_445_p2);

assign or_cond2_fu_462_p2 = (or_cond2_demorgan_fu_456_p2 ^ 1'd1);

assign or_cond_demorgan_fu_346_p2 = (tmp_45_fu_340_p2 & tmp_33_fu_335_p2);

assign or_cond_fu_352_p2 = (or_cond_demorgan_fu_346_p2 ^ 1'd1);

assign out_r_din = {{p_i_assign_toint_fu_565_p1}, {p_r_assign_toint_fu_562_p1}};

assign ovflw_fu_150_p1 = st_in_data_V_read[0:0];

assign p_Val2_96_fu_415_p3 = ((isNeg_reg_617[0:0] === 1'b1) ? tmp_46_fu_401_p1 : tmp_47_fu_405_p4);

assign p_Val2_97_fu_428_p3 = ((p_Result_s_reg_612[0:0] === 1'b1) ? result_V_1_fu_422_p2 : p_Val2_96_fu_415_p3);

assign p_Val2_98_fu_525_p3 = ((isNeg_1_reg_644[0:0] === 1'b1) ? tmp_50_fu_511_p1 : tmp_52_fu_515_p4);

assign p_Val2_99_fu_538_p3 = ((p_Result_27_reg_639[0:0] === 1'b1) ? result_V_3_fu_532_p2 : p_Val2_98_fu_525_p3);

assign p_Val2_s_fu_172_p1 = xk1_dout[31:0];

assign p_i_assign_toint_fu_565_p1 = im_2_reg_702;

assign p_r_assign_toint_fu_562_p1 = re_2_reg_697;

assign r_V_39_fu_387_p2 = mantissa_V_4_cast4_fu_367_p1 << tmp_i_i_i_72_fu_377_p1;

assign r_V_40_fu_491_p2 = mantissa_V_1_fu_468_p4 >> sh_assign_14_cast_ca_fu_484_p1;

assign r_V_41_fu_497_p2 = mantissa_V_6_cast2_fu_477_p1 << tmp_i_i_i2_73_fu_487_p1;

assign r_V_fu_381_p2 = mantissa_V_fu_358_p4 >> sh_assign_11_cast_ca_fu_374_p1;

assign re_1_fu_320_p1 = p_Val2_s_reg_591;

assign re_2_fu_550_p3 = ((sel_tmp1_reg_672[0:0] === 1'b1) ? re_1_reg_655 : grp_fu_116_p2);

assign result_V_1_fu_422_p2 = (32'd0 - p_Val2_96_fu_415_p3);

assign result_V_3_fu_532_p2 = (32'd0 - p_Val2_98_fu_525_p3);

assign sel_tmp1_fu_435_p2 = (sel_tmp_reg_577 | or_cond_fu_352_p2);

assign sel_tmp4_fu_545_p2 = (sel_tmp_reg_577 | or_cond2_fu_462_p2);

assign sel_tmp_fu_154_p2 = (ovflw_fu_150_p1 ^ 1'd1);

assign sh_assign_11_cast_ca_fu_374_p1 = ush_reg_622;

assign sh_assign_11_cast_fu_371_p1 = ush_reg_622;

assign sh_assign_14_cast_ca_fu_484_p1 = ush_1_reg_649;

assign sh_assign_14_cast_fu_481_p1 = ush_1_reg_649;

assign sh_assign_3_fu_288_p2 = ($signed(9'd385) + $signed(tmp_i_i_i_i9_cast1_fu_284_p1));

assign sh_assign_fu_218_p2 = ($signed(9'd385) + $signed(tmp_i_i_i_i_cast3_fu_214_p1));

assign tmp_33_fu_335_p2 = (notrhs_fu_330_p2 | notlhs_reg_607);

assign tmp_43_fu_445_p2 = (notrhs2_fu_440_p2 | notlhs2_reg_634);

assign tmp_45_fu_340_p2 = (tmp_39_fu_135_p2 | tmp_34_fu_130_p2);

assign tmp_46_fu_401_p1 = tmp_fu_393_p3;

assign tmp_47_fu_405_p4 = {{r_V_39_fu_387_p2[55:24]}};

assign tmp_49_fu_450_p2 = (tmp_48_fu_145_p2 | tmp_44_fu_140_p2);

assign tmp_50_fu_511_p1 = tmp_57_fu_503_p3;

assign tmp_52_fu_515_p4 = {{r_V_41_fu_497_p2[55:24]}};

assign tmp_57_fu_503_p3 = r_V_40_fu_491_p2[32'd24];

assign tmp_V_5_fu_196_p1 = xk1_dout[22:0];

assign tmp_V_6_fu_250_p4 = {{xk1_dout[62:55]}};

assign tmp_V_fu_186_p4 = {{xk1_dout[30:23]}};

assign tmp_fu_393_p3 = r_V_fu_381_p2[32'd24];

assign tmp_i_i_i2_73_fu_487_p1 = $unsigned(sh_assign_14_cast_fu_481_p1);

assign tmp_i_i_i2_cast_fu_308_p1 = $signed(tmp_i_i_i2_fu_302_p2);

assign tmp_i_i_i2_fu_302_p2 = (8'd127 - tmp_V_6_fu_250_p4);

assign tmp_i_i_i_72_fu_377_p1 = $unsigned(sh_assign_11_cast_fu_371_p1);

assign tmp_i_i_i_cast_fu_238_p1 = $signed(tmp_i_i_i_fu_232_p2);

assign tmp_i_i_i_fu_232_p2 = (8'd127 - tmp_V_fu_186_p4);

assign tmp_i_i_i_i9_cast1_fu_284_p1 = tmp_V_6_fu_250_p4;

assign tmp_i_i_i_i_cast3_fu_214_p1 = tmp_V_fu_186_p4;

assign ush_1_fu_312_p3 = ((isNeg_1_fu_294_p3[0:0] === 1'b1) ? tmp_i_i_i2_cast_fu_308_p1 : sh_assign_3_fu_288_p2);

assign ush_fu_242_p3 = ((isNeg_fu_224_p3[0:0] === 1'b1) ? tmp_i_i_i_cast_fu_238_p1 : sh_assign_fu_218_p2);

endmodule //dummy_proc_middle_1394
